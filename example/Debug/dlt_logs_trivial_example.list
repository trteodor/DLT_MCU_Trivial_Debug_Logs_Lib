
dlt_logs_trivial_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004454  08004454  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004454  08004454  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004454  08004454  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800445c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  20000080  080044dc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001218  080044dc  00021218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b74b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002198  00000000  00000000  0002b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001880b  00000000  00000000  0002f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010654  00000000  00000000  00047a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b246  00000000  00000000  000580b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e32fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  000e3350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080042a4 	.word	0x080042a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080042a4 	.word	0x080042a4

0800014c <DLT_RB_Read>:
 ********************************************************************************************
 ********************************************************************************************
 * */

static RB_Status DLT_RB_Read(DltRingBuffer_t *Buf, uint8_t *MessageSize, uint8_t **MessagePointer)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	881a      	ldrh	r2, [r3, #0]
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	885b      	ldrh	r3, [r3, #2]
 8000160:	429a      	cmp	r2, r3
 8000162:	d101      	bne.n	8000168 <DLT_RB_Read+0x1c>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8000164:	2301      	movs	r3, #1
 8000166:	e023      	b.n	80001b0 <DLT_RB_Read+0x64>
	}

	// Write current value from buffer to pointer from argument
	*MessageSize = Buf->Buffer[Buf->Tail];
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	885b      	ldrh	r3, [r3, #2]
 800016c:	461a      	mov	r2, r3
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	4413      	add	r3, r2
 8000172:	791a      	ldrb	r2, [r3, #4]
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	701a      	strb	r2, [r3, #0]
	*MessagePointer = &DltMessagesTab[Buf->Tail][0];
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	885b      	ldrh	r3, [r3, #2]
 800017c:	461a      	mov	r2, r3
 800017e:	4613      	mov	r3, r2
 8000180:	021b      	lsls	r3, r3, #8
 8000182:	1a9b      	subs	r3, r3, r2
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <DLT_RB_Read+0x70>)
 8000186:	441a      	add	r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	601a      	str	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % DLT_RING_BUFFER_SIZE;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	885b      	ldrh	r3, [r3, #2]
 8000190:	1c5a      	adds	r2, r3, #1
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <DLT_RB_Read+0x74>)
 8000194:	fb83 1302 	smull	r1, r3, r3, r2
 8000198:	4413      	add	r3, r2
 800019a:	10d9      	asrs	r1, r3, #3
 800019c:	17d3      	asrs	r3, r2, #31
 800019e:	1ac9      	subs	r1, r1, r3
 80001a0:	460b      	mov	r3, r1
 80001a2:	011b      	lsls	r3, r3, #4
 80001a4:	1a5b      	subs	r3, r3, r1
 80001a6:	1ad1      	subs	r1, r2, r3
 80001a8:	b28a      	uxth	r2, r1
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 80001ae:	2300      	movs	r3, #0
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001f8 	.word	0x200001f8
 80001c0:	88888889 	.word	0x88888889

080001c4 <DLT_RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
static RB_Status DLT_RB_Write(DltRingBuffer_t *Buf,uint8_t *DltLogData, uint8_t MessageSize)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	4613      	mov	r3, r2
 80001d0:	71fb      	strb	r3, [r7, #7]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % DLT_RING_BUFFER_SIZE;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	881b      	ldrh	r3, [r3, #0]
 80001d6:	1c5a      	adds	r2, r3, #1
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <DLT_RB_Write+0x94>)
 80001da:	fb83 1302 	smull	r1, r3, r3, r2
 80001de:	4413      	add	r3, r2
 80001e0:	10d9      	asrs	r1, r3, #3
 80001e2:	17d3      	asrs	r3, r2, #31
 80001e4:	1ac9      	subs	r1, r1, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	1a5b      	subs	r3, r3, r1
 80001ec:	1ad1      	subs	r1, r2, r3
 80001ee:	460b      	mov	r3, r1
 80001f0:	74fb      	strb	r3, [r7, #19]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 80001f2:	7cfb      	ldrb	r3, [r7, #19]
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	885b      	ldrh	r3, [r3, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <DLT_RB_Write+0x3e>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 80001fe:	2301      	movs	r3, #1
 8000200:	e025      	b.n	800024e <DLT_RB_Write+0x8a>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = MessageSize;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	881b      	ldrh	r3, [r3, #0]
 8000206:	461a      	mov	r2, r3
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4413      	add	r3, r2
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	711a      	strb	r2, [r3, #4]

	/*Copy the values to new buffer*/
	for(int i=0; i<MessageSize; i++)
 8000210:	2300      	movs	r3, #0
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	e012      	b.n	800023c <DLT_RB_Write+0x78>
	{
		DltMessagesTab[Buf->Head][i] = DltLogData[i];
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	4413      	add	r3, r2
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	8812      	ldrh	r2, [r2, #0]
 8000220:	4611      	mov	r1, r2
 8000222:	7818      	ldrb	r0, [r3, #0]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <DLT_RB_Write+0x98>)
 8000226:	460b      	mov	r3, r1
 8000228:	021b      	lsls	r3, r3, #8
 800022a:	1a5b      	subs	r3, r3, r1
 800022c:	441a      	add	r2, r3
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	4413      	add	r3, r2
 8000232:	4602      	mov	r2, r0
 8000234:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MessageSize; i++)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	3301      	adds	r3, #1
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	697a      	ldr	r2, [r7, #20]
 8000240:	429a      	cmp	r2, r3
 8000242:	dbe8      	blt.n	8000216 <DLT_RB_Write+0x52>
	}

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8000244:	7cfb      	ldrb	r3, [r7, #19]
 8000246:	b29a      	uxth	r2, r3
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	801a      	strh	r2, [r3, #0]

	// Everything is ok - return OK status
	return RB_OK;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	371c      	adds	r7, #28
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	88888889 	.word	0x88888889
 800025c:	200001f8 	.word	0x200001f8

08000260 <PrepareHoleHeader>:
 *
 * refer to: https://www.autosar.org/fileadmin/user_upload/standards/foundation/1-0/AUTOSAR_PRS_DiagnosticLogAndTraceProtocol.pdf
 *
 * */
static void PrepareHoleHeader(uint8_t Level, uint32_t AppId, uint32_t ContextId, uint16_t size)
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
 800026a:	461a      	mov	r2, r3
 800026c:	4603      	mov	r3, r0
 800026e:	73fb      	strb	r3, [r7, #15]
 8000270:	4613      	mov	r3, r2
 8000272:	81bb      	strh	r3, [r7, #12]
	if(size > (254 -32) )
 8000274:	89bb      	ldrh	r3, [r7, #12]
 8000276:	2bde      	cmp	r3, #222	; 0xde
 8000278:	d900      	bls.n	800027c <PrepareHoleHeader+0x1c>
	{
		/*Error to handle or please develop this function */
		while(1)
 800027a:	e7fe      	b.n	800027a <PrepareHoleHeader+0x1a>

	}


	/*START HEADER*/
	DltDebugTmpBuf[0] =  0x44; /*'D'*/
 800027c:	4b41      	ldr	r3, [pc, #260]	; (8000384 <PrepareHoleHeader+0x124>)
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	701a      	strb	r2, [r3, #0]
	DltDebugTmpBuf[1] =  0x4c; /*'L'*/
 8000282:	4b40      	ldr	r3, [pc, #256]	; (8000384 <PrepareHoleHeader+0x124>)
 8000284:	224c      	movs	r2, #76	; 0x4c
 8000286:	705a      	strb	r2, [r3, #1]
	DltDebugTmpBuf[2] =  0x53; /*'S'*/
 8000288:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <PrepareHoleHeader+0x124>)
 800028a:	2253      	movs	r2, #83	; 0x53
 800028c:	709a      	strb	r2, [r3, #2]
	DltDebugTmpBuf[3] =  0x01; /*'0x01'*/
 800028e:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <PrepareHoleHeader+0x124>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]


	DltDebugTmpBuf[4] =  0x35; /*'Dlt base header config
 8000294:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <PrepareHoleHeader+0x124>)
 8000296:	2235      	movs	r2, #53	; 0x35
 8000298:	711a      	strb	r2, [r3, #4]
	* With Seesion ID - false
	* With time stamp - true
	* version number -random
	'*/

	DltDebugTmpBuf[5] =  ActDltMessageCounter++; /*'Message counter value '*/
 800029a:	4b3b      	ldr	r3, [pc, #236]	; (8000388 <PrepareHoleHeader+0x128>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	b2d1      	uxtb	r1, r2
 80002a2:	4a39      	ldr	r2, [pc, #228]	; (8000388 <PrepareHoleHeader+0x128>)
 80002a4:	7011      	strb	r1, [r2, #0]
 80002a6:	4a37      	ldr	r2, [pc, #220]	; (8000384 <PrepareHoleHeader+0x124>)
 80002a8:	7153      	strb	r3, [r2, #5]

	/*TODO: - it must be fixed!!!! - Length*/
	DltDebugTmpBuf[6] =  0x00; /*Message length general*/
 80002aa:	4b36      	ldr	r3, [pc, #216]	; (8000384 <PrepareHoleHeader+0x124>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	719a      	strb	r2, [r3, #6]
//	DltDebugTmpBuf[7] =  0x37; /*'Message length general '*/
	DltDebugTmpBuf[7]=28+size; /*General size */
 80002b0:	89bb      	ldrh	r3, [r7, #12]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	331c      	adds	r3, #28
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <PrepareHoleHeader+0x124>)
 80002ba:	71da      	strb	r2, [r3, #7]


	uint32_t TempEcuId = DLT_LOG_ECUID_VALUE;
 80002bc:	2353      	movs	r3, #83	; 0x53
 80002be:	061a      	lsls	r2, r3, #24
 80002c0:	2354      	movs	r3, #84	; 0x54
 80002c2:	041b      	lsls	r3, r3, #16
 80002c4:	431a      	orrs	r2, r3
 80002c6:	2346      	movs	r3, #70	; 0x46
 80002c8:	021b      	lsls	r3, r3, #8
 80002ca:	4313      	orrs	r3, r2
 80002cc:	2231      	movs	r2, #49	; 0x31
 80002ce:	4313      	orrs	r3, r2
 80002d0:	617b      	str	r3, [r7, #20]
	/*ECU ID*/
	DltDebugTmpBuf[8]= ((uint8_t*)&TempEcuId)[3];
 80002d2:	7dfa      	ldrb	r2, [r7, #23]
 80002d4:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <PrepareHoleHeader+0x124>)
 80002d6:	721a      	strb	r2, [r3, #8]
	DltDebugTmpBuf[9]= ((uint8_t*)&TempEcuId)[2];
 80002d8:	7dba      	ldrb	r2, [r7, #22]
 80002da:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <PrepareHoleHeader+0x124>)
 80002dc:	725a      	strb	r2, [r3, #9]
	DltDebugTmpBuf[10]= ((uint8_t*)&TempEcuId)[1];
 80002de:	7d7a      	ldrb	r2, [r7, #21]
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <PrepareHoleHeader+0x124>)
 80002e2:	729a      	strb	r2, [r3, #10]
	DltDebugTmpBuf[11]= ((uint8_t*)&TempEcuId)[0];
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b26      	ldr	r3, [pc, #152]	; (8000384 <PrepareHoleHeader+0x124>)
 80002ec:	72da      	strb	r2, [r3, #11]

	/*Time stamp*/
	DltDebugTmpBuf[12]= 0x00; /**/
 80002ee:	4b25      	ldr	r3, [pc, #148]	; (8000384 <PrepareHoleHeader+0x124>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	731a      	strb	r2, [r3, #12]
	DltDebugTmpBuf[13]= 0x23; /**/
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <PrepareHoleHeader+0x124>)
 80002f6:	2223      	movs	r2, #35	; 0x23
 80002f8:	735a      	strb	r2, [r3, #13]
	DltDebugTmpBuf[14]= 0x4b; /**/
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <PrepareHoleHeader+0x124>)
 80002fc:	224b      	movs	r2, #75	; 0x4b
 80002fe:	739a      	strb	r2, [r3, #14]
	DltDebugTmpBuf[15]= 0x33; /**/
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <PrepareHoleHeader+0x124>)
 8000302:	2233      	movs	r2, #51	; 0x33
 8000304:	73da      	strb	r2, [r3, #15]

	/*Extended header --verbose | type serial*/
//	DltDebugTmpBuf[16]= 0x41; /**/
	DltDebugTmpBuf[16]= (Level << 4) | 1;
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	b25b      	sxtb	r3, r3
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	b25b      	sxtb	r3, r3
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <PrepareHoleHeader+0x124>)
 8000316:	741a      	strb	r2, [r3, #16]

	/*Number of arguments*/
	DltDebugTmpBuf[17]= 0x01; /**/
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <PrepareHoleHeader+0x124>)
 800031a:	2201      	movs	r2, #1
 800031c:	745a      	strb	r2, [r3, #17]

	/*App id */
	DltDebugTmpBuf[18]= ((uint8_t*)&AppId)[3];
 800031e:	7afa      	ldrb	r2, [r7, #11]
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <PrepareHoleHeader+0x124>)
 8000322:	749a      	strb	r2, [r3, #18]
	DltDebugTmpBuf[19]= ((uint8_t*)&AppId)[2];
 8000324:	7aba      	ldrb	r2, [r7, #10]
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <PrepareHoleHeader+0x124>)
 8000328:	74da      	strb	r2, [r3, #19]
	DltDebugTmpBuf[20]= ((uint8_t*)&AppId)[1];
 800032a:	7a7a      	ldrb	r2, [r7, #9]
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <PrepareHoleHeader+0x124>)
 800032e:	751a      	strb	r2, [r3, #20]
	DltDebugTmpBuf[21]= ((uint8_t*)&AppId)[0];
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <PrepareHoleHeader+0x124>)
 8000338:	755a      	strb	r2, [r3, #21]

	/*Contex ID  (4 bajty*/
	DltDebugTmpBuf[22]= ((uint8_t*)&ContextId)[3];
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <PrepareHoleHeader+0x124>)
 800033e:	759a      	strb	r2, [r3, #22]
	DltDebugTmpBuf[23]= ((uint8_t*)&ContextId)[2];
 8000340:	79ba      	ldrb	r2, [r7, #6]
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <PrepareHoleHeader+0x124>)
 8000344:	75da      	strb	r2, [r3, #23]
	DltDebugTmpBuf[24]= ((uint8_t*)&ContextId)[1];
 8000346:	797a      	ldrb	r2, [r7, #5]
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <PrepareHoleHeader+0x124>)
 800034a:	761a      	strb	r2, [r3, #24]
	DltDebugTmpBuf[25]= ((uint8_t*)&ContextId)[0];
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <PrepareHoleHeader+0x124>)
 8000352:	765a      	strb	r2, [r3, #25]

	/*Type info*/
	DltDebugTmpBuf[26]= 0x01; /**/
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <PrepareHoleHeader+0x124>)
 8000356:	2201      	movs	r2, #1
 8000358:	769a      	strb	r2, [r3, #26]
	DltDebugTmpBuf[27]= 0x82; /**/
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <PrepareHoleHeader+0x124>)
 800035c:	2282      	movs	r2, #130	; 0x82
 800035e:	76da      	strb	r2, [r3, #27]
	DltDebugTmpBuf[28]= 0x00; /**/
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <PrepareHoleHeader+0x124>)
 8000362:	2200      	movs	r2, #0
 8000364:	771a      	strb	r2, [r3, #28]
	DltDebugTmpBuf[29]= 0x00; /**/
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <PrepareHoleHeader+0x124>)
 8000368:	2200      	movs	r2, #0
 800036a:	775a      	strb	r2, [r3, #29]

	/*Argument 1*/
	DltDebugTmpBuf[30]= size; /*the size of the load in simplified form, but not exactly but generally yes*/
 800036c:	89bb      	ldrh	r3, [r7, #12]
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <PrepareHoleHeader+0x124>)
 8000372:	779a      	strb	r2, [r3, #30]
	DltDebugTmpBuf[31]= 0x00; /**/
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <PrepareHoleHeader+0x124>)
 8000376:	2200      	movs	r2, #0
 8000378:	77da      	strb	r2, [r3, #31]
}
 800037a:	bf00      	nop
 800037c:	371c      	adds	r7, #28
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	200000e4 	.word	0x200000e4
 8000388:	200001e3 	.word	0x200001e3

0800038c <DLTuc_RegisterTransmitSerialDataCallback>:
 *  This simple stack/library must have initialized by "DLTuc_RegisterTransmitSerialDataCallback"
 *  As a parameter must by pass function which will transmit serial data
 *
 * */
void DLTuc_RegisterTransmitSerialDataCallback(void LLSerialTrDataFunctionCb(uint8_t *DltLogData, uint8_t Size))
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	ExtSerialTrDataFunctionCb = LLSerialTrDataFunctionCb;
 8000394:	4a19      	ldr	r2, [pc, #100]	; (80003fc <DLTuc_RegisterTransmitSerialDataCallback+0x70>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6013      	str	r3, [r2, #0]

	/*Preapre LOG DROPPED Info Log*/
	PrepareHoleHeader(DL_ERROR,0xDD,0xDD,sizeof(DltLogDroppedInfo) );
 800039a:	230f      	movs	r3, #15
 800039c:	22dd      	movs	r2, #221	; 0xdd
 800039e:	21dd      	movs	r1, #221	; 0xdd
 80003a0:	2002      	movs	r0, #2
 80003a2:	f7ff ff5d 	bl	8000260 <PrepareHoleHeader>

	/*Payload!!!*/
	/*Copy payload text temporary*/
	for(int i=DLT_ACT_HOLE_HEADER_SIZE; i<(sizeof(DltLogDroppedInfo)+DLT_ACT_HOLE_HEADER_SIZE); i++)
 80003a6:	2320      	movs	r3, #32
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	e00b      	b.n	80003c4 <DLTuc_RegisterTransmitSerialDataCallback+0x38>
	{
		DltDebugTmpBuf[i]= DltLogDroppedInfo[i-DLT_ACT_HOLE_HEADER_SIZE];
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3b20      	subs	r3, #32
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <DLTuc_RegisterTransmitSerialDataCallback+0x74>)
 80003b2:	5cd1      	ldrb	r1, [r2, r3]
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <DLTuc_RegisterTransmitSerialDataCallback+0x78>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	4413      	add	r3, r2
 80003ba:	460a      	mov	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]
	for(int i=DLT_ACT_HOLE_HEADER_SIZE; i<(sizeof(DltLogDroppedInfo)+DLT_ACT_HOLE_HEADER_SIZE); i++)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3301      	adds	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2b2e      	cmp	r3, #46	; 0x2e
 80003c8:	d9f0      	bls.n	80003ac <DLTuc_RegisterTransmitSerialDataCallback+0x20>
	}

	for(int i=0; i<sizeof(DltLogDroppedInfoBuffer); i++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	e00b      	b.n	80003e8 <DLTuc_RegisterTransmitSerialDataCallback+0x5c>
	{
		DltLogDroppedInfoBuffer[i] = DltDebugTmpBuf[i];
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <DLTuc_RegisterTransmitSerialDataCallback+0x78>)
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	4413      	add	r3, r2
 80003d6:	7819      	ldrb	r1, [r3, #0]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <DLTuc_RegisterTransmitSerialDataCallback+0x7c>)
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	4413      	add	r3, r2
 80003de:	460a      	mov	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<sizeof(DltLogDroppedInfoBuffer); i++)
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2b3b      	cmp	r3, #59	; 0x3b
 80003ec:	d9f0      	bls.n	80003d0 <DLTuc_RegisterTransmitSerialDataCallback+0x44>
	}

	DLtLogDroppedSize = DLT_ACT_HOLE_HEADER_SIZE + sizeof(DltLogDroppedInfo);
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <DLTuc_RegisterTransmitSerialDataCallback+0x80>)
 80003f0:	222f      	movs	r2, #47	; 0x2f
 80003f2:	701a      	strb	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2000009c 	.word	0x2000009c
 8000400:	20000000 	.word	0x20000000
 8000404:	200000e4 	.word	0x200000e4
 8000408:	200000a4 	.word	0x200000a4
 800040c:	200000e0 	.word	0x200000e0

08000410 <DLTuc_MessageTransmitDone>:
 *  Call this function when the transsmision is end
 * For example in "DMA transmission end callback" to inform the lib that the message is transmitted
 *
 * */
void DLTuc_MessageTransmitDone(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
	uint8_t TmpMessageSize=0;
 8000416:	2300      	movs	r3, #0
 8000418:	71fb      	strb	r3, [r7, #7]
	uint8_t *TmpMessagePointer = NULL;
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]

	if(LogDroppedFlag == true)
 800041e:	4b16      	ldr	r3, [pc, #88]	; (8000478 <DLTuc_MessageTransmitDone+0x68>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d00d      	beq.n	8000442 <DLTuc_MessageTransmitDone+0x32>
	{
		LogDroppedFlag = false;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <DLTuc_MessageTransmitDone+0x68>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]

		if(ExtSerialTrDataFunctionCb != NULL)
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <DLTuc_MessageTransmitDone+0x6c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d006      	beq.n	8000442 <DLTuc_MessageTransmitDone+0x32>
		{
			ExtSerialTrDataFunctionCb(DltLogDroppedInfoBuffer, DLtLogDroppedSize);
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <DLTuc_MessageTransmitDone+0x6c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a11      	ldr	r2, [pc, #68]	; (8000480 <DLTuc_MessageTransmitDone+0x70>)
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	4811      	ldr	r0, [pc, #68]	; (8000484 <DLTuc_MessageTransmitDone+0x74>)
 8000440:	4798      	blx	r3
		}
	}

	if(DLT_RB_Read(&DltRingBuffer,&TmpMessageSize,&TmpMessagePointer) == RB_OK)
 8000442:	463a      	mov	r2, r7
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	4619      	mov	r1, r3
 8000448:	480f      	ldr	r0, [pc, #60]	; (8000488 <DLTuc_MessageTransmitDone+0x78>)
 800044a:	f7ff fe7f 	bl	800014c <DLT_RB_Read>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10a      	bne.n	800046a <DLTuc_MessageTransmitDone+0x5a>
	{
		if(ExtSerialTrDataFunctionCb != NULL)
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <DLTuc_MessageTransmitDone+0x6c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d009      	beq.n	8000470 <DLTuc_MessageTransmitDone+0x60>
		{
			ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <DLTuc_MessageTransmitDone+0x6c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	79f9      	ldrb	r1, [r7, #7]
 8000464:	4610      	mov	r0, r2
 8000466:	4798      	blx	r3
	}
	else
	{
		TransmitReadyStateFlag = true;
	}
}
 8000468:	e002      	b.n	8000470 <DLTuc_MessageTransmitDone+0x60>
		TransmitReadyStateFlag = true;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <DLTuc_MessageTransmitDone+0x7c>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000a0 	.word	0x200000a0
 800047c:	2000009c 	.word	0x2000009c
 8000480:	200000e0 	.word	0x200000e0
 8000484:	200000a4 	.word	0x200000a4
 8000488:	200001e4 	.word	0x200001e4
 800048c:	2000000f 	.word	0x2000000f

08000490 <DLTuc_LogOutVarArgs>:
 *
 * Typical most usefull function to create DLT Log
 *
 * */
void DLTuc_LogOutVarArgs(DltLogLevel_t Level, uint32_t AppId, uint32_t ContextId, uint8_t *Payload, ...)
{
 8000490:	b408      	push	{r3}
 8000492:	b580      	push	{r7, lr}
 8000494:	b089      	sub	sp, #36	; 0x24
 8000496:	af00      	add	r7, sp, #0
 8000498:	4603      	mov	r3, r0
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
 800049e:	73fb      	strb	r3, [r7, #15]
va_list ap;
uint16_t Size;

	va_start(ap, Payload);
 80004a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a4:	61bb      	str	r3, [r7, #24]
	Size = vsprintf((char *)DltDebugTmpBuf + DLT_ACT_HOLE_HEADER_SIZE, (char *)Payload,ap);
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <DLTuc_LogOutVarArgs+0xa8>)
 80004a8:	69ba      	ldr	r2, [r7, #24]
 80004aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80004ac:	4618      	mov	r0, r3
 80004ae:	f003 fa95 	bl	80039dc <vsiprintf>
 80004b2:	4603      	mov	r3, r0
 80004b4:	83fb      	strh	r3, [r7, #30]
	va_end(ap);

	PrepareHoleHeader(Level,AppId,ContextId,Size);
 80004b6:	8bfb      	ldrh	r3, [r7, #30]
 80004b8:	7bf8      	ldrb	r0, [r7, #15]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	f7ff fecf 	bl	8000260 <PrepareHoleHeader>
	Size = Size +DLT_ACT_HOLE_HEADER_SIZE;
 80004c2:	8bfb      	ldrh	r3, [r7, #30]
 80004c4:	3320      	adds	r3, #32
 80004c6:	83fb      	strh	r3, [r7, #30]


	if(DLT_RB_Write(&DltRingBuffer,DltDebugTmpBuf, Size) == RB_OK)
 80004c8:	8bfb      	ldrh	r3, [r7, #30]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	461a      	mov	r2, r3
 80004ce:	491b      	ldr	r1, [pc, #108]	; (800053c <DLTuc_LogOutVarArgs+0xac>)
 80004d0:	481b      	ldr	r0, [pc, #108]	; (8000540 <DLTuc_LogOutVarArgs+0xb0>)
 80004d2:	f7ff fe77 	bl	80001c4 <DLT_RB_Write>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <DLTuc_LogOutVarArgs+0x52>
		/*Nothing to do*/
	}
	else
	{
		/*Static flag for Transmit done call back*/
		LogDroppedFlag = true;
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <DLTuc_LogOutVarArgs+0xb4>)
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t TmpMessageSize=0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	75fb      	strb	r3, [r7, #23]
	uint8_t *TmpMessagePointer = NULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]


	if(TransmitReadyStateFlag == true)
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <DLTuc_LogOutVarArgs+0xb8>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d119      	bne.n	8000528 <DLTuc_LogOutVarArgs+0x98>
	{
		if(DLT_RB_Read(&DltRingBuffer,&TmpMessageSize,&TmpMessagePointer) == RB_OK)
 80004f4:	f107 0210 	add.w	r2, r7, #16
 80004f8:	f107 0317 	add.w	r3, r7, #23
 80004fc:	4619      	mov	r1, r3
 80004fe:	4810      	ldr	r0, [pc, #64]	; (8000540 <DLTuc_LogOutVarArgs+0xb0>)
 8000500:	f7ff fe24 	bl	800014c <DLT_RB_Read>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d10e      	bne.n	8000528 <DLTuc_LogOutVarArgs+0x98>
			{
				TransmitReadyStateFlag = false;
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <DLTuc_LogOutVarArgs+0xb8>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
				if(ExtSerialTrDataFunctionCb != NULL)
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <DLTuc_LogOutVarArgs+0xbc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d006      	beq.n	8000526 <DLTuc_LogOutVarArgs+0x96>
				{
					ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <DLTuc_LogOutVarArgs+0xbc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	7df9      	ldrb	r1, [r7, #23]
 8000520:	4610      	mov	r0, r2
 8000522:	4798      	blx	r3
				{
					while(1); /*Please Register the callback...*/
				}
			}
	}
}
 8000524:	e000      	b.n	8000528 <DLTuc_LogOutVarArgs+0x98>
					while(1); /*Please Register the callback...*/
 8000526:	e7fe      	b.n	8000526 <DLTuc_LogOutVarArgs+0x96>
}
 8000528:	bf00      	nop
 800052a:	3724      	adds	r7, #36	; 0x24
 800052c:	46bd      	mov	sp, r7
 800052e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000532:	b001      	add	sp, #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000104 	.word	0x20000104
 800053c:	200000e4 	.word	0x200000e4
 8000540:	200001e4 	.word	0x200001e4
 8000544:	200000a0 	.word	0x200000a0
 8000548:	2000000f 	.word	0x2000000f
 800054c:	2000009c 	.word	0x2000009c

08000550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_DMA_Init+0x48>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <MX_DMA_Init+0x48>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_DMA_Init+0x48>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2010      	movs	r0, #16
 8000574:	f000 fe7b 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000578:	2010      	movs	r0, #16
 800057a:	f000 fe94 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2011      	movs	r0, #17
 8000584:	f000 fe73 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000588:	2011      	movs	r0, #17
 800058a:	f000 fe8c 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a3a      	ldr	r2, [pc, #232]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <MX_GPIO_Init+0x104>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <MX_GPIO_Init+0x104>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <MX_GPIO_Init+0x108>)
 8000616:	f001 fa83 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_GPIO_Init+0x10c>)
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	481f      	ldr	r0, [pc, #124]	; (80006ac <MX_GPIO_Init+0x110>)
 8000630:	f001 f8f2 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000634:	2303      	movs	r3, #3
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0x114>)
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4819      	ldr	r0, [pc, #100]	; (80006ac <MX_GPIO_Init+0x110>)
 8000648:	f001 f8e6 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800064c:	2320      	movs	r3, #32
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4810      	ldr	r0, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x108>)
 8000664:	f001 f8d8 	bl	8001818 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2006      	movs	r0, #6
 800066e:	f000 fdfe 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000672:	2006      	movs	r0, #6
 8000674:	f000 fe17 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2007      	movs	r0, #7
 800067e:	f000 fdf6 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000682:	2007      	movs	r0, #7
 8000684:	f000 fe0f 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2028      	movs	r0, #40	; 0x28
 800068e:	f000 fdee 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000692:	2028      	movs	r0, #40	; 0x28
 8000694:	f000 fe07 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800
 80006a8:	10110000 	.word	0x10110000
 80006ac:	40011000 	.word	0x40011000
 80006b0:	10210000 	.word	0x10210000

080006b4 <HAL_GPIO_EXTI_Callback>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	80fb      	strh	r3, [r7, #6]
	uint32_t ActualCompare;

	ActualCompare = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_3);
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_GPIO_EXTI_Callback+0x54>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006c4:	60fb      	str	r3, [r7, #12]


	if(GPIO_Pin == GPIO_PIN_0)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10a      	bne.n	80006e2 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		if(ActualCompare < MaxPwmVal)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d2:	d202      	bcs.n	80006da <HAL_GPIO_EXTI_Callback+0x26>
		{
			ActualCompare = ActualCompare + ChangeStep;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
		}
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,ActualCompare);
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <HAL_GPIO_EXTI_Callback+0x54>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if(GPIO_Pin == GPIO_PIN_1)
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d109      	bne.n	80006fc <HAL_GPIO_EXTI_Callback+0x48>
	{
		if(ActualCompare >= ChangeStep)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <HAL_GPIO_EXTI_Callback+0x40>
		{
			ActualCompare = ActualCompare - ChangeStep;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
		}
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,ActualCompare);
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_GPIO_EXTI_Callback+0x54>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200010f0 	.word	0x200010f0

0800070c <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	DLTuc_MessageTransmitDone();
 8000714:	f7ff fe7c 	bl	8000410 <DLTuc_MessageTransmitDone>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <LLSerialTrDataFunctionC>:

void LLSerialTrDataFunctionC(uint8_t *DltLogData, uint8_t Size)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_DMA(&huart2, DltLogData, Size);
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	b29b      	uxth	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <LLSerialTrDataFunctionC+0x24>)
 8000736:	f002 fc59 	bl	8002fec <HAL_UART_Transmit_DMA>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20001138 	.word	0x20001138

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 fc31 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f961 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f7ff ff21 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 800075a:	f7ff fef9 	bl	8000550 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800075e:	f000 fb3f 	bl	8000de0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000762:	f000 fa69 	bl	8000c38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /*Register the transmit data callback for DLT lib*/
  DLTuc_RegisterTransmitSerialDataCallback(LLSerialTrDataFunctionC);
 8000766:	489e      	ldr	r0, [pc, #632]	; (80009e0 <main+0x298>)
 8000768:	f7ff fe10 	bl	800038c <DLTuc_RegisterTransmitSerialDataCallback>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800076c:	2100      	movs	r1, #0
 800076e:	489d      	ldr	r0, [pc, #628]	; (80009e4 <main+0x29c>)
 8000770:	f001 fec8 	bl	8002504 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000774:	2108      	movs	r1, #8
 8000776:	489b      	ldr	r0, [pc, #620]	; (80009e4 <main+0x29c>)
 8000778:	f001 fec4 	bl	8002504 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 800077c:	4b99      	ldr	r3, [pc, #612]	; (80009e4 <main+0x29c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2200      	movs	r2, #0
 8000782:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,InitPwmValue);
 8000784:	4b97      	ldr	r3, [pc, #604]	; (80009e4 <main+0x29c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800078c:	63da      	str	r2, [r3, #60]	; 0x3c


  /*LOG DROP TEST*/
for(int i=0; i<20; i++)
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	e089      	b.n	80008a8 <main+0x160>
{
	  DEBUGL(DL_INFO, "Log Drop testing0 :)  %d" , 5);
 8000794:	2331      	movs	r3, #49	; 0x31
 8000796:	061a      	lsls	r2, r3, #24
 8000798:	2332      	movs	r3, #50	; 0x32
 800079a:	041b      	lsls	r3, r3, #16
 800079c:	431a      	orrs	r2, r3
 800079e:	2333      	movs	r3, #51	; 0x33
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	4313      	orrs	r3, r2
 80007a4:	2234      	movs	r2, #52	; 0x34
 80007a6:	ea43 0102 	orr.w	r1, r3, r2
 80007aa:	2354      	movs	r3, #84	; 0x54
 80007ac:	061a      	lsls	r2, r3, #24
 80007ae:	2345      	movs	r3, #69	; 0x45
 80007b0:	041b      	lsls	r3, r3, #16
 80007b2:	431a      	orrs	r2, r3
 80007b4:	2353      	movs	r3, #83	; 0x53
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	4313      	orrs	r3, r2
 80007ba:	2254      	movs	r2, #84	; 0x54
 80007bc:	431a      	orrs	r2, r3
 80007be:	2305      	movs	r3, #5
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4b89      	ldr	r3, [pc, #548]	; (80009e8 <main+0x2a0>)
 80007c4:	2004      	movs	r0, #4
 80007c6:	f7ff fe63 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing1 :)  %d" , 5);
 80007ca:	2331      	movs	r3, #49	; 0x31
 80007cc:	061a      	lsls	r2, r3, #24
 80007ce:	2332      	movs	r3, #50	; 0x32
 80007d0:	041b      	lsls	r3, r3, #16
 80007d2:	431a      	orrs	r2, r3
 80007d4:	2333      	movs	r3, #51	; 0x33
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	4313      	orrs	r3, r2
 80007da:	2234      	movs	r2, #52	; 0x34
 80007dc:	ea43 0102 	orr.w	r1, r3, r2
 80007e0:	2354      	movs	r3, #84	; 0x54
 80007e2:	061a      	lsls	r2, r3, #24
 80007e4:	2345      	movs	r3, #69	; 0x45
 80007e6:	041b      	lsls	r3, r3, #16
 80007e8:	431a      	orrs	r2, r3
 80007ea:	2353      	movs	r3, #83	; 0x53
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	4313      	orrs	r3, r2
 80007f0:	2254      	movs	r2, #84	; 0x54
 80007f2:	431a      	orrs	r2, r3
 80007f4:	2305      	movs	r3, #5
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <main+0x2a4>)
 80007fa:	2004      	movs	r0, #4
 80007fc:	f7ff fe48 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing2:)  %d" , 5);
 8000800:	2331      	movs	r3, #49	; 0x31
 8000802:	061a      	lsls	r2, r3, #24
 8000804:	2332      	movs	r3, #50	; 0x32
 8000806:	041b      	lsls	r3, r3, #16
 8000808:	431a      	orrs	r2, r3
 800080a:	2333      	movs	r3, #51	; 0x33
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	4313      	orrs	r3, r2
 8000810:	2234      	movs	r2, #52	; 0x34
 8000812:	ea43 0102 	orr.w	r1, r3, r2
 8000816:	2354      	movs	r3, #84	; 0x54
 8000818:	061a      	lsls	r2, r3, #24
 800081a:	2345      	movs	r3, #69	; 0x45
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	431a      	orrs	r2, r3
 8000820:	2353      	movs	r3, #83	; 0x53
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	4313      	orrs	r3, r2
 8000826:	2254      	movs	r2, #84	; 0x54
 8000828:	431a      	orrs	r2, r3
 800082a:	2305      	movs	r3, #5
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	4b70      	ldr	r3, [pc, #448]	; (80009f0 <main+0x2a8>)
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff fe2d 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing3 :)  %d" , 5);
 8000836:	2331      	movs	r3, #49	; 0x31
 8000838:	061a      	lsls	r2, r3, #24
 800083a:	2332      	movs	r3, #50	; 0x32
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	431a      	orrs	r2, r3
 8000840:	2333      	movs	r3, #51	; 0x33
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	4313      	orrs	r3, r2
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	ea43 0102 	orr.w	r1, r3, r2
 800084c:	2354      	movs	r3, #84	; 0x54
 800084e:	061a      	lsls	r2, r3, #24
 8000850:	2345      	movs	r3, #69	; 0x45
 8000852:	041b      	lsls	r3, r3, #16
 8000854:	431a      	orrs	r2, r3
 8000856:	2353      	movs	r3, #83	; 0x53
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	4313      	orrs	r3, r2
 800085c:	2254      	movs	r2, #84	; 0x54
 800085e:	431a      	orrs	r2, r3
 8000860:	2305      	movs	r3, #5
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4b63      	ldr	r3, [pc, #396]	; (80009f4 <main+0x2ac>)
 8000866:	2004      	movs	r0, #4
 8000868:	f7ff fe12 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing4 :)  %d" , 5);
 800086c:	2331      	movs	r3, #49	; 0x31
 800086e:	061a      	lsls	r2, r3, #24
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	041b      	lsls	r3, r3, #16
 8000874:	431a      	orrs	r2, r3
 8000876:	2333      	movs	r3, #51	; 0x33
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	4313      	orrs	r3, r2
 800087c:	2234      	movs	r2, #52	; 0x34
 800087e:	ea43 0102 	orr.w	r1, r3, r2
 8000882:	2354      	movs	r3, #84	; 0x54
 8000884:	061a      	lsls	r2, r3, #24
 8000886:	2345      	movs	r3, #69	; 0x45
 8000888:	041b      	lsls	r3, r3, #16
 800088a:	431a      	orrs	r2, r3
 800088c:	2353      	movs	r3, #83	; 0x53
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	4313      	orrs	r3, r2
 8000892:	2254      	movs	r2, #84	; 0x54
 8000894:	431a      	orrs	r2, r3
 8000896:	2305      	movs	r3, #5
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <main+0x2b0>)
 800089c:	2004      	movs	r0, #4
 800089e:	f7ff fdf7 	bl	8000490 <DLTuc_LogOutVarArgs>
for(int i=0; i<20; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b13      	cmp	r3, #19
 80008ac:	f77f af72 	ble.w	8000794 <main+0x4c>
}

  HAL_Delay(50);
 80008b0:	2032      	movs	r0, #50	; 0x32
 80008b2:	f000 fbe1 	bl	8001078 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DEBUGL(DL_INFO, "Hello DLT Again %d Arg1 %d Arg2 :%d" , 2565, 56,23);
 80008b6:	2331      	movs	r3, #49	; 0x31
 80008b8:	061a      	lsls	r2, r3, #24
 80008ba:	2332      	movs	r3, #50	; 0x32
 80008bc:	041b      	lsls	r3, r3, #16
 80008be:	431a      	orrs	r2, r3
 80008c0:	2333      	movs	r3, #51	; 0x33
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	4313      	orrs	r3, r2
 80008c6:	2234      	movs	r2, #52	; 0x34
 80008c8:	ea43 0102 	orr.w	r1, r3, r2
 80008cc:	2354      	movs	r3, #84	; 0x54
 80008ce:	061a      	lsls	r2, r3, #24
 80008d0:	2345      	movs	r3, #69	; 0x45
 80008d2:	041b      	lsls	r3, r3, #16
 80008d4:	431a      	orrs	r2, r3
 80008d6:	2353      	movs	r3, #83	; 0x53
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	4313      	orrs	r3, r2
 80008dc:	2254      	movs	r2, #84	; 0x54
 80008de:	431a      	orrs	r2, r3
 80008e0:	2317      	movs	r3, #23
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	2338      	movs	r3, #56	; 0x38
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	f640 2305 	movw	r3, #2565	; 0xa05
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	4b43      	ldr	r3, [pc, #268]	; (80009fc <main+0x2b4>)
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff fdcd 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGFF(DL_INFO, "GENERALLY DLT Again1");
 80008f6:	2331      	movs	r3, #49	; 0x31
 80008f8:	061a      	lsls	r2, r3, #24
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	041b      	lsls	r3, r3, #16
 80008fe:	431a      	orrs	r2, r3
 8000900:	2333      	movs	r3, #51	; 0x33
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	4313      	orrs	r3, r2
 8000906:	2234      	movs	r2, #52	; 0x34
 8000908:	ea43 0102 	orr.w	r1, r3, r2
 800090c:	2354      	movs	r3, #84	; 0x54
 800090e:	061a      	lsls	r2, r3, #24
 8000910:	2345      	movs	r3, #69	; 0x45
 8000912:	041b      	lsls	r3, r3, #16
 8000914:	431a      	orrs	r2, r3
 8000916:	2353      	movs	r3, #83	; 0x53
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	4313      	orrs	r3, r2
 800091c:	2254      	movs	r2, #84	; 0x54
 800091e:	431a      	orrs	r2, r3
 8000920:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <main+0x2b8>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <main+0x2bc>)
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <main+0x2c0>)
 800092a:	2004      	movs	r0, #4
 800092c:	f7ff fdb0 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "AnotherTest DLT Again",0);
 8000930:	2331      	movs	r3, #49	; 0x31
 8000932:	061a      	lsls	r2, r3, #24
 8000934:	2332      	movs	r3, #50	; 0x32
 8000936:	041b      	lsls	r3, r3, #16
 8000938:	431a      	orrs	r2, r3
 800093a:	2333      	movs	r3, #51	; 0x33
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	4313      	orrs	r3, r2
 8000940:	2234      	movs	r2, #52	; 0x34
 8000942:	ea43 0102 	orr.w	r1, r3, r2
 8000946:	2354      	movs	r3, #84	; 0x54
 8000948:	061a      	lsls	r2, r3, #24
 800094a:	2345      	movs	r3, #69	; 0x45
 800094c:	041b      	lsls	r3, r3, #16
 800094e:	431a      	orrs	r2, r3
 8000950:	2353      	movs	r3, #83	; 0x53
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	4313      	orrs	r3, r2
 8000956:	2254      	movs	r2, #84	; 0x54
 8000958:	431a      	orrs	r2, r3
 800095a:	2300      	movs	r3, #0
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <main+0x2c4>)
 8000960:	2004      	movs	r0, #4
 8000962:	f7ff fd95 	bl	8000490 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "AnotherTest2 DLT Again",0);
 8000966:	2331      	movs	r3, #49	; 0x31
 8000968:	061a      	lsls	r2, r3, #24
 800096a:	2332      	movs	r3, #50	; 0x32
 800096c:	041b      	lsls	r3, r3, #16
 800096e:	431a      	orrs	r2, r3
 8000970:	2333      	movs	r3, #51	; 0x33
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	4313      	orrs	r3, r2
 8000976:	2234      	movs	r2, #52	; 0x34
 8000978:	ea43 0102 	orr.w	r1, r3, r2
 800097c:	2354      	movs	r3, #84	; 0x54
 800097e:	061a      	lsls	r2, r3, #24
 8000980:	2345      	movs	r3, #69	; 0x45
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	431a      	orrs	r2, r3
 8000986:	2353      	movs	r3, #83	; 0x53
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	4313      	orrs	r3, r2
 800098c:	2254      	movs	r2, #84	; 0x54
 800098e:	431a      	orrs	r2, r3
 8000990:	2300      	movs	r3, #0
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <main+0x2c8>)
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff fd7a 	bl	8000490 <DLTuc_LogOutVarArgs>
	  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f000 fb6a 	bl	8001078 <HAL_Delay>
	  DEBUGL(DL_INFO, "Orange is sweet fruit");
 80009a4:	2331      	movs	r3, #49	; 0x31
 80009a6:	061a      	lsls	r2, r3, #24
 80009a8:	2332      	movs	r3, #50	; 0x32
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2333      	movs	r3, #51	; 0x33
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	4313      	orrs	r3, r2
 80009b4:	2234      	movs	r2, #52	; 0x34
 80009b6:	ea43 0102 	orr.w	r1, r3, r2
 80009ba:	2354      	movs	r3, #84	; 0x54
 80009bc:	061a      	lsls	r2, r3, #24
 80009be:	2345      	movs	r3, #69	; 0x45
 80009c0:	041b      	lsls	r3, r3, #16
 80009c2:	431a      	orrs	r2, r3
 80009c4:	2353      	movs	r3, #83	; 0x53
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	4313      	orrs	r3, r2
 80009ca:	2254      	movs	r2, #84	; 0x54
 80009cc:	431a      	orrs	r2, r3
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <main+0x2cc>)
 80009d0:	2004      	movs	r0, #4
 80009d2:	f7ff fd5d 	bl	8000490 <DLTuc_LogOutVarArgs>
	  HAL_Delay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f000 fb4d 	bl	8001078 <HAL_Delay>
	  DEBUGL(DL_INFO, "Hello DLT Again %d Arg1 %d Arg2 :%d" , 2565, 56,23);
 80009de:	e76a      	b.n	80008b6 <main+0x16e>
 80009e0:	08000721 	.word	0x08000721
 80009e4:	200010f0 	.word	0x200010f0
 80009e8:	080042bc 	.word	0x080042bc
 80009ec:	080042d8 	.word	0x080042d8
 80009f0:	080042f4 	.word	0x080042f4
 80009f4:	0800430c 	.word	0x0800430c
 80009f8:	08004328 	.word	0x08004328
 80009fc:	08004344 	.word	0x08004344
 8000a00:	08004394 	.word	0x08004394
 8000a04:	08004400 	.word	0x08004400
 8000a08:	08004368 	.word	0x08004368
 8000a0c:	080043a8 	.word	0x080043a8
 8000a10:	080043c0 	.word	0x080043c0
 8000a14:	080043d8 	.word	0x080043d8

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	; 0x40
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	2228      	movs	r2, #40	; 0x28
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 ffba 	bl	80039a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a42:	2310      	movs	r3, #16
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a4e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f891 	bl	8001b80 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a64:	f000 f819 	bl	8000a9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fafe 	bl	8002084 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a8e:	f000 f804 	bl	8000a9a <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3740      	adds	r7, #64	; 0x40
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9e:	b672      	cpsid	i
}
 8000aa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <HAL_MspInit+0x5c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_MspInit+0x5c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x5c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x5c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_MspInit+0x60>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_MspInit+0x60>)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010000 	.word	0x40010000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 fa77 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f000 fff8 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 fff1 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <DMA1_Channel6_IRQHandler+0x10>)
 8000b7a:	f000 fd19 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200011c0 	.word	0x200011c0

08000b88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <DMA1_Channel7_IRQHandler+0x10>)
 8000b8e:	f000 fd0f 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000117c 	.word	0x2000117c

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f002 fa8f 	bl	80030c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20001138 	.word	0x20001138

08000bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bb8:	f000 ffca 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f002 feac 	bl	800394c <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20005000 	.word	0x20005000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	200010ec 	.word	0x200010ec
 8000c28:	20001218 	.word	0x20001218

08000c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <MX_TIM4_Init+0x100>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c70:	223f      	movs	r2, #63	; 0x3f
 8000c72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c8e:	4829      	ldr	r0, [pc, #164]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000c90:	f001 fb90 	bl	80023b4 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000c9a:	f7ff fefe 	bl	8000a9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000cac:	f001 fd8a 	bl	80027c4 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cb6:	f7ff fef0 	bl	8000a9a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000cbc:	f001 fbc9 	bl	8002452 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000cc6:	f7ff fee8 	bl	8000a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4816      	ldr	r0, [pc, #88]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000cda:	f002 f8db 	bl	8002e94 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ce4:	f7ff fed9 	bl	8000a9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce8:	2360      	movs	r3, #96	; 0x60
 8000cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000d00:	f001 fca2 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d0a:	f7ff fec6 	bl	8000a9a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2208      	movs	r2, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000d16:	f001 fc97 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d20:	f7ff febb 	bl	8000a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM4_Init+0xfc>)
 8000d26:	f000 f827 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3738      	adds	r7, #56	; 0x38
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200010f0 	.word	0x200010f0
 8000d38:	40000800 	.word	0x40000800

08000d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_Base_MspInit+0x34>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10b      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_TIM_Base_MspInit+0x38>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_TIM_Base_MspInit+0x38>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_TIM_Base_MspInit+0x38>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40000800 	.word	0x40000800
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_TIM_MspPostInit+0x5c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d118      	bne.n	8000dca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_TIM_MspPostInit+0x60>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_TIM_MspPostInit+0x60>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_TIM_MspPostInit+0x60>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000db0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000dc6:	f000 fd27 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40000800 	.word	0x40000800
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART2_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e18:	f002 f89a 	bl	8002f50 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f7ff fe3a 	bl	8000a9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20001138 	.word	0x20001138
 8000e30:	40004400 	.word	0x40004400

08000e34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <HAL_UART_MspInit+0x118>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d177      	bne.n	8000f44 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_UART_MspInit+0x11c>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <HAL_UART_MspInit+0x11c>)
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5e:	61d3      	str	r3, [r2, #28]
 8000e60:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_UART_MspInit+0x11c>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_UART_MspInit+0x11c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a37      	ldr	r2, [pc, #220]	; (8000f50 <HAL_UART_MspInit+0x11c>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_UART_MspInit+0x11c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e84:	230c      	movs	r3, #12
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	482f      	ldr	r0, [pc, #188]	; (8000f54 <HAL_UART_MspInit+0x120>)
 8000e98:	f000 fcbe 	bl	8001818 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <HAL_UART_MspInit+0x128>)
 8000ea0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ecc:	4822      	ldr	r0, [pc, #136]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ece:	f000 fa05 	bl	80012dc <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8000ed8:	f7ff fddf 	bl	8000a9a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0x124>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x130>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f18:	4811      	ldr	r0, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f1a:	f000 f9df 	bl	80012dc <HAL_DMA_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000f24:	f7ff fdb9 	bl	8000a9a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_UART_MspInit+0x12c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2026      	movs	r0, #38	; 0x26
 8000f3a:	f000 f998 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f3e:	2026      	movs	r0, #38	; 0x26
 8000f40:	f000 f9b1 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40004400 	.word	0x40004400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	2000117c 	.word	0x2000117c
 8000f5c:	40020080 	.word	0x40020080
 8000f60:	200011c0 	.word	0x200011c0
 8000f64:	4002006c 	.word	0x4002006c

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8e:	f7ff fe4d 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f002 fce1 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fbd7 	bl	8000748 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000fa4:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 8000fa8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000fac:	20001218 	.word	0x20001218

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f947 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fd68 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f95f 	bl	80012c2 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f927 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000010 	.word	0x20000010
 8001038:	20000018 	.word	0x20000018
 800103c:	20000014 	.word	0x20000014

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000018 	.word	0x20000018
 8001060:	20001204 	.word	0x20001204

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20001204 	.word	0x20001204

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000018 	.word	0x20000018

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <__NVIC_EnableIRQ+0x34>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff90 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff2d 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff42 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff35 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e043      	b.n	800137a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_DMA_Init+0xa8>)
 80012fa:	4413      	add	r3, r2
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <HAL_DMA_Init+0xac>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	009a      	lsls	r2, r3, #2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <HAL_DMA_Init+0xb0>)
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001326:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800132a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	bffdfff8 	.word	0xbffdfff8
 8001388:	cccccccd 	.word	0xcccccccd
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_DMA_Start_IT+0x20>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e04a      	b.n	8001446 <HAL_DMA_Start_IT+0xb6>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d13a      	bne.n	8001438 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2202      	movs	r2, #2
 80013c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f9e8 	bl	80017bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 020e 	orr.w	r2, r2, #14
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e00f      	b.n	8001426 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0204 	bic.w	r2, r2, #4
 8001414:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 020a 	orr.w	r2, r2, #10
 8001424:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e005      	b.n	8001444 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001440:	2302      	movs	r3, #2
 8001442:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001444:	7dfb      	ldrb	r3, [r7, #23]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001460:	2b02      	cmp	r3, #2
 8001462:	d008      	beq.n	8001476 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2204      	movs	r2, #4
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e020      	b.n	80014b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020e 	bic.w	r2, r2, #14
 8001484:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d005      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2204      	movs	r2, #4
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e051      	b.n	800158a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020e 	bic.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <HAL_DMA_Abort_IT+0xd0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d029      	beq.n	8001564 <HAL_DMA_Abort_IT+0xa0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_DMA_Abort_IT+0xd4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d022      	beq.n	8001560 <HAL_DMA_Abort_IT+0x9c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_DMA_Abort_IT+0xd8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d01a      	beq.n	800155a <HAL_DMA_Abort_IT+0x96>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_DMA_Abort_IT+0xdc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d012      	beq.n	8001554 <HAL_DMA_Abort_IT+0x90>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_DMA_Abort_IT+0xe0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00a      	beq.n	800154e <HAL_DMA_Abort_IT+0x8a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <HAL_DMA_Abort_IT+0xe4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d102      	bne.n	8001548 <HAL_DMA_Abort_IT+0x84>
 8001542:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001546:	e00e      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800154c:	e00b      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 800154e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001552:	e008      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	e005      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	e002      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001560:	2310      	movs	r3, #16
 8001562:	e000      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001564:	2301      	movs	r3, #1
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_DMA_Abort_IT+0xe8>)
 8001568:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
    } 
  }
  return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40020008 	.word	0x40020008
 8001598:	4002001c 	.word	0x4002001c
 800159c:	40020030 	.word	0x40020030
 80015a0:	40020044 	.word	0x40020044
 80015a4:	40020058 	.word	0x40020058
 80015a8:	4002006c 	.word	0x4002006c
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2204      	movs	r2, #4
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d04f      	beq.n	8001678 <HAL_DMA_IRQHandler+0xc8>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d04a      	beq.n	8001678 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0204 	bic.w	r2, r2, #4
 80015fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a66      	ldr	r2, [pc, #408]	; (80017a0 <HAL_DMA_IRQHandler+0x1f0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d029      	beq.n	800165e <HAL_DMA_IRQHandler+0xae>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <HAL_DMA_IRQHandler+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <HAL_DMA_IRQHandler+0xaa>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a63      	ldr	r2, [pc, #396]	; (80017a8 <HAL_DMA_IRQHandler+0x1f8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01a      	beq.n	8001654 <HAL_DMA_IRQHandler+0xa4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a62      	ldr	r2, [pc, #392]	; (80017ac <HAL_DMA_IRQHandler+0x1fc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d012      	beq.n	800164e <HAL_DMA_IRQHandler+0x9e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a60      	ldr	r2, [pc, #384]	; (80017b0 <HAL_DMA_IRQHandler+0x200>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x98>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a5f      	ldr	r2, [pc, #380]	; (80017b4 <HAL_DMA_IRQHandler+0x204>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d102      	bne.n	8001642 <HAL_DMA_IRQHandler+0x92>
 800163c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001640:	e00e      	b.n	8001660 <HAL_DMA_IRQHandler+0xb0>
 8001642:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001646:	e00b      	b.n	8001660 <HAL_DMA_IRQHandler+0xb0>
 8001648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800164c:	e008      	b.n	8001660 <HAL_DMA_IRQHandler+0xb0>
 800164e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001652:	e005      	b.n	8001660 <HAL_DMA_IRQHandler+0xb0>
 8001654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001658:	e002      	b.n	8001660 <HAL_DMA_IRQHandler+0xb0>
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	e000      	b.n	8001660 <HAL_DMA_IRQHandler+0xb0>
 800165e:	2304      	movs	r3, #4
 8001660:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <HAL_DMA_IRQHandler+0x208>)
 8001662:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8094 	beq.w	8001796 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001676:	e08e      	b.n	8001796 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2202      	movs	r2, #2
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d056      	beq.n	8001736 <HAL_DMA_IRQHandler+0x186>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d051      	beq.n	8001736 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10b      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 020a 	bic.w	r2, r2, #10
 80016ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a38      	ldr	r2, [pc, #224]	; (80017a0 <HAL_DMA_IRQHandler+0x1f0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d029      	beq.n	8001716 <HAL_DMA_IRQHandler+0x166>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <HAL_DMA_IRQHandler+0x1f4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_IRQHandler+0x162>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a35      	ldr	r2, [pc, #212]	; (80017a8 <HAL_DMA_IRQHandler+0x1f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01a      	beq.n	800170c <HAL_DMA_IRQHandler+0x15c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a34      	ldr	r2, [pc, #208]	; (80017ac <HAL_DMA_IRQHandler+0x1fc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d012      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_DMA_IRQHandler+0x200>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00a      	beq.n	8001700 <HAL_DMA_IRQHandler+0x150>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_DMA_IRQHandler+0x204>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d102      	bne.n	80016fa <HAL_DMA_IRQHandler+0x14a>
 80016f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016f8:	e00e      	b.n	8001718 <HAL_DMA_IRQHandler+0x168>
 80016fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fe:	e00b      	b.n	8001718 <HAL_DMA_IRQHandler+0x168>
 8001700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001704:	e008      	b.n	8001718 <HAL_DMA_IRQHandler+0x168>
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	e005      	b.n	8001718 <HAL_DMA_IRQHandler+0x168>
 800170c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001710:	e002      	b.n	8001718 <HAL_DMA_IRQHandler+0x168>
 8001712:	2320      	movs	r3, #32
 8001714:	e000      	b.n	8001718 <HAL_DMA_IRQHandler+0x168>
 8001716:	2302      	movs	r3, #2
 8001718:	4a27      	ldr	r2, [pc, #156]	; (80017b8 <HAL_DMA_IRQHandler+0x208>)
 800171a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d034      	beq.n	8001796 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001734:	e02f      	b.n	8001796 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2208      	movs	r2, #8
 800173c:	409a      	lsls	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d028      	beq.n	8001798 <HAL_DMA_IRQHandler+0x1e8>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d023      	beq.n	8001798 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 020e 	bic.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    }
  }
  return;
 8001796:	bf00      	nop
 8001798:	bf00      	nop
}
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020008 	.word	0x40020008
 80017a4:	4002001c 	.word	0x4002001c
 80017a8:	40020030 	.word	0x40020030
 80017ac:	40020044 	.word	0x40020044
 80017b0:	40020058 	.word	0x40020058
 80017b4:	4002006c 	.word	0x4002006c
 80017b8:	40020000 	.word	0x40020000

080017bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d108      	bne.n	80017fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017fa:	e007      	b.n	800180c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
	...

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b08b      	sub	sp, #44	; 0x2c
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e169      	b.n	8001b00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800182c:	2201      	movs	r2, #1
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	429a      	cmp	r2, r3
 8001846:	f040 8158 	bne.w	8001afa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a9a      	ldr	r2, [pc, #616]	; (8001ab8 <HAL_GPIO_Init+0x2a0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d05e      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001854:	4a98      	ldr	r2, [pc, #608]	; (8001ab8 <HAL_GPIO_Init+0x2a0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d875      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 800185a:	4a98      	ldr	r2, [pc, #608]	; (8001abc <HAL_GPIO_Init+0x2a4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d058      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001860:	4a96      	ldr	r2, [pc, #600]	; (8001abc <HAL_GPIO_Init+0x2a4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d86f      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 8001866:	4a96      	ldr	r2, [pc, #600]	; (8001ac0 <HAL_GPIO_Init+0x2a8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d052      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 800186c:	4a94      	ldr	r2, [pc, #592]	; (8001ac0 <HAL_GPIO_Init+0x2a8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d869      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 8001872:	4a94      	ldr	r2, [pc, #592]	; (8001ac4 <HAL_GPIO_Init+0x2ac>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d04c      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001878:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <HAL_GPIO_Init+0x2ac>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d863      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 800187e:	4a92      	ldr	r2, [pc, #584]	; (8001ac8 <HAL_GPIO_Init+0x2b0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d046      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001884:	4a90      	ldr	r2, [pc, #576]	; (8001ac8 <HAL_GPIO_Init+0x2b0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d85d      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 800188a:	2b12      	cmp	r3, #18
 800188c:	d82a      	bhi.n	80018e4 <HAL_GPIO_Init+0xcc>
 800188e:	2b12      	cmp	r3, #18
 8001890:	d859      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 8001892:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HAL_GPIO_Init+0x80>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	08001913 	.word	0x08001913
 800189c:	080018ed 	.word	0x080018ed
 80018a0:	080018ff 	.word	0x080018ff
 80018a4:	08001941 	.word	0x08001941
 80018a8:	08001947 	.word	0x08001947
 80018ac:	08001947 	.word	0x08001947
 80018b0:	08001947 	.word	0x08001947
 80018b4:	08001947 	.word	0x08001947
 80018b8:	08001947 	.word	0x08001947
 80018bc:	08001947 	.word	0x08001947
 80018c0:	08001947 	.word	0x08001947
 80018c4:	08001947 	.word	0x08001947
 80018c8:	08001947 	.word	0x08001947
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001947 	.word	0x08001947
 80018d4:	08001947 	.word	0x08001947
 80018d8:	08001947 	.word	0x08001947
 80018dc:	080018f5 	.word	0x080018f5
 80018e0:	08001909 	.word	0x08001909
 80018e4:	4a79      	ldr	r2, [pc, #484]	; (8001acc <HAL_GPIO_Init+0x2b4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ea:	e02c      	b.n	8001946 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e029      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	3304      	adds	r3, #4
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e024      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	3308      	adds	r3, #8
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e01f      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	330c      	adds	r3, #12
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e01a      	b.n	8001948 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800191a:	2304      	movs	r3, #4
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e013      	b.n	8001948 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	611a      	str	r2, [r3, #16]
          break;
 8001932:	e009      	b.n	8001948 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001934:	2308      	movs	r3, #8
 8001936:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	615a      	str	r2, [r3, #20]
          break;
 800193e:	e003      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x130>
          break;
 8001946:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d801      	bhi.n	8001952 <HAL_GPIO_Init+0x13a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_Init+0x13e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d802      	bhi.n	8001964 <HAL_GPIO_Init+0x14c>
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x152>
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	3b08      	subs	r3, #8
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	210f      	movs	r1, #15
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	6a39      	ldr	r1, [r7, #32]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80b1 	beq.w	8001afa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x2b8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_GPIO_Init+0x2b8>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_GPIO_Init+0x2b8>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b0:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a40      	ldr	r2, [pc, #256]	; (8001ad8 <HAL_GPIO_Init+0x2c0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_GPIO_Init+0x1ec>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3f      	ldr	r2, [pc, #252]	; (8001adc <HAL_GPIO_Init+0x2c4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1e8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3e      	ldr	r2, [pc, #248]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1e4>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3d      	ldr	r2, [pc, #244]	; (8001ae4 <HAL_GPIO_Init+0x2cc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1e0>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e006      	b.n	8001a06 <HAL_GPIO_Init+0x1ee>
 80019f8:	2304      	movs	r3, #4
 80019fa:	e004      	b.n	8001a06 <HAL_GPIO_Init+0x1ee>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e002      	b.n	8001a06 <HAL_GPIO_Init+0x1ee>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_GPIO_Init+0x1ee>
 8001a04:	2300      	movs	r3, #0
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a16:	492f      	ldr	r1, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	492c      	ldr	r1, [pc, #176]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4928      	ldr	r1, [pc, #160]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4922      	ldr	r1, [pc, #136]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	491e      	ldr	r1, [pc, #120]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4918      	ldr	r1, [pc, #96]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4914      	ldr	r1, [pc, #80]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d021      	beq.n	8001aec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
 8001ab4:	e021      	b.n	8001afa <HAL_GPIO_Init+0x2e2>
 8001ab6:	bf00      	nop
 8001ab8:	10320000 	.word	0x10320000
 8001abc:	10310000 	.word	0x10310000
 8001ac0:	10220000 	.word	0x10220000
 8001ac4:	10210000 	.word	0x10210000
 8001ac8:	10120000 	.word	0x10120000
 8001acc:	10110000 	.word	0x10110000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	40010c00 	.word	0x40010c00
 8001ae0:	40011000 	.word	0x40011000
 8001ae4:	40011400 	.word	0x40011400
 8001ae8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_GPIO_Init+0x304>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4909      	ldr	r1, [pc, #36]	; (8001b1c <HAL_GPIO_Init+0x304>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3301      	adds	r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f47f ae8e 	bne.w	800182c <HAL_GPIO_Init+0x14>
  }
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	372c      	adds	r7, #44	; 0x2c
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b3c:	e003      	b.n	8001b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fda0 	bl	80006b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e272      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8087 	beq.w	8001cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d00c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bac:	4b8f      	ldr	r3, [pc, #572]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d112      	bne.n	8001bde <HAL_RCC_OscConfig+0x5e>
 8001bb8:	4b8c      	ldr	r3, [pc, #560]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b89      	ldr	r3, [pc, #548]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06c      	beq.n	8001cac <HAL_RCC_OscConfig+0x12c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d168      	bne.n	8001cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e24c      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x76>
 8001be8:	4b80      	ldr	r3, [pc, #512]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a7f      	ldr	r2, [pc, #508]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e02e      	b.n	8001c54 <HAL_RCC_OscConfig+0xd4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x98>
 8001bfe:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7a      	ldr	r2, [pc, #488]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b78      	ldr	r3, [pc, #480]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a77      	ldr	r2, [pc, #476]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01d      	b.n	8001c54 <HAL_RCC_OscConfig+0xd4>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0xbc>
 8001c22:	4b72      	ldr	r3, [pc, #456]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a71      	ldr	r2, [pc, #452]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	4b6b      	ldr	r3, [pc, #428]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a67      	ldr	r2, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fa02 	bl	8001064 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f9fe 	bl	8001064 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e200      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe4>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff f9ee 	bl	8001064 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f9ea 	bl	8001064 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1ec      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x10c>
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d063      	beq.n	8001d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cba:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d11c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x18c>
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d116      	bne.n	8001d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x176>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e1c0      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4939      	ldr	r1, [pc, #228]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	e03a      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f9a3 	bl	8001064 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff f99f 	bl	8001064 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e1a1      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4927      	ldr	r1, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f982 	bl	8001064 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d64:	f7ff f97e 	bl	8001064 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e180      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d03a      	beq.n	8001e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d019      	beq.n	8001dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f962 	bl	8001064 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff f95e 	bl	8001064 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e160      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_OscConfig+0x26c>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 fad8 	bl	8002378 <RCC_Delay>
 8001dc8:	e01c      	b.n	8001e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff f948 	bl	8001064 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd6:	e00f      	b.n	8001df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff f944 	bl	8001064 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d908      	bls.n	8001df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e146      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	42420000 	.word	0x42420000
 8001df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e9      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a6 	beq.w	8001f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10d      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a87      	ldr	r2, [pc, #540]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d118      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7e      	ldr	r2, [pc, #504]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7ff f905 	bl	8001064 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7ff f901 	bl	8001064 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	; 0x64
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e103      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	4b75      	ldr	r3, [pc, #468]	; (8002048 <HAL_RCC_OscConfig+0x4c8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x312>
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e02d      	b.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x334>
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a69      	ldr	r2, [pc, #420]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a66      	ldr	r2, [pc, #408]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	e01c      	b.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x356>
 8001ebc:	4b61      	ldr	r3, [pc, #388]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a60      	ldr	r2, [pc, #384]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a5d      	ldr	r2, [pc, #372]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0x36e>
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f8b5 	bl	8001064 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff f8b1 	bl	8001064 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0b1      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCC_OscConfig+0x37e>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff f89f 	bl	8001064 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff f89b 	bl	8001064 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e09b      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d061      	beq.n	8002038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d146      	bne.n	800200a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff f86f 	bl	8001064 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f86b 	bl	8001064 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e06d      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4921      	ldr	r1, [pc, #132]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a19      	ldr	r1, [r3, #32]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	491b      	ldr	r1, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff f83f 	bl	8001064 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7ff f83b 	bl	8001064 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e03d      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x46a>
 8002008:	e035      	b.n	8002076 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_OscConfig+0x4cc>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff f828 	bl	8001064 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f824 	bl	8001064 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e026      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x498>
 8002036:	e01e      	b.n	8002076 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e019      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x500>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	429a      	cmp	r2, r3
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0d0      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4965      	ldr	r1, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a58      	ldr	r2, [pc, #352]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d040      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e073      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06b      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4936      	ldr	r1, [pc, #216]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe ff76 	bl	8001064 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe ff72 	bl	8001064 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e053      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d210      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1cc>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1d0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fed4 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000
 8002248:	40021000 	.word	0x40021000
 800224c:	08004408 	.word	0x08004408
 8002250:	20000010 	.word	0x20000010
 8002254:	20000014 	.word	0x20000014

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b490      	push	{r4, r7}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCC_GetSysClockFreq+0xac>)
 8002260:	1d3c      	adds	r4, r7, #4
 8002262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002268:	f240 2301 	movw	r3, #513	; 0x201
 800226c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d002      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x40>
 8002292:	2b08      	cmp	r3, #8
 8002294:	d003      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x46>
 8002296:	e02b      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_RCC_GetSysClockFreq+0xb4>)
 800229a:	623b      	str	r3, [r7, #32]
      break;
 800229c:	e02b      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3328      	adds	r3, #40	; 0x28
 80022a8:	443b      	add	r3, r7
 80022aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0c5b      	lsrs	r3, r3, #17
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	3328      	adds	r3, #40	; 0x28
 80022c6:	443b      	add	r3, r7
 80022c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d2:	fb03 f202 	mul.w	r2, r3, r2
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	e004      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	623b      	str	r3, [r7, #32]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022f2:	623b      	str	r3, [r7, #32]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc90      	pop	{r4, r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	080043f0 	.word	0x080043f0
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	003d0900 	.word	0x003d0900

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <HAL_RCC_GetHCLKFreq+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000010 	.word	0x20000010

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff2 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08004418 	.word	0x08004418

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffde 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	08004418 	.word	0x08004418

08002378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <RCC_Delay+0x34>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <RCC_Delay+0x38>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a5b      	lsrs	r3, r3, #9
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002394:	bf00      	nop
  }
  while (Delay --);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	60fa      	str	r2, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <RCC_Delay+0x1c>
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000010 	.word	0x20000010
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e041      	b.n	800244a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fcae 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f000 faaa 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e041      	b.n	80024e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f839 	bl	80024f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f000 fa5b 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_TIM_PWM_Start+0x24>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e022      	b.n	800256e <HAL_TIM_PWM_Start+0x6a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d109      	bne.n	8002542 <HAL_TIM_PWM_Start+0x3e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e015      	b.n	800256e <HAL_TIM_PWM_Start+0x6a>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d109      	bne.n	800255c <HAL_TIM_PWM_Start+0x58>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e008      	b.n	800256e <HAL_TIM_PWM_Start+0x6a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e05e      	b.n	8002634 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start+0x82>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002584:	e013      	b.n	80025ae <HAL_TIM_PWM_Start+0xaa>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Start+0x92>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	e00b      	b.n	80025ae <HAL_TIM_PWM_Start+0xaa>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Start+0xa2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a4:	e003      	b.n	80025ae <HAL_TIM_PWM_Start+0xaa>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fc48 	bl	8002e4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_TIM_PWM_Start+0x138>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d107      	bne.n	80025d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_PWM_Start+0x138>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00e      	beq.n	80025fe <HAL_TIM_PWM_Start+0xfa>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d009      	beq.n	80025fe <HAL_TIM_PWM_Start+0xfa>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_TIM_PWM_Start+0x13c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_TIM_PWM_Start+0xfa>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_TIM_PWM_Start+0x140>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d111      	bne.n	8002622 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b06      	cmp	r3, #6
 800260e:	d010      	beq.n	8002632 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002620:	e007      	b.n	8002632 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800265e:	2302      	movs	r3, #2
 8002660:	e0ac      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	f200 809f 	bhi.w	80027b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026ad 	.word	0x080026ad
 800267c:	080027b1 	.word	0x080027b1
 8002680:	080027b1 	.word	0x080027b1
 8002684:	080027b1 	.word	0x080027b1
 8002688:	080026ed 	.word	0x080026ed
 800268c:	080027b1 	.word	0x080027b1
 8002690:	080027b1 	.word	0x080027b1
 8002694:	080027b1 	.word	0x080027b1
 8002698:	0800272f 	.word	0x0800272f
 800269c:	080027b1 	.word	0x080027b1
 80026a0:	080027b1 	.word	0x080027b1
 80026a4:	080027b1 	.word	0x080027b1
 80026a8:	0800276f 	.word	0x0800276f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f9ac 	bl	8002a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0208 	orr.w	r2, r2, #8
 80026c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0204 	bic.w	r2, r2, #4
 80026d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	619a      	str	r2, [r3, #24]
      break;
 80026ea:	e062      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f9f2 	bl	8002adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6999      	ldr	r1, [r3, #24]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	021a      	lsls	r2, r3, #8
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]
      break;
 800272c:	e041      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa3b 	bl	8002bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0208 	orr.w	r2, r2, #8
 8002748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0204 	bic.w	r2, r2, #4
 8002758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69d9      	ldr	r1, [r3, #28]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	61da      	str	r2, [r3, #28]
      break;
 800276c:	e021      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fa85 	bl	8002c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69d9      	ldr	r1, [r3, #28]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	021a      	lsls	r2, r3, #8
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	61da      	str	r2, [r3, #28]
      break;
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80027b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_ConfigClockSource+0x18>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0b3      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x180>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002802:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002814:	d03e      	beq.n	8002894 <HAL_TIM_ConfigClockSource+0xd0>
 8002816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281a:	f200 8087 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x168>
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	f000 8085 	beq.w	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	d87f      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d01a      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xa2>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d87b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d050      	beq.n	80028da <HAL_TIM_ConfigClockSource+0x116>
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d877      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 800283c:	2b50      	cmp	r3, #80	; 0x50
 800283e:	d03c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0xf6>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d873      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d058      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x136>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d86f      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 800284c:	2b30      	cmp	r3, #48	; 0x30
 800284e:	d064      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x156>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d86b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d060      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x156>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d867      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x168>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d05c      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x156>
 8002860:	2b10      	cmp	r3, #16
 8002862:	d05a      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002864:	e062      	b.n	800292c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f000 faca 	bl	8002e0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002888:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	609a      	str	r2, [r3, #8]
      break;
 8002892:	e04e      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f000 fab3 	bl	8002e0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b6:	609a      	str	r2, [r3, #8]
      break;
 80028b8:	e03b      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f000 fa2a 	bl	8002d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2150      	movs	r1, #80	; 0x50
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fa81 	bl	8002dda <TIM_ITRx_SetConfig>
      break;
 80028d8:	e02b      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 fa48 	bl	8002d7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2160      	movs	r1, #96	; 0x60
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fa71 	bl	8002dda <TIM_ITRx_SetConfig>
      break;
 80028f8:	e01b      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	461a      	mov	r2, r3
 8002908:	f000 fa0a 	bl	8002d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fa61 	bl	8002dda <TIM_ITRx_SetConfig>
      break;
 8002918:	e00b      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f000 fa58 	bl	8002dda <TIM_ITRx_SetConfig>
        break;
 800292a:	e002      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002930:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <TIM_Base_SetConfig+0xb8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00b      	beq.n	800297c <TIM_Base_SetConfig+0x30>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x30>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <TIM_Base_SetConfig+0xbc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x30>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <TIM_Base_SetConfig+0xc0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <TIM_Base_SetConfig+0xb8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <TIM_Base_SetConfig+0xbc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x62>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <TIM_Base_SetConfig+0xc0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d108      	bne.n	80029c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <TIM_Base_SetConfig+0xb8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d103      	bne.n	80029f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	615a      	str	r2, [r3, #20]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800

08002a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0201 	bic.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 0302 	bic.w	r3, r3, #2
 8002a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <TIM_OC1_SetConfig+0xc8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10c      	bne.n	8002a86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0308 	bic.w	r3, r3, #8
 8002a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <TIM_OC1_SetConfig+0xc8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d111      	bne.n	8002ab2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00

08002adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0210 	bic.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f023 0320 	bic.w	r3, r3, #32
 8002b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <TIM_OC2_SetConfig+0xd0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10d      	bne.n	8002b58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <TIM_OC2_SetConfig+0xd0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d113      	bne.n	8002b88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40012c00 	.word	0x40012c00

08002bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <TIM_OC3_SetConfig+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10d      	bne.n	8002c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <TIM_OC3_SetConfig+0xd0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d113      	bne.n	8002c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	621a      	str	r2, [r3, #32]
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00

08002c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <TIM_OC4_SetConfig+0x98>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d109      	bne.n	8002cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0201 	bic.w	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 030a 	bic.w	r3, r3, #10
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 0210 	bic.w	r2, r3, #16
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	031b      	lsls	r3, r3, #12
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	621a      	str	r2, [r3, #32]
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f043 0307 	orr.w	r3, r3, #7
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b087      	sub	sp, #28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	609a      	str	r2, [r3, #8]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2201      	movs	r2, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e046      	b.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d009      	beq.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10c      	bne.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800

08002f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e03f      	b.n	8002fe2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd ff5c 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fc4b 	bl	8003830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b20      	cmp	r3, #32
 8003004:	d153      	bne.n	80030ae <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_UART_Transmit_DMA+0x26>
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e04c      	b.n	80030b0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_UART_Transmit_DMA+0x38>
 8003020:	2302      	movs	r3, #2
 8003022:	e045      	b.n	80030b0 <HAL_UART_Transmit_DMA+0xc4>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2221      	movs	r2, #33	; 0x21
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_UART_Transmit_DMA+0xcc>)
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_UART_Transmit_DMA+0xd0>)
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_UART_Transmit_DMA+0xd4>)
 8003062:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	2200      	movs	r2, #0
 800306a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3304      	adds	r3, #4
 8003080:	461a      	mov	r2, r3
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f7fe f984 	bl	8001390 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003090:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	08003465 	.word	0x08003465
 80030bc:	080034b7 	.word	0x080034b7
 80030c0:	080034d3 	.word	0x080034d3

080030c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_UART_IRQHandler+0x52>
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fae5 	bl	80036de <UART_Receive_IT>
      return;
 8003114:	e17b      	b.n	800340e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80b1 	beq.w	8003280 <HAL_UART_IRQHandler+0x1bc>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_UART_IRQHandler+0x70>
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80a6 	beq.w	8003280 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_UART_IRQHandler+0x90>
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_UART_IRQHandler+0xb0>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0202 	orr.w	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_UART_IRQHandler+0xd0>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00f      	beq.n	80031be <HAL_UART_IRQHandler+0xfa>
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <HAL_UART_IRQHandler+0xee>
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0208 	orr.w	r2, r3, #8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 811e 	beq.w	8003404 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_UART_IRQHandler+0x11e>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa7e 	bl	80036de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_UART_IRQHandler+0x146>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d031      	beq.n	800326e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f9c0 	bl	8003590 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d023      	beq.n	8003266 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d013      	beq.n	800325e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	4a76      	ldr	r2, [pc, #472]	; (8003414 <HAL_UART_IRQHandler+0x350>)
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f93e 	bl	80014c4 <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003258:	4610      	mov	r0, r2
 800325a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00e      	b.n	800327c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8ec 	bl	800343c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e00a      	b.n	800327c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8e8 	bl	800343c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	e006      	b.n	800327c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8e4 	bl	800343c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800327a:	e0c3      	b.n	8003404 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	bf00      	nop
    return;
 800327e:	e0c1      	b.n	8003404 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 80a1 	bne.w	80033cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 809b 	beq.w	80033cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8095 	beq.w	80033cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d04e      	beq.n	8003364 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032d0:	8a3b      	ldrh	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8098 	beq.w	8003408 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032dc:	8a3a      	ldrh	r2, [r7, #16]
 80032de:	429a      	cmp	r2, r3
 80032e0:	f080 8092 	bcs.w	8003408 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8a3a      	ldrh	r2, [r7, #16]
 80032e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d02b      	beq.n	800334c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003302:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003322:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0210 	bic.w	r2, r2, #16
 8003340:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe f881 	bl	800144e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003354:	b29b      	uxth	r3, r3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	b29b      	uxth	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f876 	bl	800344e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003362:	e051      	b.n	8003408 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d047      	beq.n	800340c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800337c:	8a7b      	ldrh	r3, [r7, #18]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d044      	beq.n	800340c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003390:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0210 	bic.w	r2, r2, #16
 80033be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c0:	8a7b      	ldrh	r3, [r7, #18]
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f842 	bl	800344e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033ca:	e01f      	b.n	800340c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_UART_IRQHandler+0x324>
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f915 	bl	8003610 <UART_Transmit_IT>
    return;
 80033e6:	e012      	b.n	800340e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_UART_IRQHandler+0x34a>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f956 	bl	80036ae <UART_EndTransmit_IT>
    return;
 8003402:	e004      	b.n	800340e <HAL_UART_IRQHandler+0x34a>
    return;
 8003404:	bf00      	nop
 8003406:	e002      	b.n	800340e <HAL_UART_IRQHandler+0x34a>
      return;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_UART_IRQHandler+0x34a>
      return;
 800340c:	bf00      	nop
  }
}
 800340e:	3728      	adds	r7, #40	; 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	080035e9 	.word	0x080035e9

08003418 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034a6:	e002      	b.n	80034ae <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fd f92f 	bl	800070c <HAL_UART_TxCpltCallback>
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff ffa7 	bl	8003418 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b21      	cmp	r3, #33	; 0x21
 8003504:	d108      	bne.n	8003518 <UART_DMAError+0x46>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2200      	movs	r2, #0
 8003510:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003512:	68b8      	ldr	r0, [r7, #8]
 8003514:	f000 f827 	bl	8003566 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b22      	cmp	r3, #34	; 0x22
 8003538:	d108      	bne.n	800354c <UART_DMAError+0x7a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003546:	68b8      	ldr	r0, [r7, #8]
 8003548:	f000 f822 	bl	8003590 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003558:	68b8      	ldr	r0, [r7, #8]
 800355a:	f7ff ff6f 	bl	800343c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800357c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0210 	bic.w	r2, r2, #16
 80035ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff1a 	bl	800343c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b21      	cmp	r3, #33	; 0x21
 8003622:	d13e      	bne.n	80036a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d114      	bne.n	8003658 <UART_Transmit_IT+0x48>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d110      	bne.n	8003658 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]
 8003656:	e008      	b.n	800366a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	1c59      	adds	r1, r3, #1
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6211      	str	r1, [r2, #32]
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4619      	mov	r1, r3
 8003678:	84d1      	strh	r1, [r2, #38]	; 0x26
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd f81c 	bl	800070c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b22      	cmp	r3, #34	; 0x22
 80036f0:	f040 8099 	bne.w	8003826 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d117      	bne.n	800372e <UART_Receive_IT+0x50>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d113      	bne.n	800372e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371c:	b29a      	uxth	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	1c9a      	adds	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28
 800372c:	e026      	b.n	800377c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d007      	beq.n	8003752 <UART_Receive_IT+0x74>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <UART_Receive_IT+0x82>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e008      	b.n	8003772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376c:	b2da      	uxtb	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4619      	mov	r1, r3
 800378a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800378c:	2b00      	cmp	r3, #0
 800378e:	d148      	bne.n	8003822 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0220 	bic.w	r2, r2, #32
 800379e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d123      	bne.n	8003818 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0210 	bic.w	r2, r2, #16
 80037e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d10a      	bne.n	800380a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fe1c 	bl	800344e <HAL_UARTEx_RxEventCallback>
 8003816:	e002      	b.n	800381e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fe06 	bl	800342a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e002      	b.n	8003828 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800386a:	f023 030c 	bic.w	r3, r3, #12
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	430b      	orrs	r3, r1
 8003876:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <UART_SetConfig+0x114>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d103      	bne.n	80038a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7fe fd5a 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	e002      	b.n	80038a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038a0:	f7fe fd42 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80038a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009a      	lsls	r2, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <UART_SetConfig+0x118>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	0119      	lsls	r1, r3, #4
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009a      	lsls	r2, r3, #2
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <UART_SetConfig+0x118>)
 80038de:	fba3 0302 	umull	r0, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2064      	movs	r0, #100	; 0x64
 80038e6:	fb00 f303 	mul.w	r3, r0, r3
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	3332      	adds	r3, #50	; 0x32
 80038f0:	4a15      	ldr	r2, [pc, #84]	; (8003948 <UART_SetConfig+0x118>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fc:	4419      	add	r1, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fbb2 f2f3 	udiv	r2, r2, r3
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <UART_SetConfig+0x118>)
 8003916:	fba3 0302 	umull	r0, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2064      	movs	r0, #100	; 0x64
 800391e:	fb00 f303 	mul.w	r3, r0, r3
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	3332      	adds	r3, #50	; 0x32
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <UART_SetConfig+0x118>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	440a      	add	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40013800 	.word	0x40013800
 8003948:	51eb851f 	.word	0x51eb851f

0800394c <__errno>:
 800394c:	4b01      	ldr	r3, [pc, #4]	; (8003954 <__errno+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	2000001c 	.word	0x2000001c

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	2600      	movs	r6, #0
 800395c:	4d0c      	ldr	r5, [pc, #48]	; (8003990 <__libc_init_array+0x38>)
 800395e:	4c0d      	ldr	r4, [pc, #52]	; (8003994 <__libc_init_array+0x3c>)
 8003960:	1b64      	subs	r4, r4, r5
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	f000 fc9c 	bl	80042a4 <_init>
 800396c:	2600      	movs	r6, #0
 800396e:	4d0a      	ldr	r5, [pc, #40]	; (8003998 <__libc_init_array+0x40>)
 8003970:	4c0a      	ldr	r4, [pc, #40]	; (800399c <__libc_init_array+0x44>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	08004454 	.word	0x08004454
 8003994:	08004454 	.word	0x08004454
 8003998:	08004454 	.word	0x08004454
 800399c:	08004458 	.word	0x08004458

080039a0 <memset>:
 80039a0:	4603      	mov	r3, r0
 80039a2:	4402      	add	r2, r0
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d100      	bne.n	80039aa <memset+0xa>
 80039a8:	4770      	bx	lr
 80039aa:	f803 1b01 	strb.w	r1, [r3], #1
 80039ae:	e7f9      	b.n	80039a4 <memset+0x4>

080039b0 <_vsiprintf_r>:
 80039b0:	b500      	push	{lr}
 80039b2:	b09b      	sub	sp, #108	; 0x6c
 80039b4:	9100      	str	r1, [sp, #0]
 80039b6:	9104      	str	r1, [sp, #16]
 80039b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039bc:	9105      	str	r1, [sp, #20]
 80039be:	9102      	str	r1, [sp, #8]
 80039c0:	4905      	ldr	r1, [pc, #20]	; (80039d8 <_vsiprintf_r+0x28>)
 80039c2:	9103      	str	r1, [sp, #12]
 80039c4:	4669      	mov	r1, sp
 80039c6:	f000 f86f 	bl	8003aa8 <_svfiprintf_r>
 80039ca:	2200      	movs	r2, #0
 80039cc:	9b00      	ldr	r3, [sp, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	b01b      	add	sp, #108	; 0x6c
 80039d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80039d6:	bf00      	nop
 80039d8:	ffff0208 	.word	0xffff0208

080039dc <vsiprintf>:
 80039dc:	4613      	mov	r3, r2
 80039de:	460a      	mov	r2, r1
 80039e0:	4601      	mov	r1, r0
 80039e2:	4802      	ldr	r0, [pc, #8]	; (80039ec <vsiprintf+0x10>)
 80039e4:	6800      	ldr	r0, [r0, #0]
 80039e6:	f7ff bfe3 	b.w	80039b0 <_vsiprintf_r>
 80039ea:	bf00      	nop
 80039ec:	2000001c 	.word	0x2000001c

080039f0 <__ssputs_r>:
 80039f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	688e      	ldr	r6, [r1, #8]
 80039f6:	4682      	mov	sl, r0
 80039f8:	429e      	cmp	r6, r3
 80039fa:	460c      	mov	r4, r1
 80039fc:	4690      	mov	r8, r2
 80039fe:	461f      	mov	r7, r3
 8003a00:	d838      	bhi.n	8003a74 <__ssputs_r+0x84>
 8003a02:	898a      	ldrh	r2, [r1, #12]
 8003a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a08:	d032      	beq.n	8003a70 <__ssputs_r+0x80>
 8003a0a:	6825      	ldr	r5, [r4, #0]
 8003a0c:	6909      	ldr	r1, [r1, #16]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	eba5 0901 	sub.w	r9, r5, r1
 8003a14:	6965      	ldr	r5, [r4, #20]
 8003a16:	444b      	add	r3, r9
 8003a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a20:	106d      	asrs	r5, r5, #1
 8003a22:	429d      	cmp	r5, r3
 8003a24:	bf38      	it	cc
 8003a26:	461d      	movcc	r5, r3
 8003a28:	0553      	lsls	r3, r2, #21
 8003a2a:	d531      	bpl.n	8003a90 <__ssputs_r+0xa0>
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f000 fb6f 	bl	8004110 <_malloc_r>
 8003a32:	4606      	mov	r6, r0
 8003a34:	b950      	cbnz	r0, 8003a4c <__ssputs_r+0x5c>
 8003a36:	230c      	movs	r3, #12
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	f8ca 3000 	str.w	r3, [sl]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4c:	464a      	mov	r2, r9
 8003a4e:	6921      	ldr	r1, [r4, #16]
 8003a50:	f000 face 	bl	8003ff0 <memcpy>
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	6126      	str	r6, [r4, #16]
 8003a62:	444e      	add	r6, r9
 8003a64:	6026      	str	r6, [r4, #0]
 8003a66:	463e      	mov	r6, r7
 8003a68:	6165      	str	r5, [r4, #20]
 8003a6a:	eba5 0509 	sub.w	r5, r5, r9
 8003a6e:	60a5      	str	r5, [r4, #8]
 8003a70:	42be      	cmp	r6, r7
 8003a72:	d900      	bls.n	8003a76 <__ssputs_r+0x86>
 8003a74:	463e      	mov	r6, r7
 8003a76:	4632      	mov	r2, r6
 8003a78:	4641      	mov	r1, r8
 8003a7a:	6820      	ldr	r0, [r4, #0]
 8003a7c:	f000 fac6 	bl	800400c <memmove>
 8003a80:	68a3      	ldr	r3, [r4, #8]
 8003a82:	2000      	movs	r0, #0
 8003a84:	1b9b      	subs	r3, r3, r6
 8003a86:	60a3      	str	r3, [r4, #8]
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	4433      	add	r3, r6
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	e7db      	b.n	8003a48 <__ssputs_r+0x58>
 8003a90:	462a      	mov	r2, r5
 8003a92:	f000 fbb1 	bl	80041f8 <_realloc_r>
 8003a96:	4606      	mov	r6, r0
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d1e1      	bne.n	8003a60 <__ssputs_r+0x70>
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	6921      	ldr	r1, [r4, #16]
 8003aa0:	f000 face 	bl	8004040 <_free_r>
 8003aa4:	e7c7      	b.n	8003a36 <__ssputs_r+0x46>
	...

08003aa8 <_svfiprintf_r>:
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	4698      	mov	r8, r3
 8003aae:	898b      	ldrh	r3, [r1, #12]
 8003ab0:	4607      	mov	r7, r0
 8003ab2:	061b      	lsls	r3, r3, #24
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	4614      	mov	r4, r2
 8003ab8:	b09d      	sub	sp, #116	; 0x74
 8003aba:	d50e      	bpl.n	8003ada <_svfiprintf_r+0x32>
 8003abc:	690b      	ldr	r3, [r1, #16]
 8003abe:	b963      	cbnz	r3, 8003ada <_svfiprintf_r+0x32>
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	f000 fb25 	bl	8004110 <_malloc_r>
 8003ac6:	6028      	str	r0, [r5, #0]
 8003ac8:	6128      	str	r0, [r5, #16]
 8003aca:	b920      	cbnz	r0, 8003ad6 <_svfiprintf_r+0x2e>
 8003acc:	230c      	movs	r3, #12
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e0d1      	b.n	8003c7a <_svfiprintf_r+0x1d2>
 8003ad6:	2340      	movs	r3, #64	; 0x40
 8003ad8:	616b      	str	r3, [r5, #20]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ade:	2320      	movs	r3, #32
 8003ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ae4:	2330      	movs	r3, #48	; 0x30
 8003ae6:	f04f 0901 	mov.w	r9, #1
 8003aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c94 <_svfiprintf_r+0x1ec>
 8003af2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af6:	4623      	mov	r3, r4
 8003af8:	469a      	mov	sl, r3
 8003afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afe:	b10a      	cbz	r2, 8003b04 <_svfiprintf_r+0x5c>
 8003b00:	2a25      	cmp	r2, #37	; 0x25
 8003b02:	d1f9      	bne.n	8003af8 <_svfiprintf_r+0x50>
 8003b04:	ebba 0b04 	subs.w	fp, sl, r4
 8003b08:	d00b      	beq.n	8003b22 <_svfiprintf_r+0x7a>
 8003b0a:	465b      	mov	r3, fp
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4638      	mov	r0, r7
 8003b12:	f7ff ff6d 	bl	80039f0 <__ssputs_r>
 8003b16:	3001      	adds	r0, #1
 8003b18:	f000 80aa 	beq.w	8003c70 <_svfiprintf_r+0x1c8>
 8003b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b1e:	445a      	add	r2, fp
 8003b20:	9209      	str	r2, [sp, #36]	; 0x24
 8003b22:	f89a 3000 	ldrb.w	r3, [sl]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a2 	beq.w	8003c70 <_svfiprintf_r+0x1c8>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b36:	f10a 0a01 	add.w	sl, sl, #1
 8003b3a:	9304      	str	r3, [sp, #16]
 8003b3c:	9307      	str	r3, [sp, #28]
 8003b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b42:	931a      	str	r3, [sp, #104]	; 0x68
 8003b44:	4654      	mov	r4, sl
 8003b46:	2205      	movs	r2, #5
 8003b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4c:	4851      	ldr	r0, [pc, #324]	; (8003c94 <_svfiprintf_r+0x1ec>)
 8003b4e:	f000 fa41 	bl	8003fd4 <memchr>
 8003b52:	9a04      	ldr	r2, [sp, #16]
 8003b54:	b9d8      	cbnz	r0, 8003b8e <_svfiprintf_r+0xe6>
 8003b56:	06d0      	lsls	r0, r2, #27
 8003b58:	bf44      	itt	mi
 8003b5a:	2320      	movmi	r3, #32
 8003b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b60:	0711      	lsls	r1, r2, #28
 8003b62:	bf44      	itt	mi
 8003b64:	232b      	movmi	r3, #43	; 0x2b
 8003b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b70:	d015      	beq.n	8003b9e <_svfiprintf_r+0xf6>
 8003b72:	4654      	mov	r4, sl
 8003b74:	2000      	movs	r0, #0
 8003b76:	f04f 0c0a 	mov.w	ip, #10
 8003b7a:	9a07      	ldr	r2, [sp, #28]
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b82:	3b30      	subs	r3, #48	; 0x30
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	d94e      	bls.n	8003c26 <_svfiprintf_r+0x17e>
 8003b88:	b1b0      	cbz	r0, 8003bb8 <_svfiprintf_r+0x110>
 8003b8a:	9207      	str	r2, [sp, #28]
 8003b8c:	e014      	b.n	8003bb8 <_svfiprintf_r+0x110>
 8003b8e:	eba0 0308 	sub.w	r3, r0, r8
 8003b92:	fa09 f303 	lsl.w	r3, r9, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	46a2      	mov	sl, r4
 8003b9a:	9304      	str	r3, [sp, #16]
 8003b9c:	e7d2      	b.n	8003b44 <_svfiprintf_r+0x9c>
 8003b9e:	9b03      	ldr	r3, [sp, #12]
 8003ba0:	1d19      	adds	r1, r3, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	9103      	str	r1, [sp, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfbb      	ittet	lt
 8003baa:	425b      	neglt	r3, r3
 8003bac:	f042 0202 	orrlt.w	r2, r2, #2
 8003bb0:	9307      	strge	r3, [sp, #28]
 8003bb2:	9307      	strlt	r3, [sp, #28]
 8003bb4:	bfb8      	it	lt
 8003bb6:	9204      	strlt	r2, [sp, #16]
 8003bb8:	7823      	ldrb	r3, [r4, #0]
 8003bba:	2b2e      	cmp	r3, #46	; 0x2e
 8003bbc:	d10c      	bne.n	8003bd8 <_svfiprintf_r+0x130>
 8003bbe:	7863      	ldrb	r3, [r4, #1]
 8003bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc2:	d135      	bne.n	8003c30 <_svfiprintf_r+0x188>
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	3402      	adds	r4, #2
 8003bc8:	1d1a      	adds	r2, r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	9203      	str	r2, [sp, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bfb8      	it	lt
 8003bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bd6:	9305      	str	r3, [sp, #20]
 8003bd8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c98 <_svfiprintf_r+0x1f0>
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4650      	mov	r0, sl
 8003be0:	7821      	ldrb	r1, [r4, #0]
 8003be2:	f000 f9f7 	bl	8003fd4 <memchr>
 8003be6:	b140      	cbz	r0, 8003bfa <_svfiprintf_r+0x152>
 8003be8:	2340      	movs	r3, #64	; 0x40
 8003bea:	eba0 000a 	sub.w	r0, r0, sl
 8003bee:	fa03 f000 	lsl.w	r0, r3, r0
 8003bf2:	9b04      	ldr	r3, [sp, #16]
 8003bf4:	3401      	adds	r4, #1
 8003bf6:	4303      	orrs	r3, r0
 8003bf8:	9304      	str	r3, [sp, #16]
 8003bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfe:	2206      	movs	r2, #6
 8003c00:	4826      	ldr	r0, [pc, #152]	; (8003c9c <_svfiprintf_r+0x1f4>)
 8003c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c06:	f000 f9e5 	bl	8003fd4 <memchr>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d038      	beq.n	8003c80 <_svfiprintf_r+0x1d8>
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <_svfiprintf_r+0x1f8>)
 8003c10:	bb1b      	cbnz	r3, 8003c5a <_svfiprintf_r+0x1b2>
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	3307      	adds	r3, #7
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	9303      	str	r3, [sp, #12]
 8003c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c20:	4433      	add	r3, r6
 8003c22:	9309      	str	r3, [sp, #36]	; 0x24
 8003c24:	e767      	b.n	8003af6 <_svfiprintf_r+0x4e>
 8003c26:	460c      	mov	r4, r1
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c2e:	e7a5      	b.n	8003b7c <_svfiprintf_r+0xd4>
 8003c30:	2300      	movs	r3, #0
 8003c32:	f04f 0c0a 	mov.w	ip, #10
 8003c36:	4619      	mov	r1, r3
 8003c38:	3401      	adds	r4, #1
 8003c3a:	9305      	str	r3, [sp, #20]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c42:	3a30      	subs	r2, #48	; 0x30
 8003c44:	2a09      	cmp	r2, #9
 8003c46:	d903      	bls.n	8003c50 <_svfiprintf_r+0x1a8>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0c5      	beq.n	8003bd8 <_svfiprintf_r+0x130>
 8003c4c:	9105      	str	r1, [sp, #20]
 8003c4e:	e7c3      	b.n	8003bd8 <_svfiprintf_r+0x130>
 8003c50:	4604      	mov	r4, r0
 8003c52:	2301      	movs	r3, #1
 8003c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c58:	e7f0      	b.n	8003c3c <_svfiprintf_r+0x194>
 8003c5a:	ab03      	add	r3, sp, #12
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	462a      	mov	r2, r5
 8003c60:	4638      	mov	r0, r7
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <_svfiprintf_r+0x1fc>)
 8003c64:	a904      	add	r1, sp, #16
 8003c66:	f3af 8000 	nop.w
 8003c6a:	1c42      	adds	r2, r0, #1
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	d1d6      	bne.n	8003c1e <_svfiprintf_r+0x176>
 8003c70:	89ab      	ldrh	r3, [r5, #12]
 8003c72:	065b      	lsls	r3, r3, #25
 8003c74:	f53f af2c 	bmi.w	8003ad0 <_svfiprintf_r+0x28>
 8003c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c7a:	b01d      	add	sp, #116	; 0x74
 8003c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c80:	ab03      	add	r3, sp, #12
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	462a      	mov	r2, r5
 8003c86:	4638      	mov	r0, r7
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <_svfiprintf_r+0x1fc>)
 8003c8a:	a904      	add	r1, sp, #16
 8003c8c:	f000 f87c 	bl	8003d88 <_printf_i>
 8003c90:	e7eb      	b.n	8003c6a <_svfiprintf_r+0x1c2>
 8003c92:	bf00      	nop
 8003c94:	08004420 	.word	0x08004420
 8003c98:	08004426 	.word	0x08004426
 8003c9c:	0800442a 	.word	0x0800442a
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	080039f1 	.word	0x080039f1

08003ca8 <_printf_common>:
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	4616      	mov	r6, r2
 8003cae:	4699      	mov	r9, r3
 8003cb0:	688a      	ldr	r2, [r1, #8]
 8003cb2:	690b      	ldr	r3, [r1, #16]
 8003cb4:	4607      	mov	r7, r0
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	bfb8      	it	lt
 8003cba:	4613      	movlt	r3, r2
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc8:	b10a      	cbz	r2, 8003cce <_printf_common+0x26>
 8003cca:	3301      	adds	r3, #1
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	0699      	lsls	r1, r3, #26
 8003cd2:	bf42      	ittt	mi
 8003cd4:	6833      	ldrmi	r3, [r6, #0]
 8003cd6:	3302      	addmi	r3, #2
 8003cd8:	6033      	strmi	r3, [r6, #0]
 8003cda:	6825      	ldr	r5, [r4, #0]
 8003cdc:	f015 0506 	ands.w	r5, r5, #6
 8003ce0:	d106      	bne.n	8003cf0 <_printf_common+0x48>
 8003ce2:	f104 0a19 	add.w	sl, r4, #25
 8003ce6:	68e3      	ldr	r3, [r4, #12]
 8003ce8:	6832      	ldr	r2, [r6, #0]
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	42ab      	cmp	r3, r5
 8003cee:	dc28      	bgt.n	8003d42 <_printf_common+0x9a>
 8003cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cf4:	1e13      	subs	r3, r2, #0
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	bf18      	it	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	0692      	lsls	r2, r2, #26
 8003cfe:	d42d      	bmi.n	8003d5c <_printf_common+0xb4>
 8003d00:	4649      	mov	r1, r9
 8003d02:	4638      	mov	r0, r7
 8003d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d08:	47c0      	blx	r8
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d020      	beq.n	8003d50 <_printf_common+0xa8>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	68e5      	ldr	r5, [r4, #12]
 8003d12:	f003 0306 	and.w	r3, r3, #6
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	bf18      	it	ne
 8003d1a:	2500      	movne	r5, #0
 8003d1c:	6832      	ldr	r2, [r6, #0]
 8003d1e:	f04f 0600 	mov.w	r6, #0
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	bf08      	it	eq
 8003d26:	1aad      	subeq	r5, r5, r2
 8003d28:	6922      	ldr	r2, [r4, #16]
 8003d2a:	bf08      	it	eq
 8003d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bfc4      	itt	gt
 8003d34:	1a9b      	subgt	r3, r3, r2
 8003d36:	18ed      	addgt	r5, r5, r3
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xcc>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xac>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4649      	mov	r1, r9
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xb0>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c4      	b.n	8003ce6 <_printf_common+0x3e>
 8003d5c:	2030      	movs	r0, #48	; 0x30
 8003d5e:	18e1      	adds	r1, r4, r3
 8003d60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6a:	4422      	add	r2, r4
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d72:	e7c5      	b.n	8003d00 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa8>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x92>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	4691      	mov	r9, r2
 8003d90:	2f78      	cmp	r7, #120	; 0x78
 8003d92:	4680      	mov	r8, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	469a      	mov	sl, r3
 8003d98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	; 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d9 	beq.w	8003f5c <_printf_i+0x1d4>
 8003daa:	2f58      	cmp	r7, #88	; 0x58
 8003dac:	f000 80a4 	beq.w	8003ef8 <_printf_i+0x170>
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	; (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f43 	.word	0x08003f43
 8003df8:	08003e65 	.word	0x08003e65
 8003dfc:	08003f25 	.word	0x08003f25
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f65 	.word	0x08003f65
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003f2d 	.word	0x08003f2d
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	602a      	str	r2, [r5, #0]
 8003e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0a4      	b.n	8003f7e <_printf_i+0x1f6>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	6829      	ldr	r1, [r5, #0]
 8003e38:	0606      	lsls	r6, r0, #24
 8003e3a:	f101 0304 	add.w	r3, r1, #4
 8003e3e:	d50a      	bpl.n	8003e56 <_printf_i+0xce>
 8003e40:	680e      	ldr	r6, [r1, #0]
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	da03      	bge.n	8003e50 <_printf_i+0xc8>
 8003e48:	232d      	movs	r3, #45	; 0x2d
 8003e4a:	4276      	negs	r6, r6
 8003e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e50:	230a      	movs	r3, #10
 8003e52:	485e      	ldr	r0, [pc, #376]	; (8003fcc <_printf_i+0x244>)
 8003e54:	e019      	b.n	8003e8a <_printf_i+0x102>
 8003e56:	680e      	ldr	r6, [r1, #0]
 8003e58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	bf18      	it	ne
 8003e60:	b236      	sxthne	r6, r6
 8003e62:	e7ef      	b.n	8003e44 <_printf_i+0xbc>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1d19      	adds	r1, r3, #4
 8003e6a:	6029      	str	r1, [r5, #0]
 8003e6c:	0601      	lsls	r1, r0, #24
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0xec>
 8003e70:	681e      	ldr	r6, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0xf2>
 8003e74:	0646      	lsls	r6, r0, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0xe8>
 8003e78:	881e      	ldrh	r6, [r3, #0]
 8003e7a:	2f6f      	cmp	r7, #111	; 0x6f
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2308      	moveq	r3, #8
 8003e80:	230a      	movne	r3, #10
 8003e82:	4852      	ldr	r0, [pc, #328]	; (8003fcc <_printf_i+0x244>)
 8003e84:	2100      	movs	r1, #0
 8003e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e8a:	6865      	ldr	r5, [r4, #4]
 8003e8c:	2d00      	cmp	r5, #0
 8003e8e:	bfa8      	it	ge
 8003e90:	6821      	ldrge	r1, [r4, #0]
 8003e92:	60a5      	str	r5, [r4, #8]
 8003e94:	bfa4      	itt	ge
 8003e96:	f021 0104 	bicge.w	r1, r1, #4
 8003e9a:	6021      	strge	r1, [r4, #0]
 8003e9c:	b90e      	cbnz	r6, 8003ea2 <_printf_i+0x11a>
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	d04d      	beq.n	8003f3e <_printf_i+0x1b6>
 8003ea2:	4615      	mov	r5, r2
 8003ea4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea8:	fb03 6711 	mls	r7, r3, r1, r6
 8003eac:	5dc7      	ldrb	r7, [r0, r7]
 8003eae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eb2:	4637      	mov	r7, r6
 8003eb4:	42bb      	cmp	r3, r7
 8003eb6:	460e      	mov	r6, r1
 8003eb8:	d9f4      	bls.n	8003ea4 <_printf_i+0x11c>
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d10b      	bne.n	8003ed6 <_printf_i+0x14e>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	07de      	lsls	r6, r3, #31
 8003ec2:	d508      	bpl.n	8003ed6 <_printf_i+0x14e>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	6861      	ldr	r1, [r4, #4]
 8003ec8:	4299      	cmp	r1, r3
 8003eca:	bfde      	ittt	le
 8003ecc:	2330      	movle	r3, #48	; 0x30
 8003ece:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ed6:	1b52      	subs	r2, r2, r5
 8003ed8:	6122      	str	r2, [r4, #16]
 8003eda:	464b      	mov	r3, r9
 8003edc:	4621      	mov	r1, r4
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f8cd a000 	str.w	sl, [sp]
 8003ee4:	aa03      	add	r2, sp, #12
 8003ee6:	f7ff fedf 	bl	8003ca8 <_printf_common>
 8003eea:	3001      	adds	r0, #1
 8003eec:	d14c      	bne.n	8003f88 <_printf_i+0x200>
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef2:	b004      	add	sp, #16
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	4834      	ldr	r0, [pc, #208]	; (8003fcc <_printf_i+0x244>)
 8003efa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003efe:	6829      	ldr	r1, [r5, #0]
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f06:	6029      	str	r1, [r5, #0]
 8003f08:	061d      	lsls	r5, r3, #24
 8003f0a:	d514      	bpl.n	8003f36 <_printf_i+0x1ae>
 8003f0c:	07df      	lsls	r7, r3, #31
 8003f0e:	bf44      	itt	mi
 8003f10:	f043 0320 	orrmi.w	r3, r3, #32
 8003f14:	6023      	strmi	r3, [r4, #0]
 8003f16:	b91e      	cbnz	r6, 8003f20 <_printf_i+0x198>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	f023 0320 	bic.w	r3, r3, #32
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	2310      	movs	r3, #16
 8003f22:	e7af      	b.n	8003e84 <_printf_i+0xfc>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f043 0320 	orr.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2378      	movs	r3, #120	; 0x78
 8003f2e:	4828      	ldr	r0, [pc, #160]	; (8003fd0 <_printf_i+0x248>)
 8003f30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f34:	e7e3      	b.n	8003efe <_printf_i+0x176>
 8003f36:	0659      	lsls	r1, r3, #25
 8003f38:	bf48      	it	mi
 8003f3a:	b2b6      	uxthmi	r6, r6
 8003f3c:	e7e6      	b.n	8003f0c <_printf_i+0x184>
 8003f3e:	4615      	mov	r5, r2
 8003f40:	e7bb      	b.n	8003eba <_printf_i+0x132>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	6826      	ldr	r6, [r4, #0]
 8003f46:	1d18      	adds	r0, r3, #4
 8003f48:	6961      	ldr	r1, [r4, #20]
 8003f4a:	6028      	str	r0, [r5, #0]
 8003f4c:	0635      	lsls	r5, r6, #24
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	d501      	bpl.n	8003f56 <_printf_i+0x1ce>
 8003f52:	6019      	str	r1, [r3, #0]
 8003f54:	e002      	b.n	8003f5c <_printf_i+0x1d4>
 8003f56:	0670      	lsls	r0, r6, #25
 8003f58:	d5fb      	bpl.n	8003f52 <_printf_i+0x1ca>
 8003f5a:	8019      	strh	r1, [r3, #0]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4615      	mov	r5, r2
 8003f60:	6123      	str	r3, [r4, #16]
 8003f62:	e7ba      	b.n	8003eda <_printf_i+0x152>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	2100      	movs	r1, #0
 8003f68:	1d1a      	adds	r2, r3, #4
 8003f6a:	602a      	str	r2, [r5, #0]
 8003f6c:	681d      	ldr	r5, [r3, #0]
 8003f6e:	6862      	ldr	r2, [r4, #4]
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 f82f 	bl	8003fd4 <memchr>
 8003f76:	b108      	cbz	r0, 8003f7c <_printf_i+0x1f4>
 8003f78:	1b40      	subs	r0, r0, r5
 8003f7a:	6060      	str	r0, [r4, #4]
 8003f7c:	6863      	ldr	r3, [r4, #4]
 8003f7e:	6123      	str	r3, [r4, #16]
 8003f80:	2300      	movs	r3, #0
 8003f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f86:	e7a8      	b.n	8003eda <_printf_i+0x152>
 8003f88:	462a      	mov	r2, r5
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	47d0      	blx	sl
 8003f92:	3001      	adds	r0, #1
 8003f94:	d0ab      	beq.n	8003eee <_printf_i+0x166>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	079b      	lsls	r3, r3, #30
 8003f9a:	d413      	bmi.n	8003fc4 <_printf_i+0x23c>
 8003f9c:	68e0      	ldr	r0, [r4, #12]
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	4298      	cmp	r0, r3
 8003fa2:	bfb8      	it	lt
 8003fa4:	4618      	movlt	r0, r3
 8003fa6:	e7a4      	b.n	8003ef2 <_printf_i+0x16a>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4632      	mov	r2, r6
 8003fac:	4649      	mov	r1, r9
 8003fae:	4640      	mov	r0, r8
 8003fb0:	47d0      	blx	sl
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d09b      	beq.n	8003eee <_printf_i+0x166>
 8003fb6:	3501      	adds	r5, #1
 8003fb8:	68e3      	ldr	r3, [r4, #12]
 8003fba:	9903      	ldr	r1, [sp, #12]
 8003fbc:	1a5b      	subs	r3, r3, r1
 8003fbe:	42ab      	cmp	r3, r5
 8003fc0:	dcf2      	bgt.n	8003fa8 <_printf_i+0x220>
 8003fc2:	e7eb      	b.n	8003f9c <_printf_i+0x214>
 8003fc4:	2500      	movs	r5, #0
 8003fc6:	f104 0619 	add.w	r6, r4, #25
 8003fca:	e7f5      	b.n	8003fb8 <_printf_i+0x230>
 8003fcc:	08004431 	.word	0x08004431
 8003fd0:	08004442 	.word	0x08004442

08003fd4 <memchr>:
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	b2c9      	uxtb	r1, r1
 8003fda:	4402      	add	r2, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	d101      	bne.n	8003fe6 <memchr+0x12>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	e003      	b.n	8003fee <memchr+0x1a>
 8003fe6:	7804      	ldrb	r4, [r0, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	428c      	cmp	r4, r1
 8003fec:	d1f6      	bne.n	8003fdc <memchr+0x8>
 8003fee:	bd10      	pop	{r4, pc}

08003ff0 <memcpy>:
 8003ff0:	440a      	add	r2, r1
 8003ff2:	4291      	cmp	r1, r2
 8003ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ff8:	d100      	bne.n	8003ffc <memcpy+0xc>
 8003ffa:	4770      	bx	lr
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004002:	4291      	cmp	r1, r2
 8004004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004008:	d1f9      	bne.n	8003ffe <memcpy+0xe>
 800400a:	bd10      	pop	{r4, pc}

0800400c <memmove>:
 800400c:	4288      	cmp	r0, r1
 800400e:	b510      	push	{r4, lr}
 8004010:	eb01 0402 	add.w	r4, r1, r2
 8004014:	d902      	bls.n	800401c <memmove+0x10>
 8004016:	4284      	cmp	r4, r0
 8004018:	4623      	mov	r3, r4
 800401a:	d807      	bhi.n	800402c <memmove+0x20>
 800401c:	1e43      	subs	r3, r0, #1
 800401e:	42a1      	cmp	r1, r4
 8004020:	d008      	beq.n	8004034 <memmove+0x28>
 8004022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800402a:	e7f8      	b.n	800401e <memmove+0x12>
 800402c:	4601      	mov	r1, r0
 800402e:	4402      	add	r2, r0
 8004030:	428a      	cmp	r2, r1
 8004032:	d100      	bne.n	8004036 <memmove+0x2a>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800403a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800403e:	e7f7      	b.n	8004030 <memmove+0x24>

08004040 <_free_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4605      	mov	r5, r0
 8004044:	2900      	cmp	r1, #0
 8004046:	d040      	beq.n	80040ca <_free_r+0x8a>
 8004048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800404c:	1f0c      	subs	r4, r1, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfb8      	it	lt
 8004052:	18e4      	addlt	r4, r4, r3
 8004054:	f000 f910 	bl	8004278 <__malloc_lock>
 8004058:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <_free_r+0x8c>)
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	b933      	cbnz	r3, 800406c <_free_r+0x2c>
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	6014      	str	r4, [r2, #0]
 8004062:	4628      	mov	r0, r5
 8004064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004068:	f000 b90c 	b.w	8004284 <__malloc_unlock>
 800406c:	42a3      	cmp	r3, r4
 800406e:	d908      	bls.n	8004082 <_free_r+0x42>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	1821      	adds	r1, r4, r0
 8004074:	428b      	cmp	r3, r1
 8004076:	bf01      	itttt	eq
 8004078:	6819      	ldreq	r1, [r3, #0]
 800407a:	685b      	ldreq	r3, [r3, #4]
 800407c:	1809      	addeq	r1, r1, r0
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	e7ed      	b.n	800405e <_free_r+0x1e>
 8004082:	461a      	mov	r2, r3
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b10b      	cbz	r3, 800408c <_free_r+0x4c>
 8004088:	42a3      	cmp	r3, r4
 800408a:	d9fa      	bls.n	8004082 <_free_r+0x42>
 800408c:	6811      	ldr	r1, [r2, #0]
 800408e:	1850      	adds	r0, r2, r1
 8004090:	42a0      	cmp	r0, r4
 8004092:	d10b      	bne.n	80040ac <_free_r+0x6c>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	4401      	add	r1, r0
 8004098:	1850      	adds	r0, r2, r1
 800409a:	4283      	cmp	r3, r0
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	d1e0      	bne.n	8004062 <_free_r+0x22>
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4401      	add	r1, r0
 80040a6:	6011      	str	r1, [r2, #0]
 80040a8:	6053      	str	r3, [r2, #4]
 80040aa:	e7da      	b.n	8004062 <_free_r+0x22>
 80040ac:	d902      	bls.n	80040b4 <_free_r+0x74>
 80040ae:	230c      	movs	r3, #12
 80040b0:	602b      	str	r3, [r5, #0]
 80040b2:	e7d6      	b.n	8004062 <_free_r+0x22>
 80040b4:	6820      	ldr	r0, [r4, #0]
 80040b6:	1821      	adds	r1, r4, r0
 80040b8:	428b      	cmp	r3, r1
 80040ba:	bf01      	itttt	eq
 80040bc:	6819      	ldreq	r1, [r3, #0]
 80040be:	685b      	ldreq	r3, [r3, #4]
 80040c0:	1809      	addeq	r1, r1, r0
 80040c2:	6021      	streq	r1, [r4, #0]
 80040c4:	6063      	str	r3, [r4, #4]
 80040c6:	6054      	str	r4, [r2, #4]
 80040c8:	e7cb      	b.n	8004062 <_free_r+0x22>
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20001208 	.word	0x20001208

080040d0 <sbrk_aligned>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4e0e      	ldr	r6, [pc, #56]	; (800410c <sbrk_aligned+0x3c>)
 80040d4:	460c      	mov	r4, r1
 80040d6:	6831      	ldr	r1, [r6, #0]
 80040d8:	4605      	mov	r5, r0
 80040da:	b911      	cbnz	r1, 80040e2 <sbrk_aligned+0x12>
 80040dc:	f000 f8bc 	bl	8004258 <_sbrk_r>
 80040e0:	6030      	str	r0, [r6, #0]
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f8b7 	bl	8004258 <_sbrk_r>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d00a      	beq.n	8004104 <sbrk_aligned+0x34>
 80040ee:	1cc4      	adds	r4, r0, #3
 80040f0:	f024 0403 	bic.w	r4, r4, #3
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d007      	beq.n	8004108 <sbrk_aligned+0x38>
 80040f8:	1a21      	subs	r1, r4, r0
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f8ac 	bl	8004258 <_sbrk_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d101      	bne.n	8004108 <sbrk_aligned+0x38>
 8004104:	f04f 34ff 	mov.w	r4, #4294967295
 8004108:	4620      	mov	r0, r4
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	2000120c 	.word	0x2000120c

08004110 <_malloc_r>:
 8004110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004114:	1ccd      	adds	r5, r1, #3
 8004116:	f025 0503 	bic.w	r5, r5, #3
 800411a:	3508      	adds	r5, #8
 800411c:	2d0c      	cmp	r5, #12
 800411e:	bf38      	it	cc
 8004120:	250c      	movcc	r5, #12
 8004122:	2d00      	cmp	r5, #0
 8004124:	4607      	mov	r7, r0
 8004126:	db01      	blt.n	800412c <_malloc_r+0x1c>
 8004128:	42a9      	cmp	r1, r5
 800412a:	d905      	bls.n	8004138 <_malloc_r+0x28>
 800412c:	230c      	movs	r3, #12
 800412e:	2600      	movs	r6, #0
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4630      	mov	r0, r6
 8004134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004138:	4e2e      	ldr	r6, [pc, #184]	; (80041f4 <_malloc_r+0xe4>)
 800413a:	f000 f89d 	bl	8004278 <__malloc_lock>
 800413e:	6833      	ldr	r3, [r6, #0]
 8004140:	461c      	mov	r4, r3
 8004142:	bb34      	cbnz	r4, 8004192 <_malloc_r+0x82>
 8004144:	4629      	mov	r1, r5
 8004146:	4638      	mov	r0, r7
 8004148:	f7ff ffc2 	bl	80040d0 <sbrk_aligned>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	4604      	mov	r4, r0
 8004150:	d14d      	bne.n	80041ee <_malloc_r+0xde>
 8004152:	6834      	ldr	r4, [r6, #0]
 8004154:	4626      	mov	r6, r4
 8004156:	2e00      	cmp	r6, #0
 8004158:	d140      	bne.n	80041dc <_malloc_r+0xcc>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	4631      	mov	r1, r6
 800415e:	4638      	mov	r0, r7
 8004160:	eb04 0803 	add.w	r8, r4, r3
 8004164:	f000 f878 	bl	8004258 <_sbrk_r>
 8004168:	4580      	cmp	r8, r0
 800416a:	d13a      	bne.n	80041e2 <_malloc_r+0xd2>
 800416c:	6821      	ldr	r1, [r4, #0]
 800416e:	3503      	adds	r5, #3
 8004170:	1a6d      	subs	r5, r5, r1
 8004172:	f025 0503 	bic.w	r5, r5, #3
 8004176:	3508      	adds	r5, #8
 8004178:	2d0c      	cmp	r5, #12
 800417a:	bf38      	it	cc
 800417c:	250c      	movcc	r5, #12
 800417e:	4638      	mov	r0, r7
 8004180:	4629      	mov	r1, r5
 8004182:	f7ff ffa5 	bl	80040d0 <sbrk_aligned>
 8004186:	3001      	adds	r0, #1
 8004188:	d02b      	beq.n	80041e2 <_malloc_r+0xd2>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	442b      	add	r3, r5
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	e00e      	b.n	80041b0 <_malloc_r+0xa0>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	1b52      	subs	r2, r2, r5
 8004196:	d41e      	bmi.n	80041d6 <_malloc_r+0xc6>
 8004198:	2a0b      	cmp	r2, #11
 800419a:	d916      	bls.n	80041ca <_malloc_r+0xba>
 800419c:	1961      	adds	r1, r4, r5
 800419e:	42a3      	cmp	r3, r4
 80041a0:	6025      	str	r5, [r4, #0]
 80041a2:	bf18      	it	ne
 80041a4:	6059      	strne	r1, [r3, #4]
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	bf08      	it	eq
 80041aa:	6031      	streq	r1, [r6, #0]
 80041ac:	5162      	str	r2, [r4, r5]
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	4638      	mov	r0, r7
 80041b2:	f104 060b 	add.w	r6, r4, #11
 80041b6:	f000 f865 	bl	8004284 <__malloc_unlock>
 80041ba:	f026 0607 	bic.w	r6, r6, #7
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	1af2      	subs	r2, r6, r3
 80041c2:	d0b6      	beq.n	8004132 <_malloc_r+0x22>
 80041c4:	1b9b      	subs	r3, r3, r6
 80041c6:	50a3      	str	r3, [r4, r2]
 80041c8:	e7b3      	b.n	8004132 <_malloc_r+0x22>
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	bf0c      	ite	eq
 80041d0:	6032      	streq	r2, [r6, #0]
 80041d2:	605a      	strne	r2, [r3, #4]
 80041d4:	e7ec      	b.n	80041b0 <_malloc_r+0xa0>
 80041d6:	4623      	mov	r3, r4
 80041d8:	6864      	ldr	r4, [r4, #4]
 80041da:	e7b2      	b.n	8004142 <_malloc_r+0x32>
 80041dc:	4634      	mov	r4, r6
 80041de:	6876      	ldr	r6, [r6, #4]
 80041e0:	e7b9      	b.n	8004156 <_malloc_r+0x46>
 80041e2:	230c      	movs	r3, #12
 80041e4:	4638      	mov	r0, r7
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	f000 f84c 	bl	8004284 <__malloc_unlock>
 80041ec:	e7a1      	b.n	8004132 <_malloc_r+0x22>
 80041ee:	6025      	str	r5, [r4, #0]
 80041f0:	e7de      	b.n	80041b0 <_malloc_r+0xa0>
 80041f2:	bf00      	nop
 80041f4:	20001208 	.word	0x20001208

080041f8 <_realloc_r>:
 80041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fc:	4680      	mov	r8, r0
 80041fe:	4614      	mov	r4, r2
 8004200:	460e      	mov	r6, r1
 8004202:	b921      	cbnz	r1, 800420e <_realloc_r+0x16>
 8004204:	4611      	mov	r1, r2
 8004206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800420a:	f7ff bf81 	b.w	8004110 <_malloc_r>
 800420e:	b92a      	cbnz	r2, 800421c <_realloc_r+0x24>
 8004210:	f7ff ff16 	bl	8004040 <_free_r>
 8004214:	4625      	mov	r5, r4
 8004216:	4628      	mov	r0, r5
 8004218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800421c:	f000 f838 	bl	8004290 <_malloc_usable_size_r>
 8004220:	4284      	cmp	r4, r0
 8004222:	4607      	mov	r7, r0
 8004224:	d802      	bhi.n	800422c <_realloc_r+0x34>
 8004226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800422a:	d812      	bhi.n	8004252 <_realloc_r+0x5a>
 800422c:	4621      	mov	r1, r4
 800422e:	4640      	mov	r0, r8
 8004230:	f7ff ff6e 	bl	8004110 <_malloc_r>
 8004234:	4605      	mov	r5, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	d0ed      	beq.n	8004216 <_realloc_r+0x1e>
 800423a:	42bc      	cmp	r4, r7
 800423c:	4622      	mov	r2, r4
 800423e:	4631      	mov	r1, r6
 8004240:	bf28      	it	cs
 8004242:	463a      	movcs	r2, r7
 8004244:	f7ff fed4 	bl	8003ff0 <memcpy>
 8004248:	4631      	mov	r1, r6
 800424a:	4640      	mov	r0, r8
 800424c:	f7ff fef8 	bl	8004040 <_free_r>
 8004250:	e7e1      	b.n	8004216 <_realloc_r+0x1e>
 8004252:	4635      	mov	r5, r6
 8004254:	e7df      	b.n	8004216 <_realloc_r+0x1e>
	...

08004258 <_sbrk_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	2300      	movs	r3, #0
 800425c:	4d05      	ldr	r5, [pc, #20]	; (8004274 <_sbrk_r+0x1c>)
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fc fcac 	bl	8000bc0 <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_sbrk_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_sbrk_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20001210 	.word	0x20001210

08004278 <__malloc_lock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_lock+0x8>)
 800427a:	f000 b811 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 800427e:	bf00      	nop
 8004280:	20001214 	.word	0x20001214

08004284 <__malloc_unlock>:
 8004284:	4801      	ldr	r0, [pc, #4]	; (800428c <__malloc_unlock+0x8>)
 8004286:	f000 b80c 	b.w	80042a2 <__retarget_lock_release_recursive>
 800428a:	bf00      	nop
 800428c:	20001214 	.word	0x20001214

08004290 <_malloc_usable_size_r>:
 8004290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004294:	1f18      	subs	r0, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	bfbc      	itt	lt
 800429a:	580b      	ldrlt	r3, [r1, r0]
 800429c:	18c0      	addlt	r0, r0, r3
 800429e:	4770      	bx	lr

080042a0 <__retarget_lock_acquire_recursive>:
 80042a0:	4770      	bx	lr

080042a2 <__retarget_lock_release_recursive>:
 80042a2:	4770      	bx	lr

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr
