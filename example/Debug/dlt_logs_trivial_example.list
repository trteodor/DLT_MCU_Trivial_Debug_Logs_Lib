
dlt_logs_trivial_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800444c  0800444c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800444c  0800444c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  20000084  080044d8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  080044d8  0002121c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7c0  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ce  00000000  00000000  0002b86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001880b  00000000  00000000  0002f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010660  00000000  00000000  00047b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b253  00000000  00000000  00058183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e33d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000e3428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800429c 	.word	0x0800429c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800429c 	.word	0x0800429c

0800014c <DLT_RB_Read>:
 ********************************************************************************************
 ********************************************************************************************
 * */

static RB_Status DLT_RB_Read(DltRingBuffer_t *Buf, uint8_t *MessageSize, uint8_t **MessagePointer)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	881a      	ldrh	r2, [r3, #0]
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	885b      	ldrh	r3, [r3, #2]
 8000160:	429a      	cmp	r2, r3
 8000162:	d101      	bne.n	8000168 <DLT_RB_Read+0x1c>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8000164:	2301      	movs	r3, #1
 8000166:	e023      	b.n	80001b0 <DLT_RB_Read+0x64>
	}

	// Write current value from buffer to pointer from argument
	*MessageSize = Buf->Buffer[Buf->Tail];
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	885b      	ldrh	r3, [r3, #2]
 800016c:	461a      	mov	r2, r3
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	4413      	add	r3, r2
 8000172:	791a      	ldrb	r2, [r3, #4]
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	701a      	strb	r2, [r3, #0]
	*MessagePointer = &DltMessagesTab[Buf->Tail][0];
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	885b      	ldrh	r3, [r3, #2]
 800017c:	461a      	mov	r2, r3
 800017e:	4613      	mov	r3, r2
 8000180:	021b      	lsls	r3, r3, #8
 8000182:	1a9b      	subs	r3, r3, r2
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <DLT_RB_Read+0x70>)
 8000186:	441a      	add	r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	601a      	str	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % DLT_RING_BUFFER_SIZE;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	885b      	ldrh	r3, [r3, #2]
 8000190:	1c5a      	adds	r2, r3, #1
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <DLT_RB_Read+0x74>)
 8000194:	fb83 1302 	smull	r1, r3, r3, r2
 8000198:	4413      	add	r3, r2
 800019a:	10d9      	asrs	r1, r3, #3
 800019c:	17d3      	asrs	r3, r2, #31
 800019e:	1ac9      	subs	r1, r1, r3
 80001a0:	460b      	mov	r3, r1
 80001a2:	011b      	lsls	r3, r3, #4
 80001a4:	1a5b      	subs	r3, r3, r1
 80001a6:	1ad1      	subs	r1, r2, r3
 80001a8:	b28a      	uxth	r2, r1
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 80001ae:	2300      	movs	r3, #0
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001fc 	.word	0x200001fc
 80001c0:	88888889 	.word	0x88888889

080001c4 <DLT_RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
static RB_Status DLT_RB_Write(DltRingBuffer_t *Buf,uint8_t *DltLogData, uint8_t MessageSize)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	4613      	mov	r3, r2
 80001d0:	71fb      	strb	r3, [r7, #7]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % DLT_RING_BUFFER_SIZE;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	881b      	ldrh	r3, [r3, #0]
 80001d6:	1c5a      	adds	r2, r3, #1
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <DLT_RB_Write+0x94>)
 80001da:	fb83 1302 	smull	r1, r3, r3, r2
 80001de:	4413      	add	r3, r2
 80001e0:	10d9      	asrs	r1, r3, #3
 80001e2:	17d3      	asrs	r3, r2, #31
 80001e4:	1ac9      	subs	r1, r1, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	1a5b      	subs	r3, r3, r1
 80001ec:	1ad1      	subs	r1, r2, r3
 80001ee:	460b      	mov	r3, r1
 80001f0:	74fb      	strb	r3, [r7, #19]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 80001f2:	7cfb      	ldrb	r3, [r7, #19]
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	885b      	ldrh	r3, [r3, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <DLT_RB_Write+0x3e>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 80001fe:	2301      	movs	r3, #1
 8000200:	e025      	b.n	800024e <DLT_RB_Write+0x8a>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = MessageSize;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	881b      	ldrh	r3, [r3, #0]
 8000206:	461a      	mov	r2, r3
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4413      	add	r3, r2
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	711a      	strb	r2, [r3, #4]

	/*Copy the values to new buffer*/
	for(int i=0; i<MessageSize; i++)
 8000210:	2300      	movs	r3, #0
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	e012      	b.n	800023c <DLT_RB_Write+0x78>
	{
		DltMessagesTab[Buf->Head][i] = DltLogData[i];
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	4413      	add	r3, r2
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	8812      	ldrh	r2, [r2, #0]
 8000220:	4611      	mov	r1, r2
 8000222:	7818      	ldrb	r0, [r3, #0]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <DLT_RB_Write+0x98>)
 8000226:	460b      	mov	r3, r1
 8000228:	021b      	lsls	r3, r3, #8
 800022a:	1a5b      	subs	r3, r3, r1
 800022c:	441a      	add	r2, r3
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	4413      	add	r3, r2
 8000232:	4602      	mov	r2, r0
 8000234:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MessageSize; i++)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	3301      	adds	r3, #1
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	697a      	ldr	r2, [r7, #20]
 8000240:	429a      	cmp	r2, r3
 8000242:	dbe8      	blt.n	8000216 <DLT_RB_Write+0x52>
	}

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8000244:	7cfb      	ldrb	r3, [r7, #19]
 8000246:	b29a      	uxth	r2, r3
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	801a      	strh	r2, [r3, #0]

	// Everything is ok - return OK status
	return RB_OK;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	371c      	adds	r7, #28
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	88888889 	.word	0x88888889
 800025c:	200001fc 	.word	0x200001fc

08000260 <PrepareHoleHeader>:
 *
 * refer to: https://www.autosar.org/fileadmin/user_upload/standards/foundation/1-0/AUTOSAR_PRS_DiagnosticLogAndTraceProtocol.pdf
 *
 * */
static void PrepareHoleHeader(uint8_t Level, uint32_t AppId, uint32_t ContextId, uint16_t size)
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
 800026a:	461a      	mov	r2, r3
 800026c:	4603      	mov	r3, r0
 800026e:	73fb      	strb	r3, [r7, #15]
 8000270:	4613      	mov	r3, r2
 8000272:	81bb      	strh	r3, [r7, #12]
	if(size > (254 -32) )
 8000274:	89bb      	ldrh	r3, [r7, #12]
 8000276:	2bde      	cmp	r3, #222	; 0xde
 8000278:	d900      	bls.n	800027c <PrepareHoleHeader+0x1c>
	{
		/*Error to handle or please develop this function */
		while(1)
 800027a:	e7fe      	b.n	800027a <PrepareHoleHeader+0x1a>

	}


	/*START HEADER*/
	DltDebugTmpBuf[0] =  0x44; /*'D'*/
 800027c:	4b43      	ldr	r3, [pc, #268]	; (800038c <PrepareHoleHeader+0x12c>)
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	701a      	strb	r2, [r3, #0]
	DltDebugTmpBuf[1] =  0x4c; /*'L'*/
 8000282:	4b42      	ldr	r3, [pc, #264]	; (800038c <PrepareHoleHeader+0x12c>)
 8000284:	224c      	movs	r2, #76	; 0x4c
 8000286:	705a      	strb	r2, [r3, #1]
	DltDebugTmpBuf[2] =  0x53; /*'S'*/
 8000288:	4b40      	ldr	r3, [pc, #256]	; (800038c <PrepareHoleHeader+0x12c>)
 800028a:	2253      	movs	r2, #83	; 0x53
 800028c:	709a      	strb	r2, [r3, #2]
	DltDebugTmpBuf[3] =  0x01; /*'0x01'*/
 800028e:	4b3f      	ldr	r3, [pc, #252]	; (800038c <PrepareHoleHeader+0x12c>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]


	DltDebugTmpBuf[4] =  0x35; /*'Dlt base header config
 8000294:	4b3d      	ldr	r3, [pc, #244]	; (800038c <PrepareHoleHeader+0x12c>)
 8000296:	2235      	movs	r2, #53	; 0x35
 8000298:	711a      	strb	r2, [r3, #4]
	* With Seesion ID - false
	* With time stamp - true
	* version number -random
	'*/

	DltDebugTmpBuf[5] =  ActDltMessageCounter++; /*'Message counter value '*/
 800029a:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <PrepareHoleHeader+0x130>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	b2d1      	uxtb	r1, r2
 80002a2:	4a3b      	ldr	r2, [pc, #236]	; (8000390 <PrepareHoleHeader+0x130>)
 80002a4:	7011      	strb	r1, [r2, #0]
 80002a6:	4a39      	ldr	r2, [pc, #228]	; (800038c <PrepareHoleHeader+0x12c>)
 80002a8:	7153      	strb	r3, [r2, #5]

	/*TODO: - it must be fixed!!!! - Length*/
	DltDebugTmpBuf[6] =  0x00; /*Message length general*/
 80002aa:	4b38      	ldr	r3, [pc, #224]	; (800038c <PrepareHoleHeader+0x12c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	719a      	strb	r2, [r3, #6]
//	DltDebugTmpBuf[7] =  0x37; /*'Message length general '*/
	DltDebugTmpBuf[7]=28+size; /*General size */
 80002b0:	89bb      	ldrh	r3, [r7, #12]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	331c      	adds	r3, #28
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b34      	ldr	r3, [pc, #208]	; (800038c <PrepareHoleHeader+0x12c>)
 80002ba:	71da      	strb	r2, [r3, #7]


	uint32_t TempEcuId = DLT_LOG_ECUID_VALUE;
 80002bc:	2353      	movs	r3, #83	; 0x53
 80002be:	061a      	lsls	r2, r3, #24
 80002c0:	2354      	movs	r3, #84	; 0x54
 80002c2:	041b      	lsls	r3, r3, #16
 80002c4:	431a      	orrs	r2, r3
 80002c6:	2346      	movs	r3, #70	; 0x46
 80002c8:	021b      	lsls	r3, r3, #8
 80002ca:	4313      	orrs	r3, r2
 80002cc:	2231      	movs	r2, #49	; 0x31
 80002ce:	4313      	orrs	r3, r2
 80002d0:	617b      	str	r3, [r7, #20]
	/*ECU ID*/
	DltDebugTmpBuf[8]= ((uint8_t*)&TempEcuId)[3];
 80002d2:	7dfa      	ldrb	r2, [r7, #23]
 80002d4:	4b2d      	ldr	r3, [pc, #180]	; (800038c <PrepareHoleHeader+0x12c>)
 80002d6:	721a      	strb	r2, [r3, #8]
	DltDebugTmpBuf[9]= ((uint8_t*)&TempEcuId)[2];
 80002d8:	7dba      	ldrb	r2, [r7, #22]
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <PrepareHoleHeader+0x12c>)
 80002dc:	725a      	strb	r2, [r3, #9]
	DltDebugTmpBuf[10]= ((uint8_t*)&TempEcuId)[1];
 80002de:	7d7a      	ldrb	r2, [r7, #21]
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <PrepareHoleHeader+0x12c>)
 80002e2:	729a      	strb	r2, [r3, #10]
	DltDebugTmpBuf[11]= ((uint8_t*)&TempEcuId)[0];
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b28      	ldr	r3, [pc, #160]	; (800038c <PrepareHoleHeader+0x12c>)
 80002ec:	72da      	strb	r2, [r3, #11]

	/*Time stamp*/
	DltDebugTmpBuf[12]= ((uint8_t*)&TimestampValue)[3];
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <PrepareHoleHeader+0x134>)
 80002f0:	78da      	ldrb	r2, [r3, #3]
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <PrepareHoleHeader+0x12c>)
 80002f4:	731a      	strb	r2, [r3, #12]
	DltDebugTmpBuf[13]= ((uint8_t*)&TimestampValue)[2];
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <PrepareHoleHeader+0x134>)
 80002f8:	789a      	ldrb	r2, [r3, #2]
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <PrepareHoleHeader+0x12c>)
 80002fc:	735a      	strb	r2, [r3, #13]
	DltDebugTmpBuf[14]= ((uint8_t*)&TimestampValue)[1];
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <PrepareHoleHeader+0x134>)
 8000300:	785a      	ldrb	r2, [r3, #1]
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <PrepareHoleHeader+0x12c>)
 8000304:	739a      	strb	r2, [r3, #14]
	DltDebugTmpBuf[15]= ((uint8_t*)&TimestampValue)[0];
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <PrepareHoleHeader+0x134>)
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	4b20      	ldr	r3, [pc, #128]	; (800038c <PrepareHoleHeader+0x12c>)
 800030c:	73da      	strb	r2, [r3, #15]

	/*Extended header --verbose | type serial*/
//	DltDebugTmpBuf[16]= 0x41; /**/
	DltDebugTmpBuf[16]= (Level << 4) | 1;
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	011b      	lsls	r3, r3, #4
 8000312:	b25b      	sxtb	r3, r3
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	b25b      	sxtb	r3, r3
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <PrepareHoleHeader+0x12c>)
 800031e:	741a      	strb	r2, [r3, #16]

	/*Number of arguments*/
	DltDebugTmpBuf[17]= 0x01; /**/
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <PrepareHoleHeader+0x12c>)
 8000322:	2201      	movs	r2, #1
 8000324:	745a      	strb	r2, [r3, #17]

	/*App id */
	DltDebugTmpBuf[18]= ((uint8_t*)&AppId)[3];
 8000326:	7afa      	ldrb	r2, [r7, #11]
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <PrepareHoleHeader+0x12c>)
 800032a:	749a      	strb	r2, [r3, #18]
	DltDebugTmpBuf[19]= ((uint8_t*)&AppId)[2];
 800032c:	7aba      	ldrb	r2, [r7, #10]
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <PrepareHoleHeader+0x12c>)
 8000330:	74da      	strb	r2, [r3, #19]
	DltDebugTmpBuf[20]= ((uint8_t*)&AppId)[1];
 8000332:	7a7a      	ldrb	r2, [r7, #9]
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <PrepareHoleHeader+0x12c>)
 8000336:	751a      	strb	r2, [r3, #20]
	DltDebugTmpBuf[21]= ((uint8_t*)&AppId)[0];
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <PrepareHoleHeader+0x12c>)
 8000340:	755a      	strb	r2, [r3, #21]

	/*Contex ID  (4 bajty*/
	DltDebugTmpBuf[22]= ((uint8_t*)&ContextId)[3];
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <PrepareHoleHeader+0x12c>)
 8000346:	759a      	strb	r2, [r3, #22]
	DltDebugTmpBuf[23]= ((uint8_t*)&ContextId)[2];
 8000348:	79ba      	ldrb	r2, [r7, #6]
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <PrepareHoleHeader+0x12c>)
 800034c:	75da      	strb	r2, [r3, #23]
	DltDebugTmpBuf[24]= ((uint8_t*)&ContextId)[1];
 800034e:	797a      	ldrb	r2, [r7, #5]
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <PrepareHoleHeader+0x12c>)
 8000352:	761a      	strb	r2, [r3, #24]
	DltDebugTmpBuf[25]= ((uint8_t*)&ContextId)[0];
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <PrepareHoleHeader+0x12c>)
 800035a:	765a      	strb	r2, [r3, #25]

	/*Type info*/
	DltDebugTmpBuf[26]= 0x01; /**/
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <PrepareHoleHeader+0x12c>)
 800035e:	2201      	movs	r2, #1
 8000360:	769a      	strb	r2, [r3, #26]
	DltDebugTmpBuf[27]= 0x82; /**/
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <PrepareHoleHeader+0x12c>)
 8000364:	2282      	movs	r2, #130	; 0x82
 8000366:	76da      	strb	r2, [r3, #27]
	DltDebugTmpBuf[28]= 0x00; /**/
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <PrepareHoleHeader+0x12c>)
 800036a:	2200      	movs	r2, #0
 800036c:	771a      	strb	r2, [r3, #28]
	DltDebugTmpBuf[29]= 0x00; /**/
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <PrepareHoleHeader+0x12c>)
 8000370:	2200      	movs	r2, #0
 8000372:	775a      	strb	r2, [r3, #29]

	/*Argument 1*/
	DltDebugTmpBuf[30]= size; /*the size of the load in simplified form, but not exactly but generally yes*/
 8000374:	89bb      	ldrh	r3, [r7, #12]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <PrepareHoleHeader+0x12c>)
 800037a:	779a      	strb	r2, [r3, #30]
	DltDebugTmpBuf[31]= 0x00; /**/
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <PrepareHoleHeader+0x12c>)
 800037e:	2200      	movs	r2, #0
 8000380:	77da      	strb	r2, [r3, #31]
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	200000e8 	.word	0x200000e8
 8000390:	200001e7 	.word	0x200001e7
 8000394:	20000010 	.word	0x20000010

08000398 <DLTuc_RegisterTransmitSerialDataCallback>:
 *  This simple stack/library must have initialized by "DLTuc_RegisterTransmitSerialDataCallback"
 *  As a parameter must by pass function which will transmit serial data
 *
 * */
void DLTuc_RegisterTransmitSerialDataCallback(void LLSerialTrDataFunctionCb(uint8_t *DltLogData, uint8_t Size))
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	ExtSerialTrDataFunctionCb = LLSerialTrDataFunctionCb;
 80003a0:	4a19      	ldr	r2, [pc, #100]	; (8000408 <DLTuc_RegisterTransmitSerialDataCallback+0x70>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6013      	str	r3, [r2, #0]

	/*Preapre LOG DROPPED Info Log*/
	PrepareHoleHeader(DL_ERROR,0xDD,0xDD,sizeof(DltLogDroppedInfo) );
 80003a6:	230f      	movs	r3, #15
 80003a8:	22dd      	movs	r2, #221	; 0xdd
 80003aa:	21dd      	movs	r1, #221	; 0xdd
 80003ac:	2002      	movs	r0, #2
 80003ae:	f7ff ff57 	bl	8000260 <PrepareHoleHeader>

	/*Payload!!!*/
	/*Copy payload text temporary*/
	for(int i=DLT_ACT_HOLE_HEADER_SIZE; i<(sizeof(DltLogDroppedInfo)+DLT_ACT_HOLE_HEADER_SIZE); i++)
 80003b2:	2320      	movs	r3, #32
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e00b      	b.n	80003d0 <DLTuc_RegisterTransmitSerialDataCallback+0x38>
	{
		DltDebugTmpBuf[i]= DltLogDroppedInfo[i-DLT_ACT_HOLE_HEADER_SIZE];
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3b20      	subs	r3, #32
 80003bc:	4a13      	ldr	r2, [pc, #76]	; (800040c <DLTuc_RegisterTransmitSerialDataCallback+0x74>)
 80003be:	5cd1      	ldrb	r1, [r2, r3]
 80003c0:	4a13      	ldr	r2, [pc, #76]	; (8000410 <DLTuc_RegisterTransmitSerialDataCallback+0x78>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4413      	add	r3, r2
 80003c6:	460a      	mov	r2, r1
 80003c8:	701a      	strb	r2, [r3, #0]
	for(int i=DLT_ACT_HOLE_HEADER_SIZE; i<(sizeof(DltLogDroppedInfo)+DLT_ACT_HOLE_HEADER_SIZE); i++)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3301      	adds	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2b2e      	cmp	r3, #46	; 0x2e
 80003d4:	d9f0      	bls.n	80003b8 <DLTuc_RegisterTransmitSerialDataCallback+0x20>
	}

	for(int i=0; i<sizeof(DltLogDroppedInfoBuffer); i++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	e00b      	b.n	80003f4 <DLTuc_RegisterTransmitSerialDataCallback+0x5c>
	{
		DltLogDroppedInfoBuffer[i] = DltDebugTmpBuf[i];
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <DLTuc_RegisterTransmitSerialDataCallback+0x78>)
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	4413      	add	r3, r2
 80003e2:	7819      	ldrb	r1, [r3, #0]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <DLTuc_RegisterTransmitSerialDataCallback+0x7c>)
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4413      	add	r3, r2
 80003ea:	460a      	mov	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<sizeof(DltLogDroppedInfoBuffer); i++)
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	2b3b      	cmp	r3, #59	; 0x3b
 80003f8:	d9f0      	bls.n	80003dc <DLTuc_RegisterTransmitSerialDataCallback+0x44>
	}

	DLtLogDroppedSize = DLT_ACT_HOLE_HEADER_SIZE + sizeof(DltLogDroppedInfo);
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <DLTuc_RegisterTransmitSerialDataCallback+0x80>)
 80003fc:	222f      	movs	r2, #47	; 0x2f
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000a0 	.word	0x200000a0
 800040c:	20000000 	.word	0x20000000
 8000410:	200000e8 	.word	0x200000e8
 8000414:	200000a8 	.word	0x200000a8
 8000418:	200000e4 	.word	0x200000e4

0800041c <DLTuc_MessageTransmitDone>:
 *  Call this function when the transsmision is end
 * For example in "DMA transmission end callback" to inform the lib that the message is transmitted
 *
 * */
void DLTuc_MessageTransmitDone(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
	uint8_t TmpMessageSize=0;
 8000422:	2300      	movs	r3, #0
 8000424:	71fb      	strb	r3, [r7, #7]
	uint8_t *TmpMessagePointer = NULL;
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]

	if(LogDroppedFlag == true)
 800042a:	4b16      	ldr	r3, [pc, #88]	; (8000484 <DLTuc_MessageTransmitDone+0x68>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00d      	beq.n	800044e <DLTuc_MessageTransmitDone+0x32>
	{
		LogDroppedFlag = false;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <DLTuc_MessageTransmitDone+0x68>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]

		if(ExtSerialTrDataFunctionCb != NULL)
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <DLTuc_MessageTransmitDone+0x6c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d006      	beq.n	800044e <DLTuc_MessageTransmitDone+0x32>
		{
			ExtSerialTrDataFunctionCb(DltLogDroppedInfoBuffer, DLtLogDroppedSize);
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <DLTuc_MessageTransmitDone+0x6c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a11      	ldr	r2, [pc, #68]	; (800048c <DLTuc_MessageTransmitDone+0x70>)
 8000446:	7812      	ldrb	r2, [r2, #0]
 8000448:	4611      	mov	r1, r2
 800044a:	4811      	ldr	r0, [pc, #68]	; (8000490 <DLTuc_MessageTransmitDone+0x74>)
 800044c:	4798      	blx	r3
		}
	}

	if(DLT_RB_Read(&DltRingBuffer,&TmpMessageSize,&TmpMessagePointer) == RB_OK)
 800044e:	463a      	mov	r2, r7
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	4619      	mov	r1, r3
 8000454:	480f      	ldr	r0, [pc, #60]	; (8000494 <DLTuc_MessageTransmitDone+0x78>)
 8000456:	f7ff fe79 	bl	800014c <DLT_RB_Read>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d10a      	bne.n	8000476 <DLTuc_MessageTransmitDone+0x5a>
	{
		if(ExtSerialTrDataFunctionCb != NULL)
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <DLTuc_MessageTransmitDone+0x6c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d009      	beq.n	800047c <DLTuc_MessageTransmitDone+0x60>
		{
			ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <DLTuc_MessageTransmitDone+0x6c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	79f9      	ldrb	r1, [r7, #7]
 8000470:	4610      	mov	r0, r2
 8000472:	4798      	blx	r3
	}
	else
	{
		TransmitReadyStateFlag = true;
	}
}
 8000474:	e002      	b.n	800047c <DLTuc_MessageTransmitDone+0x60>
		TransmitReadyStateFlag = true;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <DLTuc_MessageTransmitDone+0x7c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000a4 	.word	0x200000a4
 8000488:	200000a0 	.word	0x200000a0
 800048c:	200000e4 	.word	0x200000e4
 8000490:	200000a8 	.word	0x200000a8
 8000494:	200001e8 	.word	0x200001e8
 8000498:	2000000f 	.word	0x2000000f

0800049c <DLTuc_LogOutVarArgs>:
 *
 * Typical most usefull function to create DLT Log
 *
 * */
void DLTuc_LogOutVarArgs(DltLogLevel_t Level, uint32_t AppId, uint32_t ContextId, uint8_t *Payload, ...)
{
 800049c:	b408      	push	{r3}
 800049e:	b580      	push	{r7, lr}
 80004a0:	b089      	sub	sp, #36	; 0x24
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	60b9      	str	r1, [r7, #8]
 80004a8:	607a      	str	r2, [r7, #4]
 80004aa:	73fb      	strb	r3, [r7, #15]
va_list ap;
uint16_t Size;

	va_start(ap, Payload);
 80004ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b0:	61bb      	str	r3, [r7, #24]
	Size = vsprintf((char *)DltDebugTmpBuf + DLT_ACT_HOLE_HEADER_SIZE, (char *)Payload,ap);
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <DLTuc_LogOutVarArgs+0xa8>)
 80004b4:	69ba      	ldr	r2, [r7, #24]
 80004b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 fa8b 	bl	80039d4 <vsiprintf>
 80004be:	4603      	mov	r3, r0
 80004c0:	83fb      	strh	r3, [r7, #30]
	va_end(ap);

	PrepareHoleHeader(Level,AppId,ContextId,Size);
 80004c2:	8bfb      	ldrh	r3, [r7, #30]
 80004c4:	7bf8      	ldrb	r0, [r7, #15]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	68b9      	ldr	r1, [r7, #8]
 80004ca:	f7ff fec9 	bl	8000260 <PrepareHoleHeader>
	Size = Size +DLT_ACT_HOLE_HEADER_SIZE;
 80004ce:	8bfb      	ldrh	r3, [r7, #30]
 80004d0:	3320      	adds	r3, #32
 80004d2:	83fb      	strh	r3, [r7, #30]


	if(DLT_RB_Write(&DltRingBuffer,DltDebugTmpBuf, Size) == RB_OK)
 80004d4:	8bfb      	ldrh	r3, [r7, #30]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	461a      	mov	r2, r3
 80004da:	491b      	ldr	r1, [pc, #108]	; (8000548 <DLTuc_LogOutVarArgs+0xac>)
 80004dc:	481b      	ldr	r0, [pc, #108]	; (800054c <DLTuc_LogOutVarArgs+0xb0>)
 80004de:	f7ff fe71 	bl	80001c4 <DLT_RB_Write>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <DLTuc_LogOutVarArgs+0x52>
		/*Nothing to do*/
	}
	else
	{
		/*Static flag for Transmit done call back*/
		LogDroppedFlag = true;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <DLTuc_LogOutVarArgs+0xb4>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
	}

	uint8_t TmpMessageSize=0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	75fb      	strb	r3, [r7, #23]
	uint8_t *TmpMessagePointer = NULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]


	if(TransmitReadyStateFlag == true)
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <DLTuc_LogOutVarArgs+0xb8>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d119      	bne.n	8000534 <DLTuc_LogOutVarArgs+0x98>
	{
		if(DLT_RB_Read(&DltRingBuffer,&TmpMessageSize,&TmpMessagePointer) == RB_OK)
 8000500:	f107 0210 	add.w	r2, r7, #16
 8000504:	f107 0317 	add.w	r3, r7, #23
 8000508:	4619      	mov	r1, r3
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <DLTuc_LogOutVarArgs+0xb0>)
 800050c:	f7ff fe1e 	bl	800014c <DLT_RB_Read>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10e      	bne.n	8000534 <DLTuc_LogOutVarArgs+0x98>
			{
				TransmitReadyStateFlag = false;
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <DLTuc_LogOutVarArgs+0xb8>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
				if(ExtSerialTrDataFunctionCb != NULL)
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <DLTuc_LogOutVarArgs+0xbc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d006      	beq.n	8000532 <DLTuc_LogOutVarArgs+0x96>
				{
					ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <DLTuc_LogOutVarArgs+0xbc>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	693a      	ldr	r2, [r7, #16]
 800052a:	7df9      	ldrb	r1, [r7, #23]
 800052c:	4610      	mov	r0, r2
 800052e:	4798      	blx	r3
				{
					while(1); /*Please Register the callback...*/
				}
			}
	}
}
 8000530:	e000      	b.n	8000534 <DLTuc_LogOutVarArgs+0x98>
					while(1); /*Please Register the callback...*/
 8000532:	e7fe      	b.n	8000532 <DLTuc_LogOutVarArgs+0x96>
}
 8000534:	bf00      	nop
 8000536:	3724      	adds	r7, #36	; 0x24
 8000538:	46bd      	mov	sp, r7
 800053a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800053e:	b001      	add	sp, #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000108 	.word	0x20000108
 8000548:	200000e8 	.word	0x200000e8
 800054c:	200001e8 	.word	0x200001e8
 8000550:	200000a4 	.word	0x200000a4
 8000554:	2000000f 	.word	0x2000000f
 8000558:	200000a0 	.word	0x200000a0

0800055c <DLTuc_UpdateTimeStampMs>:
 *@brief DLTuc_UpdateTimeStampMs
 *
 *
 * */
void DLTuc_UpdateTimeStampMs(uint32_t Time)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	TimestampValue = (Time*10);
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	461a      	mov	r2, r3
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <DLTuc_UpdateTimeStampMs+0x24>)
 8000572:	601a      	str	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000010 	.word	0x20000010

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_DMA_Init+0x48>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <MX_DMA_Init+0x48>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_DMA_Init+0x48>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2010      	movs	r0, #16
 80005a8:	f000 fe53 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005ac:	2010      	movs	r0, #16
 80005ae:	f000 fe6c 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2011      	movs	r0, #17
 80005b8:	f000 fe4b 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005bc:	2011      	movs	r0, #17
 80005be:	f000 fe64 	bl	800128a <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x104>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <MX_GPIO_Init+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <MX_GPIO_Init+0x104>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x104>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a34      	ldr	r2, [pc, #208]	; (80006d4 <MX_GPIO_Init+0x104>)
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x104>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x104>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a2e      	ldr	r2, [pc, #184]	; (80006d4 <MX_GPIO_Init+0x104>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_GPIO_Init+0x104>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_GPIO_Init+0x104>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <MX_GPIO_Init+0x104>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_GPIO_Init+0x104>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	4823      	ldr	r0, [pc, #140]	; (80006d8 <MX_GPIO_Init+0x108>)
 800064a:	f001 fa5b 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_GPIO_Init+0x10c>)
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	481f      	ldr	r0, [pc, #124]	; (80006e0 <MX_GPIO_Init+0x110>)
 8000664:	f001 f8ca 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000668:	2303      	movs	r3, #3
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_GPIO_Init+0x114>)
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4819      	ldr	r0, [pc, #100]	; (80006e0 <MX_GPIO_Init+0x110>)
 800067c:	f001 f8be 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000680:	2320      	movs	r3, #32
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4810      	ldr	r0, [pc, #64]	; (80006d8 <MX_GPIO_Init+0x108>)
 8000698:	f001 f8b0 	bl	80017fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2006      	movs	r0, #6
 80006a2:	f000 fdd6 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006a6:	2006      	movs	r0, #6
 80006a8:	f000 fdef 	bl	800128a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2007      	movs	r0, #7
 80006b2:	f000 fdce 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006b6:	2007      	movs	r0, #7
 80006b8:	f000 fde7 	bl	800128a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2028      	movs	r0, #40	; 0x28
 80006c2:	f000 fdc6 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c6:	2028      	movs	r0, #40	; 0x28
 80006c8:	f000 fddf 	bl	800128a <HAL_NVIC_EnableIRQ>

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	10110000 	.word	0x10110000
 80006e0:	40011000 	.word	0x40011000
 80006e4:	10210000 	.word	0x10210000

080006e8 <HAL_IncTick>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_IncTick(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_IncTick+0x24>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <HAL_IncTick+0x28>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <HAL_IncTick+0x28>)
 80006fa:	6013      	str	r3, [r2, #0]
  DLTuc_UpdateTimeStampMs(uwTick);
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <HAL_IncTick+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff2b 	bl	800055c <DLTuc_UpdateTimeStampMs>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000001c 	.word	0x2000001c
 8000710:	20001208 	.word	0x20001208

08000714 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	DLTuc_MessageTransmitDone();
 800071c:	f7ff fe7e 	bl	800041c <DLTuc_MessageTransmitDone>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LLSerialTrDataFunctionC>:

void LLSerialTrDataFunctionC(uint8_t *DltLogData, uint8_t Size)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_DMA(&huart2, DltLogData, Size);
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	b29b      	uxth	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <LLSerialTrDataFunctionC+0x24>)
 800073e:	f002 fc51 	bl	8002fe4 <HAL_UART_Transmit_DMA>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000113c 	.word	0x2000113c

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fc31 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f961 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff ff37 	bl	80005d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000762:	f7ff ff0f 	bl	8000584 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000766:	f000 fb3f 	bl	8000de8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800076a:	f000 fa69 	bl	8000c40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /*Register the transmit data callback for DLT lib*/
  DLTuc_RegisterTransmitSerialDataCallback(LLSerialTrDataFunctionC);
 800076e:	489e      	ldr	r0, [pc, #632]	; (80009e8 <main+0x298>)
 8000770:	f7ff fe12 	bl	8000398 <DLTuc_RegisterTransmitSerialDataCallback>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000774:	2100      	movs	r1, #0
 8000776:	489d      	ldr	r0, [pc, #628]	; (80009ec <main+0x29c>)
 8000778:	f001 fec0 	bl	80024fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800077c:	2108      	movs	r1, #8
 800077e:	489b      	ldr	r0, [pc, #620]	; (80009ec <main+0x29c>)
 8000780:	f001 febc 	bl	80024fc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000784:	4b99      	ldr	r3, [pc, #612]	; (80009ec <main+0x29c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2200      	movs	r2, #0
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,InitPwmValue);
 800078c:	4b97      	ldr	r3, [pc, #604]	; (80009ec <main+0x29c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c


  /*LOG DROP TEST*/
for(int i=0; i<20; i++)
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	e089      	b.n	80008b0 <main+0x160>
{
	  DEBUGL(DL_INFO, "Log Drop testing0 :)  %d" , 5);
 800079c:	2331      	movs	r3, #49	; 0x31
 800079e:	061a      	lsls	r2, r3, #24
 80007a0:	2332      	movs	r3, #50	; 0x32
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	431a      	orrs	r2, r3
 80007a6:	2333      	movs	r3, #51	; 0x33
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	2234      	movs	r2, #52	; 0x34
 80007ae:	ea43 0102 	orr.w	r1, r3, r2
 80007b2:	2354      	movs	r3, #84	; 0x54
 80007b4:	061a      	lsls	r2, r3, #24
 80007b6:	2345      	movs	r3, #69	; 0x45
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	431a      	orrs	r2, r3
 80007bc:	2353      	movs	r3, #83	; 0x53
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	4313      	orrs	r3, r2
 80007c2:	2254      	movs	r2, #84	; 0x54
 80007c4:	431a      	orrs	r2, r3
 80007c6:	2305      	movs	r3, #5
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <main+0x2a0>)
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff fe65 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing1 :)  %d" , 5);
 80007d2:	2331      	movs	r3, #49	; 0x31
 80007d4:	061a      	lsls	r2, r3, #24
 80007d6:	2332      	movs	r3, #50	; 0x32
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	431a      	orrs	r2, r3
 80007dc:	2333      	movs	r3, #51	; 0x33
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	4313      	orrs	r3, r2
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	ea43 0102 	orr.w	r1, r3, r2
 80007e8:	2354      	movs	r3, #84	; 0x54
 80007ea:	061a      	lsls	r2, r3, #24
 80007ec:	2345      	movs	r3, #69	; 0x45
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2353      	movs	r3, #83	; 0x53
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	4313      	orrs	r3, r2
 80007f8:	2254      	movs	r2, #84	; 0x54
 80007fa:	431a      	orrs	r2, r3
 80007fc:	2305      	movs	r3, #5
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <main+0x2a4>)
 8000802:	2004      	movs	r0, #4
 8000804:	f7ff fe4a 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing2:)  %d" , 5);
 8000808:	2331      	movs	r3, #49	; 0x31
 800080a:	061a      	lsls	r2, r3, #24
 800080c:	2332      	movs	r3, #50	; 0x32
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	431a      	orrs	r2, r3
 8000812:	2333      	movs	r3, #51	; 0x33
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	4313      	orrs	r3, r2
 8000818:	2234      	movs	r2, #52	; 0x34
 800081a:	ea43 0102 	orr.w	r1, r3, r2
 800081e:	2354      	movs	r3, #84	; 0x54
 8000820:	061a      	lsls	r2, r3, #24
 8000822:	2345      	movs	r3, #69	; 0x45
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	431a      	orrs	r2, r3
 8000828:	2353      	movs	r3, #83	; 0x53
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	4313      	orrs	r3, r2
 800082e:	2254      	movs	r2, #84	; 0x54
 8000830:	431a      	orrs	r2, r3
 8000832:	2305      	movs	r3, #5
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <main+0x2a8>)
 8000838:	2004      	movs	r0, #4
 800083a:	f7ff fe2f 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing3 :)  %d" , 5);
 800083e:	2331      	movs	r3, #49	; 0x31
 8000840:	061a      	lsls	r2, r3, #24
 8000842:	2332      	movs	r3, #50	; 0x32
 8000844:	041b      	lsls	r3, r3, #16
 8000846:	431a      	orrs	r2, r3
 8000848:	2333      	movs	r3, #51	; 0x33
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	4313      	orrs	r3, r2
 800084e:	2234      	movs	r2, #52	; 0x34
 8000850:	ea43 0102 	orr.w	r1, r3, r2
 8000854:	2354      	movs	r3, #84	; 0x54
 8000856:	061a      	lsls	r2, r3, #24
 8000858:	2345      	movs	r3, #69	; 0x45
 800085a:	041b      	lsls	r3, r3, #16
 800085c:	431a      	orrs	r2, r3
 800085e:	2353      	movs	r3, #83	; 0x53
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	4313      	orrs	r3, r2
 8000864:	2254      	movs	r2, #84	; 0x54
 8000866:	431a      	orrs	r2, r3
 8000868:	2305      	movs	r3, #5
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4b63      	ldr	r3, [pc, #396]	; (80009fc <main+0x2ac>)
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fe14 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing4 :)  %d" , 5);
 8000874:	2331      	movs	r3, #49	; 0x31
 8000876:	061a      	lsls	r2, r3, #24
 8000878:	2332      	movs	r3, #50	; 0x32
 800087a:	041b      	lsls	r3, r3, #16
 800087c:	431a      	orrs	r2, r3
 800087e:	2333      	movs	r3, #51	; 0x33
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	4313      	orrs	r3, r2
 8000884:	2234      	movs	r2, #52	; 0x34
 8000886:	ea43 0102 	orr.w	r1, r3, r2
 800088a:	2354      	movs	r3, #84	; 0x54
 800088c:	061a      	lsls	r2, r3, #24
 800088e:	2345      	movs	r3, #69	; 0x45
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	431a      	orrs	r2, r3
 8000894:	2353      	movs	r3, #83	; 0x53
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	4313      	orrs	r3, r2
 800089a:	2254      	movs	r2, #84	; 0x54
 800089c:	431a      	orrs	r2, r3
 800089e:	2305      	movs	r3, #5
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <main+0x2b0>)
 80008a4:	2004      	movs	r0, #4
 80008a6:	f7ff fdf9 	bl	800049c <DLTuc_LogOutVarArgs>
for(int i=0; i<20; i++)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b13      	cmp	r3, #19
 80008b4:	f77f af72 	ble.w	800079c <main+0x4c>
}

  HAL_Delay(50);
 80008b8:	2032      	movs	r0, #50	; 0x32
 80008ba:	f000 fbcf 	bl	800105c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DEBUGL(DL_INFO, "Hello DLT Again %d Arg1 %d Arg2 :%d" , 2565, 56,23);
 80008be:	2331      	movs	r3, #49	; 0x31
 80008c0:	061a      	lsls	r2, r3, #24
 80008c2:	2332      	movs	r3, #50	; 0x32
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	431a      	orrs	r2, r3
 80008c8:	2333      	movs	r3, #51	; 0x33
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	4313      	orrs	r3, r2
 80008ce:	2234      	movs	r2, #52	; 0x34
 80008d0:	ea43 0102 	orr.w	r1, r3, r2
 80008d4:	2354      	movs	r3, #84	; 0x54
 80008d6:	061a      	lsls	r2, r3, #24
 80008d8:	2345      	movs	r3, #69	; 0x45
 80008da:	041b      	lsls	r3, r3, #16
 80008dc:	431a      	orrs	r2, r3
 80008de:	2353      	movs	r3, #83	; 0x53
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	4313      	orrs	r3, r2
 80008e4:	2254      	movs	r2, #84	; 0x54
 80008e6:	431a      	orrs	r2, r3
 80008e8:	2317      	movs	r3, #23
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	2338      	movs	r3, #56	; 0x38
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	f640 2305 	movw	r3, #2565	; 0xa05
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <main+0x2b4>)
 80008f8:	2004      	movs	r0, #4
 80008fa:	f7ff fdcf 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGFF(DL_INFO, "GENERALLY DLT Again1");
 80008fe:	2331      	movs	r3, #49	; 0x31
 8000900:	061a      	lsls	r2, r3, #24
 8000902:	2332      	movs	r3, #50	; 0x32
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	431a      	orrs	r2, r3
 8000908:	2333      	movs	r3, #51	; 0x33
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	4313      	orrs	r3, r2
 800090e:	2234      	movs	r2, #52	; 0x34
 8000910:	ea43 0102 	orr.w	r1, r3, r2
 8000914:	2354      	movs	r3, #84	; 0x54
 8000916:	061a      	lsls	r2, r3, #24
 8000918:	2345      	movs	r3, #69	; 0x45
 800091a:	041b      	lsls	r3, r3, #16
 800091c:	431a      	orrs	r2, r3
 800091e:	2353      	movs	r3, #83	; 0x53
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	4313      	orrs	r3, r2
 8000924:	2254      	movs	r2, #84	; 0x54
 8000926:	431a      	orrs	r2, r3
 8000928:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <main+0x2b8>)
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <main+0x2bc>)
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <main+0x2c0>)
 8000932:	2004      	movs	r0, #4
 8000934:	f7ff fdb2 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "AnotherTest DLT Again",0);
 8000938:	2331      	movs	r3, #49	; 0x31
 800093a:	061a      	lsls	r2, r3, #24
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	041b      	lsls	r3, r3, #16
 8000940:	431a      	orrs	r2, r3
 8000942:	2333      	movs	r3, #51	; 0x33
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	4313      	orrs	r3, r2
 8000948:	2234      	movs	r2, #52	; 0x34
 800094a:	ea43 0102 	orr.w	r1, r3, r2
 800094e:	2354      	movs	r3, #84	; 0x54
 8000950:	061a      	lsls	r2, r3, #24
 8000952:	2345      	movs	r3, #69	; 0x45
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	431a      	orrs	r2, r3
 8000958:	2353      	movs	r3, #83	; 0x53
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	4313      	orrs	r3, r2
 800095e:	2254      	movs	r2, #84	; 0x54
 8000960:	431a      	orrs	r2, r3
 8000962:	2300      	movs	r3, #0
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <main+0x2c4>)
 8000968:	2004      	movs	r0, #4
 800096a:	f7ff fd97 	bl	800049c <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "AnotherTest2 DLT Again",0);
 800096e:	2331      	movs	r3, #49	; 0x31
 8000970:	061a      	lsls	r2, r3, #24
 8000972:	2332      	movs	r3, #50	; 0x32
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	431a      	orrs	r2, r3
 8000978:	2333      	movs	r3, #51	; 0x33
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	4313      	orrs	r3, r2
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	ea43 0102 	orr.w	r1, r3, r2
 8000984:	2354      	movs	r3, #84	; 0x54
 8000986:	061a      	lsls	r2, r3, #24
 8000988:	2345      	movs	r3, #69	; 0x45
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	431a      	orrs	r2, r3
 800098e:	2353      	movs	r3, #83	; 0x53
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	4313      	orrs	r3, r2
 8000994:	2254      	movs	r2, #84	; 0x54
 8000996:	431a      	orrs	r2, r3
 8000998:	2300      	movs	r3, #0
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <main+0x2c8>)
 800099e:	2004      	movs	r0, #4
 80009a0:	f7ff fd7c 	bl	800049c <DLTuc_LogOutVarArgs>
	  HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a8:	f000 fb58 	bl	800105c <HAL_Delay>
	  DEBUGL(DL_INFO, "Orange is sweet fruit");
 80009ac:	2331      	movs	r3, #49	; 0x31
 80009ae:	061a      	lsls	r2, r3, #24
 80009b0:	2332      	movs	r3, #50	; 0x32
 80009b2:	041b      	lsls	r3, r3, #16
 80009b4:	431a      	orrs	r2, r3
 80009b6:	2333      	movs	r3, #51	; 0x33
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	4313      	orrs	r3, r2
 80009bc:	2234      	movs	r2, #52	; 0x34
 80009be:	ea43 0102 	orr.w	r1, r3, r2
 80009c2:	2354      	movs	r3, #84	; 0x54
 80009c4:	061a      	lsls	r2, r3, #24
 80009c6:	2345      	movs	r3, #69	; 0x45
 80009c8:	041b      	lsls	r3, r3, #16
 80009ca:	431a      	orrs	r2, r3
 80009cc:	2353      	movs	r3, #83	; 0x53
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	4313      	orrs	r3, r2
 80009d2:	2254      	movs	r2, #84	; 0x54
 80009d4:	431a      	orrs	r2, r3
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x2cc>)
 80009d8:	2004      	movs	r0, #4
 80009da:	f7ff fd5f 	bl	800049c <DLTuc_LogOutVarArgs>
	  HAL_Delay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f000 fb3b 	bl	800105c <HAL_Delay>
	  DEBUGL(DL_INFO, "Hello DLT Again %d Arg1 %d Arg2 :%d" , 2565, 56,23);
 80009e6:	e76a      	b.n	80008be <main+0x16e>
 80009e8:	08000729 	.word	0x08000729
 80009ec:	200010f4 	.word	0x200010f4
 80009f0:	080042b4 	.word	0x080042b4
 80009f4:	080042d0 	.word	0x080042d0
 80009f8:	080042ec 	.word	0x080042ec
 80009fc:	08004304 	.word	0x08004304
 8000a00:	08004320 	.word	0x08004320
 8000a04:	0800433c 	.word	0x0800433c
 8000a08:	0800438c 	.word	0x0800438c
 8000a0c:	080043f8 	.word	0x080043f8
 8000a10:	08004360 	.word	0x08004360
 8000a14:	080043a0 	.word	0x080043a0
 8000a18:	080043b8 	.word	0x080043b8
 8000a1c:	080043d0 	.word	0x080043d0

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b090      	sub	sp, #64	; 0x40
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 ffb2 	bl	8003998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a46:	2301      	movs	r3, #1
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a56:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f889 	bl	8001b78 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a6c:	f000 f819 	bl	8000aa2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 faf6 	bl	800207c <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a96:	f000 f804 	bl	8000aa2 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3740      	adds	r7, #64	; 0x40
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa6:	b672      	cpsid	i
}
 8000aa8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_MspInit+0x60>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_MspInit+0x60>)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f7ff fdc7 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f000 ffe6 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 ffdf 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <DMA1_Channel6_IRQHandler+0x10>)
 8000b82:	f000 fd07 	bl	8001594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200011c4 	.word	0x200011c4

08000b90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <DMA1_Channel7_IRQHandler+0x10>)
 8000b96:	f000 fcfd 	bl	8001594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20001180 	.word	0x20001180

08000ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <USART2_IRQHandler+0x10>)
 8000baa:	f002 fa87 	bl	80030bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000113c 	.word	0x2000113c

08000bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc0:	f000 ffb8 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f002 fea4 	bl	8003944 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20005000 	.word	0x20005000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200010f0 	.word	0x200010f0
 8000c30:	20001220 	.word	0x20001220

08000c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c72:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <MX_TIM4_Init+0x100>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c78:	223f      	movs	r2, #63	; 0x3f
 8000c7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c96:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000c98:	f001 fb88 	bl	80023ac <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ca2:	f7ff fefe 	bl	8000aa2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4822      	ldr	r0, [pc, #136]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000cb4:	f001 fd82 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cbe:	f7ff fef0 	bl	8000aa2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000cc4:	f001 fbc1 	bl	800244a <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000cce:	f7ff fee8 	bl	8000aa2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4816      	ldr	r0, [pc, #88]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000ce2:	f002 f8d3 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000cec:	f7ff fed9 	bl	8000aa2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	; 0x60
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000d08:	f001 fc9a 	bl	8002640 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d12:	f7ff fec6 	bl	8000aa2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2208      	movs	r2, #8
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000d1e:	f001 fc8f 	bl	8002640 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d28:	f7ff febb 	bl	8000aa2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM4_Init+0xfc>)
 8000d2e:	f000 f827 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200010f4 	.word	0x200010f4
 8000d40:	40000800 	.word	0x40000800

08000d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <HAL_TIM_Base_MspInit+0x34>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10b      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x38>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_TIM_Base_MspInit+0x38>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_TIM_Base_MspInit+0x38>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40000800 	.word	0x40000800
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_TIM_MspPostInit+0x5c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d118      	bne.n	8000dd2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_TIM_MspPostInit+0x60>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_TIM_MspPostInit+0x60>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_TIM_MspPostInit+0x60>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000db8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000dce:	f000 fd15 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40000800 	.word	0x40000800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <MX_USART2_UART_Init+0x50>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USART2_UART_Init+0x4c>)
 8000e20:	f002 f892 	bl	8002f48 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2a:	f7ff fe3a 	bl	8000aa2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000113c 	.word	0x2000113c
 8000e38:	40004400 	.word	0x40004400

08000e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a3f      	ldr	r2, [pc, #252]	; (8000f54 <HAL_UART_MspInit+0x118>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d177      	bne.n	8000f4c <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <HAL_UART_MspInit+0x11c>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a3d      	ldr	r2, [pc, #244]	; (8000f58 <HAL_UART_MspInit+0x11c>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <HAL_UART_MspInit+0x11c>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_UART_MspInit+0x11c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a37      	ldr	r2, [pc, #220]	; (8000f58 <HAL_UART_MspInit+0x11c>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_UART_MspInit+0x11c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482f      	ldr	r0, [pc, #188]	; (8000f5c <HAL_UART_MspInit+0x120>)
 8000ea0:	f000 fcac 	bl	80017fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ea4:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_UART_MspInit+0x128>)
 8000ea8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ed4:	4822      	ldr	r0, [pc, #136]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ed6:	f000 f9f3 	bl	80012c0 <HAL_DMA_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8000ee0:	f7ff fddf 	bl	8000aa2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_UART_MspInit+0x130>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f22:	f000 f9cd 	bl	80012c0 <HAL_DMA_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000f2c:	f7ff fdb9 	bl	8000aa2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2026      	movs	r0, #38	; 0x26
 8000f42:	f000 f986 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f46:	2026      	movs	r0, #38	; 0x26
 8000f48:	f000 f99f 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	20001180 	.word	0x20001180
 8000f64:	40020080 	.word	0x40020080
 8000f68:	200011c4 	.word	0x200011c4
 8000f6c:	4002006c 	.word	0x4002006c

08000f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f96:	f7ff fe4d 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 fcd9 	bl	8003950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff fbd7 	bl	8000750 <main>
  bx lr
 8000fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fac:	08004454 	.word	0x08004454
  ldr r2, =_sbss
 8000fb0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000fb4:	2000121c 	.word	0x2000121c

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x28>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x28>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f935 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fd68 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f94d 	bl	80012a6 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f915 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000014 	.word	0x20000014
 8001040:	2000001c 	.word	0x2000001c
 8001044:	20000018 	.word	0x20000018

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20001208 	.word	0x20001208

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff fff0 	bl	8001048 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffe0 	bl	8001048 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000001c 	.word	0x2000001c

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4906      	ldr	r1, [pc, #24]	; (800113c <__NVIC_EnableIRQ+0x34>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff90 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff2d 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff42 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff90 	bl	8001194 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5f 	bl	8001140 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff35 	bl	8001108 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e043      	b.n	800135e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_DMA_Init+0xa8>)
 80012de:	4413      	add	r3, r2
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <HAL_DMA_Init+0xac>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	009a      	lsls	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_DMA_Init+0xb0>)
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800130a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800130e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	bffdfff8 	.word	0xbffdfff8
 800136c:	cccccccd 	.word	0xcccccccd
 8001370:	40020000 	.word	0x40020000

08001374 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Start_IT+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e04a      	b.n	800142a <HAL_DMA_Start_IT+0xb6>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d13a      	bne.n	800141c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f9e8 	bl	80017a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 020e 	orr.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e00f      	b.n	800140a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0204 	bic.w	r2, r2, #4
 80013f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 020a 	orr.w	r2, r2, #10
 8001408:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e005      	b.n	8001428 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001424:	2302      	movs	r3, #2
 8001426:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001444:	2b02      	cmp	r3, #2
 8001446:	d008      	beq.n	800145a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e020      	b.n	800149c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 020e 	bic.w	r2, r2, #14
 8001468:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d005      	beq.n	80014ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2204      	movs	r2, #4
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e051      	b.n	800156e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 020e 	bic.w	r2, r2, #14
 80014d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a22      	ldr	r2, [pc, #136]	; (8001578 <HAL_DMA_Abort_IT+0xd0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d029      	beq.n	8001548 <HAL_DMA_Abort_IT+0xa0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a20      	ldr	r2, [pc, #128]	; (800157c <HAL_DMA_Abort_IT+0xd4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d022      	beq.n	8001544 <HAL_DMA_Abort_IT+0x9c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_DMA_Abort_IT+0xd8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d01a      	beq.n	800153e <HAL_DMA_Abort_IT+0x96>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_DMA_Abort_IT+0xdc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d012      	beq.n	8001538 <HAL_DMA_Abort_IT+0x90>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_DMA_Abort_IT+0xe0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00a      	beq.n	8001532 <HAL_DMA_Abort_IT+0x8a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_DMA_Abort_IT+0xe4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d102      	bne.n	800152c <HAL_DMA_Abort_IT+0x84>
 8001526:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800152a:	e00e      	b.n	800154a <HAL_DMA_Abort_IT+0xa2>
 800152c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001530:	e00b      	b.n	800154a <HAL_DMA_Abort_IT+0xa2>
 8001532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001536:	e008      	b.n	800154a <HAL_DMA_Abort_IT+0xa2>
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	e005      	b.n	800154a <HAL_DMA_Abort_IT+0xa2>
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001542:	e002      	b.n	800154a <HAL_DMA_Abort_IT+0xa2>
 8001544:	2310      	movs	r3, #16
 8001546:	e000      	b.n	800154a <HAL_DMA_Abort_IT+0xa2>
 8001548:	2301      	movs	r3, #1
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_DMA_Abort_IT+0xe8>)
 800154c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
    } 
  }
  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40020008 	.word	0x40020008
 800157c:	4002001c 	.word	0x4002001c
 8001580:	40020030 	.word	0x40020030
 8001584:	40020044 	.word	0x40020044
 8001588:	40020058 	.word	0x40020058
 800158c:	4002006c 	.word	0x4002006c
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2204      	movs	r2, #4
 80015b2:	409a      	lsls	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d04f      	beq.n	800165c <HAL_DMA_IRQHandler+0xc8>
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d04a      	beq.n	800165c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0204 	bic.w	r2, r2, #4
 80015e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a66      	ldr	r2, [pc, #408]	; (8001784 <HAL_DMA_IRQHandler+0x1f0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d029      	beq.n	8001642 <HAL_DMA_IRQHandler+0xae>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_DMA_IRQHandler+0x1f4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d022      	beq.n	800163e <HAL_DMA_IRQHandler+0xaa>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a63      	ldr	r2, [pc, #396]	; (800178c <HAL_DMA_IRQHandler+0x1f8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01a      	beq.n	8001638 <HAL_DMA_IRQHandler+0xa4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a62      	ldr	r2, [pc, #392]	; (8001790 <HAL_DMA_IRQHandler+0x1fc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <HAL_DMA_IRQHandler+0x9e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a60      	ldr	r2, [pc, #384]	; (8001794 <HAL_DMA_IRQHandler+0x200>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <HAL_DMA_IRQHandler+0x98>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <HAL_DMA_IRQHandler+0x204>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_DMA_IRQHandler+0x92>
 8001620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001624:	e00e      	b.n	8001644 <HAL_DMA_IRQHandler+0xb0>
 8001626:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800162a:	e00b      	b.n	8001644 <HAL_DMA_IRQHandler+0xb0>
 800162c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001630:	e008      	b.n	8001644 <HAL_DMA_IRQHandler+0xb0>
 8001632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001636:	e005      	b.n	8001644 <HAL_DMA_IRQHandler+0xb0>
 8001638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163c:	e002      	b.n	8001644 <HAL_DMA_IRQHandler+0xb0>
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	e000      	b.n	8001644 <HAL_DMA_IRQHandler+0xb0>
 8001642:	2304      	movs	r3, #4
 8001644:	4a55      	ldr	r2, [pc, #340]	; (800179c <HAL_DMA_IRQHandler+0x208>)
 8001646:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8094 	beq.w	800177a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800165a:	e08e      	b.n	800177a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2202      	movs	r2, #2
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d056      	beq.n	800171a <HAL_DMA_IRQHandler+0x186>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d051      	beq.n	800171a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10b      	bne.n	800169c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 020a 	bic.w	r2, r2, #10
 8001692:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a38      	ldr	r2, [pc, #224]	; (8001784 <HAL_DMA_IRQHandler+0x1f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d029      	beq.n	80016fa <HAL_DMA_IRQHandler+0x166>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a37      	ldr	r2, [pc, #220]	; (8001788 <HAL_DMA_IRQHandler+0x1f4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d022      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x162>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a35      	ldr	r2, [pc, #212]	; (800178c <HAL_DMA_IRQHandler+0x1f8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x15c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a34      	ldr	r2, [pc, #208]	; (8001790 <HAL_DMA_IRQHandler+0x1fc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d012      	beq.n	80016ea <HAL_DMA_IRQHandler+0x156>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_DMA_IRQHandler+0x200>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00a      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x150>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a31      	ldr	r2, [pc, #196]	; (8001798 <HAL_DMA_IRQHandler+0x204>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d102      	bne.n	80016de <HAL_DMA_IRQHandler+0x14a>
 80016d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016dc:	e00e      	b.n	80016fc <HAL_DMA_IRQHandler+0x168>
 80016de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e2:	e00b      	b.n	80016fc <HAL_DMA_IRQHandler+0x168>
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	e008      	b.n	80016fc <HAL_DMA_IRQHandler+0x168>
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	e005      	b.n	80016fc <HAL_DMA_IRQHandler+0x168>
 80016f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f4:	e002      	b.n	80016fc <HAL_DMA_IRQHandler+0x168>
 80016f6:	2320      	movs	r3, #32
 80016f8:	e000      	b.n	80016fc <HAL_DMA_IRQHandler+0x168>
 80016fa:	2302      	movs	r3, #2
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <HAL_DMA_IRQHandler+0x208>)
 80016fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d034      	beq.n	800177a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001718:	e02f      	b.n	800177a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2208      	movs	r2, #8
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d028      	beq.n	800177c <HAL_DMA_IRQHandler+0x1e8>
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 020e 	bic.w	r2, r2, #14
 8001742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
    }
  }
  return;
 800177a:	bf00      	nop
 800177c:	bf00      	nop
}
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020008 	.word	0x40020008
 8001788:	4002001c 	.word	0x4002001c
 800178c:	40020030 	.word	0x40020030
 8001790:	40020044 	.word	0x40020044
 8001794:	40020058 	.word	0x40020058
 8001798:	4002006c 	.word	0x4002006c
 800179c:	40020000 	.word	0x40020000

080017a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d108      	bne.n	80017e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017de:	e007      	b.n	80017f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e169      	b.n	8001ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001810:	2201      	movs	r2, #1
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8158 	bne.w	8001ade <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a9a      	ldr	r2, [pc, #616]	; (8001a9c <HAL_GPIO_Init+0x2a0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d05e      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001838:	4a98      	ldr	r2, [pc, #608]	; (8001a9c <HAL_GPIO_Init+0x2a0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d875      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800183e:	4a98      	ldr	r2, [pc, #608]	; (8001aa0 <HAL_GPIO_Init+0x2a4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d058      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001844:	4a96      	ldr	r2, [pc, #600]	; (8001aa0 <HAL_GPIO_Init+0x2a4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d86f      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800184a:	4a96      	ldr	r2, [pc, #600]	; (8001aa4 <HAL_GPIO_Init+0x2a8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d052      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001850:	4a94      	ldr	r2, [pc, #592]	; (8001aa4 <HAL_GPIO_Init+0x2a8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d869      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001856:	4a94      	ldr	r2, [pc, #592]	; (8001aa8 <HAL_GPIO_Init+0x2ac>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d04c      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 800185c:	4a92      	ldr	r2, [pc, #584]	; (8001aa8 <HAL_GPIO_Init+0x2ac>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d863      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001862:	4a92      	ldr	r2, [pc, #584]	; (8001aac <HAL_GPIO_Init+0x2b0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d046      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001868:	4a90      	ldr	r2, [pc, #576]	; (8001aac <HAL_GPIO_Init+0x2b0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d85d      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d82a      	bhi.n	80018c8 <HAL_GPIO_Init+0xcc>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d859      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_GPIO_Init+0x80>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080018f7 	.word	0x080018f7
 8001880:	080018d1 	.word	0x080018d1
 8001884:	080018e3 	.word	0x080018e3
 8001888:	08001925 	.word	0x08001925
 800188c:	0800192b 	.word	0x0800192b
 8001890:	0800192b 	.word	0x0800192b
 8001894:	0800192b 	.word	0x0800192b
 8001898:	0800192b 	.word	0x0800192b
 800189c:	0800192b 	.word	0x0800192b
 80018a0:	0800192b 	.word	0x0800192b
 80018a4:	0800192b 	.word	0x0800192b
 80018a8:	0800192b 	.word	0x0800192b
 80018ac:	0800192b 	.word	0x0800192b
 80018b0:	0800192b 	.word	0x0800192b
 80018b4:	0800192b 	.word	0x0800192b
 80018b8:	0800192b 	.word	0x0800192b
 80018bc:	0800192b 	.word	0x0800192b
 80018c0:	080018d9 	.word	0x080018d9
 80018c4:	080018ed 	.word	0x080018ed
 80018c8:	4a79      	ldr	r2, [pc, #484]	; (8001ab0 <HAL_GPIO_Init+0x2b4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ce:	e02c      	b.n	800192a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e029      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e024      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	3308      	adds	r3, #8
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e01f      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	330c      	adds	r3, #12
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e01a      	b.n	800192c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fe:	2304      	movs	r3, #4
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e013      	b.n	800192c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	611a      	str	r2, [r3, #16]
          break;
 8001916:	e009      	b.n	800192c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	615a      	str	r2, [r3, #20]
          break;
 8001922:	e003      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x130>
          break;
 800192a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2bff      	cmp	r3, #255	; 0xff
 8001930:	d801      	bhi.n	8001936 <HAL_GPIO_Init+0x13a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <HAL_GPIO_Init+0x13e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d802      	bhi.n	8001948 <HAL_GPIO_Init+0x14c>
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x152>
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	3b08      	subs	r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	210f      	movs	r1, #15
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80b1 	beq.w	8001ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_GPIO_Init+0x2b8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x2b8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001994:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_GPIO_Init+0x2bc>)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a40      	ldr	r2, [pc, #256]	; (8001abc <HAL_GPIO_Init+0x2c0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x1ec>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_GPIO_Init+0x2c4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1e8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <HAL_GPIO_Init+0x2c8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1e4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <HAL_GPIO_Init+0x2cc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1e0>
 80019d8:	2303      	movs	r3, #3
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019dc:	2304      	movs	r3, #4
 80019de:	e004      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019e8:	2300      	movs	r3, #0
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	f002 0203 	and.w	r2, r2, #3
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	4093      	lsls	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fa:	492f      	ldr	r1, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x2bc>)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	492c      	ldr	r1, [pc, #176]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4928      	ldr	r1, [pc, #160]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4922      	ldr	r1, [pc, #136]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	491e      	ldr	r1, [pc, #120]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4918      	ldr	r1, [pc, #96]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4914      	ldr	r1, [pc, #80]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d021      	beq.n	8001ad0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
 8001a98:	e021      	b.n	8001ade <HAL_GPIO_Init+0x2e2>
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40011400 	.word	0x40011400
 8001acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	4909      	ldr	r1, [pc, #36]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f47f ae8e 	bne.w	8001810 <HAL_GPIO_Init+0x14>
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	372c      	adds	r7, #44	; 0x2c
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f806 	bl	8001b64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e272      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8087 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b98:	4b92      	ldr	r3, [pc, #584]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d00c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba4:	4b8f      	ldr	r3, [pc, #572]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d112      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x5e>
 8001bb0:	4b8c      	ldr	r3, [pc, #560]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbe:	4b89      	ldr	r3, [pc, #548]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d06c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x12c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d168      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e24c      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x76>
 8001be0:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a7f      	ldr	r2, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e02e      	b.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x98>
 8001bf6:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7a      	ldr	r2, [pc, #488]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a77      	ldr	r2, [pc, #476]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0xbc>
 8001c1a:	4b72      	ldr	r3, [pc, #456]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a71      	ldr	r2, [pc, #452]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6f      	ldr	r3, [pc, #444]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6e      	ldr	r2, [pc, #440]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001c34:	4b6b      	ldr	r3, [pc, #428]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a67      	ldr	r2, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f9f8 	bl	8001048 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f9f4 	bl	8001048 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e200      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe4>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9e4 	bl	8001048 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff f9e0 	bl	8001048 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1ec      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x10c>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x18c>
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x176>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1c0      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4939      	ldr	r1, [pc, #228]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff f999 	bl	8001048 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f995 	bl	8001048 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1a1      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4927      	ldr	r1, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f978 	bl	8001048 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f974 	bl	8001048 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e180      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d03a      	beq.n	8001dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d019      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_RCC_OscConfig+0x274>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff f958 	bl	8001048 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f954 	bl	8001048 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e160      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 fad8 	bl	8002370 <RCC_Delay>
 8001dc0:	e01c      	b.n	8001dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_OscConfig+0x274>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f93e 	bl	8001048 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	e00f      	b.n	8001df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f93a 	bl	8001048 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d908      	bls.n	8001df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e146      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	42420000 	.word	0x42420000
 8001dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e9      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a6 	beq.w	8001f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10d      	bne.n	8001e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a87      	ldr	r2, [pc, #540]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e42:	4b7f      	ldr	r3, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7e      	ldr	r2, [pc, #504]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f8fb 	bl	8001048 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff f8f7 	bl	8001048 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	; 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e103      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b75      	ldr	r3, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x4c8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x312>
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e02d      	b.n	8001ee6 <HAL_RCC_OscConfig+0x36e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x334>
 8001e92:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a66      	ldr	r2, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	e01c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x36e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_OscConfig+0x356>
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a60      	ldr	r2, [pc, #384]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e00b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x36e>
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d015      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7ff f8ab 	bl	8001048 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff f8a7 	bl	8001048 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0b1      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ee      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x37e>
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f895 	bl	8001048 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f891 	bl	8001048 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e09b      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d105      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4a:	4b3c      	ldr	r3, [pc, #240]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8087 	beq.w	800206e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d061      	beq.n	8002030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d146      	bne.n	8002002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f865 	bl	8001048 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff f861 	bl	8001048 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e06d      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	4921      	ldr	r1, [pc, #132]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a19      	ldr	r1, [r3, #32]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff f835 	bl	8001048 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff f831 	bl	8001048 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e03d      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x46a>
 8002000:	e035      	b.n	800206e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f81e 	bl	8001048 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f81a 	bl	8001048 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e026      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x4c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x498>
 800202e:	e01e      	b.n	800206e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e019      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
 8002044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x500>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d0      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4965      	ldr	r1, [pc, #404]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b8      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d040      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e073      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06b      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7fe ff6c 	bl	8001048 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe ff68 	bl	8001048 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e053      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d210      	bcs.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e032      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220a:	f000 f821 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800220e:	4602      	mov	r2, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	490a      	ldr	r1, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fedc 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	08004400 	.word	0x08004400
 8002248:	20000014 	.word	0x20000014
 800224c:	20000018 	.word	0x20000018

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b490      	push	{r4, r7}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002258:	1d3c      	adds	r4, r7, #4
 800225a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002260:	f240 2301 	movw	r3, #513	; 0x201
 8002264:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb0>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x40>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x46>
 800228e:	e02b      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	e02b      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0c9b      	lsrs	r3, r3, #18
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3328      	adds	r3, #40	; 0x28
 80022a0:	443b      	add	r3, r7
 80022a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0c5b      	lsrs	r3, r3, #17
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	443b      	add	r3, r7
 80022c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ca:	fb03 f202 	mul.w	r2, r3, r2
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e004      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	623b      	str	r3, [r7, #32]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ea:	623b      	str	r3, [r7, #32]
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	6a3b      	ldr	r3, [r7, #32]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc90      	pop	{r4, r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	080043e8 	.word	0x080043e8
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	003d0900 	.word	0x003d0900

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <HAL_RCC_GetHCLKFreq+0x10>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000014 	.word	0x20000014

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002324:	f7ff fff2 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	08004410 	.word	0x08004410

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800234c:	f7ff ffde 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	0adb      	lsrs	r3, r3, #11
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	08004410 	.word	0x08004410

08002370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <RCC_Delay+0x34>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <RCC_Delay+0x38>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a5b      	lsrs	r3, r3, #9
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800238c:	bf00      	nop
  }
  while (Delay --);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	60fa      	str	r2, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <RCC_Delay+0x1c>
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000014 	.word	0x20000014
 80023a8:	10624dd3 	.word	0x10624dd3

080023ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e041      	b.n	8002442 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fcb6 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f000 faaa 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e041      	b.n	80024e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f839 	bl	80024e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f000 fa5b 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_TIM_PWM_Start+0x24>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e022      	b.n	8002566 <HAL_TIM_PWM_Start+0x6a>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b04      	cmp	r3, #4
 8002524:	d109      	bne.n	800253a <HAL_TIM_PWM_Start+0x3e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e015      	b.n	8002566 <HAL_TIM_PWM_Start+0x6a>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d109      	bne.n	8002554 <HAL_TIM_PWM_Start+0x58>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e008      	b.n	8002566 <HAL_TIM_PWM_Start+0x6a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e05e      	b.n	800262c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0x82>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800257c:	e013      	b.n	80025a6 <HAL_TIM_PWM_Start+0xaa>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0x92>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258c:	e00b      	b.n	80025a6 <HAL_TIM_PWM_Start+0xaa>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d104      	bne.n	800259e <HAL_TIM_PWM_Start+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	e003      	b.n	80025a6 <HAL_TIM_PWM_Start+0xaa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2201      	movs	r2, #1
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fc48 	bl	8002e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_TIM_PWM_Start+0x138>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_TIM_PWM_Start+0x138>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_TIM_PWM_Start+0xfa>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d009      	beq.n	80025f6 <HAL_TIM_PWM_Start+0xfa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_TIM_PWM_Start+0x13c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIM_PWM_Start+0xfa>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_TIM_PWM_Start+0x140>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d111      	bne.n	800261a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d010      	beq.n	800262a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002618:	e007      	b.n	800262a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800

08002640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002656:	2302      	movs	r3, #2
 8002658:	e0ac      	b.n	80027b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	f200 809f 	bhi.w	80027a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800266a:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	080026a5 	.word	0x080026a5
 8002674:	080027a9 	.word	0x080027a9
 8002678:	080027a9 	.word	0x080027a9
 800267c:	080027a9 	.word	0x080027a9
 8002680:	080026e5 	.word	0x080026e5
 8002684:	080027a9 	.word	0x080027a9
 8002688:	080027a9 	.word	0x080027a9
 800268c:	080027a9 	.word	0x080027a9
 8002690:	08002727 	.word	0x08002727
 8002694:	080027a9 	.word	0x080027a9
 8002698:	080027a9 	.word	0x080027a9
 800269c:	080027a9 	.word	0x080027a9
 80026a0:	08002767 	.word	0x08002767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f9ac 	bl	8002a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0204 	bic.w	r2, r2, #4
 80026ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6999      	ldr	r1, [r3, #24]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	619a      	str	r2, [r3, #24]
      break;
 80026e2:	e062      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f9f2 	bl	8002ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6999      	ldr	r1, [r3, #24]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	619a      	str	r2, [r3, #24]
      break;
 8002724:	e041      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa3b 	bl	8002ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0208 	orr.w	r2, r2, #8
 8002740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0204 	bic.w	r2, r2, #4
 8002750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
      break;
 8002764:	e021      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa85 	bl	8002c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69d9      	ldr	r1, [r3, #28]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	021a      	lsls	r2, r3, #8
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
      break;
 80027a6:	e000      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80027a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIM_ConfigClockSource+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0b3      	b.n	800293c <HAL_TIM_ConfigClockSource+0x180>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280c:	d03e      	beq.n	800288c <HAL_TIM_ConfigClockSource+0xd0>
 800280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002812:	f200 8087 	bhi.w	8002924 <HAL_TIM_ConfigClockSource+0x168>
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	f000 8085 	beq.w	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d87f      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 8002824:	2b70      	cmp	r3, #112	; 0x70
 8002826:	d01a      	beq.n	800285e <HAL_TIM_ConfigClockSource+0xa2>
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d87b      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d050      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x116>
 8002830:	2b60      	cmp	r3, #96	; 0x60
 8002832:	d877      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b50      	cmp	r3, #80	; 0x50
 8002836:	d03c      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0xf6>
 8002838:	2b50      	cmp	r3, #80	; 0x50
 800283a:	d873      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d058      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x136>
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d86f      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 8002844:	2b30      	cmp	r3, #48	; 0x30
 8002846:	d064      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x156>
 8002848:	2b30      	cmp	r3, #48	; 0x30
 800284a:	d86b      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d060      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x156>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d867      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05c      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x156>
 8002858:	2b10      	cmp	r3, #16
 800285a:	d05a      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800285c:	e062      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f000 faca 	bl	8002e06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002880:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	609a      	str	r2, [r3, #8]
      break;
 800288a:	e04e      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f000 fab3 	bl	8002e06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ae:	609a      	str	r2, [r3, #8]
      break;
 80028b0:	e03b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	461a      	mov	r2, r3
 80028c0:	f000 fa2a 	bl	8002d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2150      	movs	r1, #80	; 0x50
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fa81 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e02b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 fa48 	bl	8002d74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2160      	movs	r1, #96	; 0x60
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fa71 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 80028f0:	e01b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	461a      	mov	r2, r3
 8002900:	f000 fa0a 	bl	8002d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fa61 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002910:	e00b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f000 fa58 	bl	8002dd2 <TIM_ITRx_SetConfig>
        break;
 8002922:	e002      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002924:	bf00      	nop
 8002926:	e000      	b.n	800292a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002928:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a29      	ldr	r2, [pc, #164]	; (80029fc <TIM_Base_SetConfig+0xb8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00b      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <TIM_Base_SetConfig+0xbc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <TIM_Base_SetConfig+0xc0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <TIM_Base_SetConfig+0xb8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00b      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <TIM_Base_SetConfig+0xbc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <TIM_Base_SetConfig+0xc0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <TIM_Base_SetConfig+0xb8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d103      	bne.n	80029ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	615a      	str	r2, [r3, #20]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800

08002a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <TIM_OC1_SetConfig+0xc8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10c      	bne.n	8002a7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0308 	bic.w	r3, r3, #8
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <TIM_OC1_SetConfig+0xc8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40012c00 	.word	0x40012c00

08002ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0210 	bic.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0320 	bic.w	r3, r3, #32
 8002b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <TIM_OC2_SetConfig+0xd0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10d      	bne.n	8002b50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <TIM_OC2_SetConfig+0xd0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d113      	bne.n	8002b80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00

08002ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <TIM_OC3_SetConfig+0xd0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10d      	bne.n	8002c22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <TIM_OC3_SetConfig+0xd0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d113      	bne.n	8002c52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	031b      	lsls	r3, r3, #12
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <TIM_OC4_SetConfig+0x98>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 030a 	bic.w	r3, r3, #10
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 0210 	bic.w	r2, r3, #16
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	031b      	lsls	r3, r3, #12
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f043 0307 	orr.w	r3, r3, #7
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	021a      	lsls	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	2201      	movs	r2, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e046      	b.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10c      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800

08002f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e03f      	b.n	8002fda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd ff64 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fc4b 	bl	8003828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d153      	bne.n	80030a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_UART_Transmit_DMA+0x26>
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e04c      	b.n	80030a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_UART_Transmit_DMA+0x38>
 8003018:	2302      	movs	r3, #2
 800301a:	e045      	b.n	80030a8 <HAL_UART_Transmit_DMA+0xc4>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	88fa      	ldrh	r2, [r7, #6]
 800302e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2221      	movs	r2, #33	; 0x21
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_UART_Transmit_DMA+0xcc>)
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_UART_Transmit_DMA+0xd0>)
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_UART_Transmit_DMA+0xd4>)
 800305a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	2200      	movs	r2, #0
 8003062:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3304      	adds	r3, #4
 8003078:	461a      	mov	r2, r3
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	f7fe f97a 	bl	8001374 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003088:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0800345d 	.word	0x0800345d
 80030b4:	080034af 	.word	0x080034af
 80030b8:	080034cb 	.word	0x080034cb

080030bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_UART_IRQHandler+0x52>
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fae5 	bl	80036d6 <UART_Receive_IT>
      return;
 800310c:	e17b      	b.n	8003406 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80b1 	beq.w	8003278 <HAL_UART_IRQHandler+0x1bc>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_UART_IRQHandler+0x70>
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a6 	beq.w	8003278 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_UART_IRQHandler+0x90>
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_UART_IRQHandler+0xb0>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_UART_IRQHandler+0xd0>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00f      	beq.n	80031b6 <HAL_UART_IRQHandler+0xfa>
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_UART_IRQHandler+0xee>
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0208 	orr.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 811e 	beq.w	80033fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_UART_IRQHandler+0x11e>
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fa7e 	bl	80036d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <HAL_UART_IRQHandler+0x146>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d031      	beq.n	8003266 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9c0 	bl	8003588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d023      	beq.n	800325e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	4a76      	ldr	r2, [pc, #472]	; (800340c <HAL_UART_IRQHandler+0x350>)
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe f934 	bl	80014a8 <HAL_DMA_Abort_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e00e      	b.n	8003274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8ec 	bl	8003434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00a      	b.n	8003274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8e8 	bl	8003434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e006      	b.n	8003274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8e4 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003272:	e0c3      	b.n	80033fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	bf00      	nop
    return;
 8003276:	e0c1      	b.n	80033fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 80a1 	bne.w	80033c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 809b 	beq.w	80033c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8095 	beq.w	80033c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04e      	beq.n	800335c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032c8:	8a3b      	ldrh	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8098 	beq.w	8003400 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d4:	8a3a      	ldrh	r2, [r7, #16]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f080 8092 	bcs.w	8003400 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8a3a      	ldrh	r2, [r7, #16]
 80032e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d02b      	beq.n	8003344 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0210 	bic.w	r2, r2, #16
 8003338:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe f877 	bl	8001432 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800334c:	b29b      	uxth	r3, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f876 	bl	8003446 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800335a:	e051      	b.n	8003400 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003364:	b29b      	uxth	r3, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d047      	beq.n	8003404 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003374:	8a7b      	ldrh	r3, [r7, #18]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d044      	beq.n	8003404 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003388:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0210 	bic.w	r2, r2, #16
 80033b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033b8:	8a7b      	ldrh	r3, [r7, #18]
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f842 	bl	8003446 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033c2:	e01f      	b.n	8003404 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_UART_IRQHandler+0x324>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f915 	bl	8003608 <UART_Transmit_IT>
    return;
 80033de:	e012      	b.n	8003406 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_UART_IRQHandler+0x34a>
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f956 	bl	80036a6 <UART_EndTransmit_IT>
    return;
 80033fa:	e004      	b.n	8003406 <HAL_UART_IRQHandler+0x34a>
    return;
 80033fc:	bf00      	nop
 80033fe:	e002      	b.n	8003406 <HAL_UART_IRQHandler+0x34a>
      return;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <HAL_UART_IRQHandler+0x34a>
      return;
 8003404:	bf00      	nop
  }
}
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	080035e1 	.word	0x080035e1

08003410 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800349e:	e002      	b.n	80034a6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7fd f937 	bl	8000714 <HAL_UART_TxCpltCallback>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff ffa7 	bl	8003410 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b21      	cmp	r3, #33	; 0x21
 80034fc:	d108      	bne.n	8003510 <UART_DMAError+0x46>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800350a:	68b8      	ldr	r0, [r7, #8]
 800350c:	f000 f827 	bl	800355e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b22      	cmp	r3, #34	; 0x22
 8003530:	d108      	bne.n	8003544 <UART_DMAError+0x7a>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2200      	movs	r2, #0
 800353c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f000 f822 	bl	8003588 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003550:	68b8      	ldr	r0, [r7, #8]
 8003552:	f7ff ff6f 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003574:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800359e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0210 	bic.w	r2, r2, #16
 80035c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff ff1a 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b21      	cmp	r3, #33	; 0x21
 800361a:	d13e      	bne.n	800369a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d114      	bne.n	8003650 <UART_Transmit_IT+0x48>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d110      	bne.n	8003650 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]
 800364e:	e008      	b.n	8003662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	1c59      	adds	r1, r3, #1
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6211      	str	r1, [r2, #32]
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4619      	mov	r1, r3
 8003670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f824 	bl	8000714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b22      	cmp	r3, #34	; 0x22
 80036e8:	f040 8099 	bne.w	800381e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f4:	d117      	bne.n	8003726 <UART_Receive_IT+0x50>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d113      	bne.n	8003726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	b29b      	uxth	r3, r3
 8003710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003714:	b29a      	uxth	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
 8003724:	e026      	b.n	8003774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d007      	beq.n	800374a <UART_Receive_IT+0x74>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <UART_Receive_IT+0x82>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e008      	b.n	800376a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003764:	b2da      	uxtb	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4619      	mov	r1, r3
 8003782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003784:	2b00      	cmp	r3, #0
 8003786:	d148      	bne.n	800381a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0220 	bic.w	r2, r2, #32
 8003796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d123      	bne.n	8003810 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0210 	bic.w	r2, r2, #16
 80037dc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d10a      	bne.n	8003802 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fe1c 	bl	8003446 <HAL_UARTEx_RxEventCallback>
 800380e:	e002      	b.n	8003816 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fe06 	bl	8003422 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e002      	b.n	8003820 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003862:	f023 030c 	bic.w	r3, r3, #12
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	430b      	orrs	r3, r1
 800386e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2c      	ldr	r2, [pc, #176]	; (800393c <UART_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d103      	bne.n	8003898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7fe fd5a 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	e002      	b.n	800389e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7fe fd42 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 800389c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	4a22      	ldr	r2, [pc, #136]	; (8003940 <UART_SetConfig+0x118>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	0119      	lsls	r1, r3, #4
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009a      	lsls	r2, r3, #2
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <UART_SetConfig+0x118>)
 80038d6:	fba3 0302 	umull	r0, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2064      	movs	r0, #100	; 0x64
 80038de:	fb00 f303 	mul.w	r3, r0, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	3332      	adds	r3, #50	; 0x32
 80038e8:	4a15      	ldr	r2, [pc, #84]	; (8003940 <UART_SetConfig+0x118>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f4:	4419      	add	r1, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <UART_SetConfig+0x118>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <UART_SetConfig+0x118>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	440a      	add	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40013800 	.word	0x40013800
 8003940:	51eb851f 	.word	0x51eb851f

08003944 <__errno>:
 8003944:	4b01      	ldr	r3, [pc, #4]	; (800394c <__errno+0x8>)
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000020 	.word	0x20000020

08003950 <__libc_init_array>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	2600      	movs	r6, #0
 8003954:	4d0c      	ldr	r5, [pc, #48]	; (8003988 <__libc_init_array+0x38>)
 8003956:	4c0d      	ldr	r4, [pc, #52]	; (800398c <__libc_init_array+0x3c>)
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	42a6      	cmp	r6, r4
 800395e:	d109      	bne.n	8003974 <__libc_init_array+0x24>
 8003960:	f000 fc9c 	bl	800429c <_init>
 8003964:	2600      	movs	r6, #0
 8003966:	4d0a      	ldr	r5, [pc, #40]	; (8003990 <__libc_init_array+0x40>)
 8003968:	4c0a      	ldr	r4, [pc, #40]	; (8003994 <__libc_init_array+0x44>)
 800396a:	1b64      	subs	r4, r4, r5
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	42a6      	cmp	r6, r4
 8003970:	d105      	bne.n	800397e <__libc_init_array+0x2e>
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	f855 3b04 	ldr.w	r3, [r5], #4
 8003978:	4798      	blx	r3
 800397a:	3601      	adds	r6, #1
 800397c:	e7ee      	b.n	800395c <__libc_init_array+0xc>
 800397e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003982:	4798      	blx	r3
 8003984:	3601      	adds	r6, #1
 8003986:	e7f2      	b.n	800396e <__libc_init_array+0x1e>
 8003988:	0800444c 	.word	0x0800444c
 800398c:	0800444c 	.word	0x0800444c
 8003990:	0800444c 	.word	0x0800444c
 8003994:	08004450 	.word	0x08004450

08003998 <memset>:
 8003998:	4603      	mov	r3, r0
 800399a:	4402      	add	r2, r0
 800399c:	4293      	cmp	r3, r2
 800399e:	d100      	bne.n	80039a2 <memset+0xa>
 80039a0:	4770      	bx	lr
 80039a2:	f803 1b01 	strb.w	r1, [r3], #1
 80039a6:	e7f9      	b.n	800399c <memset+0x4>

080039a8 <_vsiprintf_r>:
 80039a8:	b500      	push	{lr}
 80039aa:	b09b      	sub	sp, #108	; 0x6c
 80039ac:	9100      	str	r1, [sp, #0]
 80039ae:	9104      	str	r1, [sp, #16]
 80039b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b4:	9105      	str	r1, [sp, #20]
 80039b6:	9102      	str	r1, [sp, #8]
 80039b8:	4905      	ldr	r1, [pc, #20]	; (80039d0 <_vsiprintf_r+0x28>)
 80039ba:	9103      	str	r1, [sp, #12]
 80039bc:	4669      	mov	r1, sp
 80039be:	f000 f86f 	bl	8003aa0 <_svfiprintf_r>
 80039c2:	2200      	movs	r2, #0
 80039c4:	9b00      	ldr	r3, [sp, #0]
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	b01b      	add	sp, #108	; 0x6c
 80039ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80039ce:	bf00      	nop
 80039d0:	ffff0208 	.word	0xffff0208

080039d4 <vsiprintf>:
 80039d4:	4613      	mov	r3, r2
 80039d6:	460a      	mov	r2, r1
 80039d8:	4601      	mov	r1, r0
 80039da:	4802      	ldr	r0, [pc, #8]	; (80039e4 <vsiprintf+0x10>)
 80039dc:	6800      	ldr	r0, [r0, #0]
 80039de:	f7ff bfe3 	b.w	80039a8 <_vsiprintf_r>
 80039e2:	bf00      	nop
 80039e4:	20000020 	.word	0x20000020

080039e8 <__ssputs_r>:
 80039e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	688e      	ldr	r6, [r1, #8]
 80039ee:	4682      	mov	sl, r0
 80039f0:	429e      	cmp	r6, r3
 80039f2:	460c      	mov	r4, r1
 80039f4:	4690      	mov	r8, r2
 80039f6:	461f      	mov	r7, r3
 80039f8:	d838      	bhi.n	8003a6c <__ssputs_r+0x84>
 80039fa:	898a      	ldrh	r2, [r1, #12]
 80039fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a00:	d032      	beq.n	8003a68 <__ssputs_r+0x80>
 8003a02:	6825      	ldr	r5, [r4, #0]
 8003a04:	6909      	ldr	r1, [r1, #16]
 8003a06:	3301      	adds	r3, #1
 8003a08:	eba5 0901 	sub.w	r9, r5, r1
 8003a0c:	6965      	ldr	r5, [r4, #20]
 8003a0e:	444b      	add	r3, r9
 8003a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a18:	106d      	asrs	r5, r5, #1
 8003a1a:	429d      	cmp	r5, r3
 8003a1c:	bf38      	it	cc
 8003a1e:	461d      	movcc	r5, r3
 8003a20:	0553      	lsls	r3, r2, #21
 8003a22:	d531      	bpl.n	8003a88 <__ssputs_r+0xa0>
 8003a24:	4629      	mov	r1, r5
 8003a26:	f000 fb6f 	bl	8004108 <_malloc_r>
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	b950      	cbnz	r0, 8003a44 <__ssputs_r+0x5c>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	f8ca 3000 	str.w	r3, [sl]
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a44:	464a      	mov	r2, r9
 8003a46:	6921      	ldr	r1, [r4, #16]
 8003a48:	f000 face 	bl	8003fe8 <memcpy>
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	81a3      	strh	r3, [r4, #12]
 8003a58:	6126      	str	r6, [r4, #16]
 8003a5a:	444e      	add	r6, r9
 8003a5c:	6026      	str	r6, [r4, #0]
 8003a5e:	463e      	mov	r6, r7
 8003a60:	6165      	str	r5, [r4, #20]
 8003a62:	eba5 0509 	sub.w	r5, r5, r9
 8003a66:	60a5      	str	r5, [r4, #8]
 8003a68:	42be      	cmp	r6, r7
 8003a6a:	d900      	bls.n	8003a6e <__ssputs_r+0x86>
 8003a6c:	463e      	mov	r6, r7
 8003a6e:	4632      	mov	r2, r6
 8003a70:	4641      	mov	r1, r8
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	f000 fac6 	bl	8004004 <memmove>
 8003a78:	68a3      	ldr	r3, [r4, #8]
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	1b9b      	subs	r3, r3, r6
 8003a7e:	60a3      	str	r3, [r4, #8]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	4433      	add	r3, r6
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	e7db      	b.n	8003a40 <__ssputs_r+0x58>
 8003a88:	462a      	mov	r2, r5
 8003a8a:	f000 fbb1 	bl	80041f0 <_realloc_r>
 8003a8e:	4606      	mov	r6, r0
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1e1      	bne.n	8003a58 <__ssputs_r+0x70>
 8003a94:	4650      	mov	r0, sl
 8003a96:	6921      	ldr	r1, [r4, #16]
 8003a98:	f000 face 	bl	8004038 <_free_r>
 8003a9c:	e7c7      	b.n	8003a2e <__ssputs_r+0x46>
	...

08003aa0 <_svfiprintf_r>:
 8003aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa4:	4698      	mov	r8, r3
 8003aa6:	898b      	ldrh	r3, [r1, #12]
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	460d      	mov	r5, r1
 8003aae:	4614      	mov	r4, r2
 8003ab0:	b09d      	sub	sp, #116	; 0x74
 8003ab2:	d50e      	bpl.n	8003ad2 <_svfiprintf_r+0x32>
 8003ab4:	690b      	ldr	r3, [r1, #16]
 8003ab6:	b963      	cbnz	r3, 8003ad2 <_svfiprintf_r+0x32>
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	f000 fb25 	bl	8004108 <_malloc_r>
 8003abe:	6028      	str	r0, [r5, #0]
 8003ac0:	6128      	str	r0, [r5, #16]
 8003ac2:	b920      	cbnz	r0, 8003ace <_svfiprintf_r+0x2e>
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	e0d1      	b.n	8003c72 <_svfiprintf_r+0x1d2>
 8003ace:	2340      	movs	r3, #64	; 0x40
 8003ad0:	616b      	str	r3, [r5, #20]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad6:	2320      	movs	r3, #32
 8003ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003adc:	2330      	movs	r3, #48	; 0x30
 8003ade:	f04f 0901 	mov.w	r9, #1
 8003ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ae6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c8c <_svfiprintf_r+0x1ec>
 8003aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aee:	4623      	mov	r3, r4
 8003af0:	469a      	mov	sl, r3
 8003af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003af6:	b10a      	cbz	r2, 8003afc <_svfiprintf_r+0x5c>
 8003af8:	2a25      	cmp	r2, #37	; 0x25
 8003afa:	d1f9      	bne.n	8003af0 <_svfiprintf_r+0x50>
 8003afc:	ebba 0b04 	subs.w	fp, sl, r4
 8003b00:	d00b      	beq.n	8003b1a <_svfiprintf_r+0x7a>
 8003b02:	465b      	mov	r3, fp
 8003b04:	4622      	mov	r2, r4
 8003b06:	4629      	mov	r1, r5
 8003b08:	4638      	mov	r0, r7
 8003b0a:	f7ff ff6d 	bl	80039e8 <__ssputs_r>
 8003b0e:	3001      	adds	r0, #1
 8003b10:	f000 80aa 	beq.w	8003c68 <_svfiprintf_r+0x1c8>
 8003b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b16:	445a      	add	r2, fp
 8003b18:	9209      	str	r2, [sp, #36]	; 0x24
 8003b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a2 	beq.w	8003c68 <_svfiprintf_r+0x1c8>
 8003b24:	2300      	movs	r3, #0
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b2e:	f10a 0a01 	add.w	sl, sl, #1
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	9307      	str	r3, [sp, #28]
 8003b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b3c:	4654      	mov	r4, sl
 8003b3e:	2205      	movs	r2, #5
 8003b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b44:	4851      	ldr	r0, [pc, #324]	; (8003c8c <_svfiprintf_r+0x1ec>)
 8003b46:	f000 fa41 	bl	8003fcc <memchr>
 8003b4a:	9a04      	ldr	r2, [sp, #16]
 8003b4c:	b9d8      	cbnz	r0, 8003b86 <_svfiprintf_r+0xe6>
 8003b4e:	06d0      	lsls	r0, r2, #27
 8003b50:	bf44      	itt	mi
 8003b52:	2320      	movmi	r3, #32
 8003b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b58:	0711      	lsls	r1, r2, #28
 8003b5a:	bf44      	itt	mi
 8003b5c:	232b      	movmi	r3, #43	; 0x2b
 8003b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b62:	f89a 3000 	ldrb.w	r3, [sl]
 8003b66:	2b2a      	cmp	r3, #42	; 0x2a
 8003b68:	d015      	beq.n	8003b96 <_svfiprintf_r+0xf6>
 8003b6a:	4654      	mov	r4, sl
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f04f 0c0a 	mov.w	ip, #10
 8003b72:	9a07      	ldr	r2, [sp, #28]
 8003b74:	4621      	mov	r1, r4
 8003b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b7a:	3b30      	subs	r3, #48	; 0x30
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	d94e      	bls.n	8003c1e <_svfiprintf_r+0x17e>
 8003b80:	b1b0      	cbz	r0, 8003bb0 <_svfiprintf_r+0x110>
 8003b82:	9207      	str	r2, [sp, #28]
 8003b84:	e014      	b.n	8003bb0 <_svfiprintf_r+0x110>
 8003b86:	eba0 0308 	sub.w	r3, r0, r8
 8003b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	46a2      	mov	sl, r4
 8003b92:	9304      	str	r3, [sp, #16]
 8003b94:	e7d2      	b.n	8003b3c <_svfiprintf_r+0x9c>
 8003b96:	9b03      	ldr	r3, [sp, #12]
 8003b98:	1d19      	adds	r1, r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	9103      	str	r1, [sp, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfbb      	ittet	lt
 8003ba2:	425b      	neglt	r3, r3
 8003ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba8:	9307      	strge	r3, [sp, #28]
 8003baa:	9307      	strlt	r3, [sp, #28]
 8003bac:	bfb8      	it	lt
 8003bae:	9204      	strlt	r2, [sp, #16]
 8003bb0:	7823      	ldrb	r3, [r4, #0]
 8003bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb4:	d10c      	bne.n	8003bd0 <_svfiprintf_r+0x130>
 8003bb6:	7863      	ldrb	r3, [r4, #1]
 8003bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bba:	d135      	bne.n	8003c28 <_svfiprintf_r+0x188>
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	3402      	adds	r4, #2
 8003bc0:	1d1a      	adds	r2, r3, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	9203      	str	r2, [sp, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfb8      	it	lt
 8003bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c90 <_svfiprintf_r+0x1f0>
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4650      	mov	r0, sl
 8003bd8:	7821      	ldrb	r1, [r4, #0]
 8003bda:	f000 f9f7 	bl	8003fcc <memchr>
 8003bde:	b140      	cbz	r0, 8003bf2 <_svfiprintf_r+0x152>
 8003be0:	2340      	movs	r3, #64	; 0x40
 8003be2:	eba0 000a 	sub.w	r0, r0, sl
 8003be6:	fa03 f000 	lsl.w	r0, r3, r0
 8003bea:	9b04      	ldr	r3, [sp, #16]
 8003bec:	3401      	adds	r4, #1
 8003bee:	4303      	orrs	r3, r0
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf6:	2206      	movs	r2, #6
 8003bf8:	4826      	ldr	r0, [pc, #152]	; (8003c94 <_svfiprintf_r+0x1f4>)
 8003bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bfe:	f000 f9e5 	bl	8003fcc <memchr>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d038      	beq.n	8003c78 <_svfiprintf_r+0x1d8>
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <_svfiprintf_r+0x1f8>)
 8003c08:	bb1b      	cbnz	r3, 8003c52 <_svfiprintf_r+0x1b2>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	3307      	adds	r3, #7
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	3308      	adds	r3, #8
 8003c14:	9303      	str	r3, [sp, #12]
 8003c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c18:	4433      	add	r3, r6
 8003c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c1c:	e767      	b.n	8003aee <_svfiprintf_r+0x4e>
 8003c1e:	460c      	mov	r4, r1
 8003c20:	2001      	movs	r0, #1
 8003c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c26:	e7a5      	b.n	8003b74 <_svfiprintf_r+0xd4>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f04f 0c0a 	mov.w	ip, #10
 8003c2e:	4619      	mov	r1, r3
 8003c30:	3401      	adds	r4, #1
 8003c32:	9305      	str	r3, [sp, #20]
 8003c34:	4620      	mov	r0, r4
 8003c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3a:	3a30      	subs	r2, #48	; 0x30
 8003c3c:	2a09      	cmp	r2, #9
 8003c3e:	d903      	bls.n	8003c48 <_svfiprintf_r+0x1a8>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0c5      	beq.n	8003bd0 <_svfiprintf_r+0x130>
 8003c44:	9105      	str	r1, [sp, #20]
 8003c46:	e7c3      	b.n	8003bd0 <_svfiprintf_r+0x130>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c50:	e7f0      	b.n	8003c34 <_svfiprintf_r+0x194>
 8003c52:	ab03      	add	r3, sp, #12
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	462a      	mov	r2, r5
 8003c58:	4638      	mov	r0, r7
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <_svfiprintf_r+0x1fc>)
 8003c5c:	a904      	add	r1, sp, #16
 8003c5e:	f3af 8000 	nop.w
 8003c62:	1c42      	adds	r2, r0, #1
 8003c64:	4606      	mov	r6, r0
 8003c66:	d1d6      	bne.n	8003c16 <_svfiprintf_r+0x176>
 8003c68:	89ab      	ldrh	r3, [r5, #12]
 8003c6a:	065b      	lsls	r3, r3, #25
 8003c6c:	f53f af2c 	bmi.w	8003ac8 <_svfiprintf_r+0x28>
 8003c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c72:	b01d      	add	sp, #116	; 0x74
 8003c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4638      	mov	r0, r7
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <_svfiprintf_r+0x1fc>)
 8003c82:	a904      	add	r1, sp, #16
 8003c84:	f000 f87c 	bl	8003d80 <_printf_i>
 8003c88:	e7eb      	b.n	8003c62 <_svfiprintf_r+0x1c2>
 8003c8a:	bf00      	nop
 8003c8c:	08004418 	.word	0x08004418
 8003c90:	0800441e 	.word	0x0800441e
 8003c94:	08004422 	.word	0x08004422
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	080039e9 	.word	0x080039e9

08003ca0 <_printf_common>:
 8003ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	688a      	ldr	r2, [r1, #8]
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	4607      	mov	r7, r0
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	bfb8      	it	lt
 8003cb2:	4613      	movlt	r3, r2
 8003cb4:	6033      	str	r3, [r6, #0]
 8003cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cba:	460c      	mov	r4, r1
 8003cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc0:	b10a      	cbz	r2, 8003cc6 <_printf_common+0x26>
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	0699      	lsls	r1, r3, #26
 8003cca:	bf42      	ittt	mi
 8003ccc:	6833      	ldrmi	r3, [r6, #0]
 8003cce:	3302      	addmi	r3, #2
 8003cd0:	6033      	strmi	r3, [r6, #0]
 8003cd2:	6825      	ldr	r5, [r4, #0]
 8003cd4:	f015 0506 	ands.w	r5, r5, #6
 8003cd8:	d106      	bne.n	8003ce8 <_printf_common+0x48>
 8003cda:	f104 0a19 	add.w	sl, r4, #25
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	6832      	ldr	r2, [r6, #0]
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	42ab      	cmp	r3, r5
 8003ce6:	dc28      	bgt.n	8003d3a <_printf_common+0x9a>
 8003ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cec:	1e13      	subs	r3, r2, #0
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	bf18      	it	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	0692      	lsls	r2, r2, #26
 8003cf6:	d42d      	bmi.n	8003d54 <_printf_common+0xb4>
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d00:	47c0      	blx	r8
 8003d02:	3001      	adds	r0, #1
 8003d04:	d020      	beq.n	8003d48 <_printf_common+0xa8>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	68e5      	ldr	r5, [r4, #12]
 8003d0a:	f003 0306 	and.w	r3, r3, #6
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf18      	it	ne
 8003d12:	2500      	movne	r5, #0
 8003d14:	6832      	ldr	r2, [r6, #0]
 8003d16:	f04f 0600 	mov.w	r6, #0
 8003d1a:	68a3      	ldr	r3, [r4, #8]
 8003d1c:	bf08      	it	eq
 8003d1e:	1aad      	subeq	r5, r5, r2
 8003d20:	6922      	ldr	r2, [r4, #16]
 8003d22:	bf08      	it	eq
 8003d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bfc4      	itt	gt
 8003d2c:	1a9b      	subgt	r3, r3, r2
 8003d2e:	18ed      	addgt	r5, r5, r3
 8003d30:	341a      	adds	r4, #26
 8003d32:	42b5      	cmp	r5, r6
 8003d34:	d11a      	bne.n	8003d6c <_printf_common+0xcc>
 8003d36:	2000      	movs	r0, #0
 8003d38:	e008      	b.n	8003d4c <_printf_common+0xac>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	4652      	mov	r2, sl
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4638      	mov	r0, r7
 8003d42:	47c0      	blx	r8
 8003d44:	3001      	adds	r0, #1
 8003d46:	d103      	bne.n	8003d50 <_printf_common+0xb0>
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d50:	3501      	adds	r5, #1
 8003d52:	e7c4      	b.n	8003cde <_printf_common+0x3e>
 8003d54:	2030      	movs	r0, #48	; 0x30
 8003d56:	18e1      	adds	r1, r4, r3
 8003d58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d62:	4422      	add	r2, r4
 8003d64:	3302      	adds	r3, #2
 8003d66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d6a:	e7c5      	b.n	8003cf8 <_printf_common+0x58>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4622      	mov	r2, r4
 8003d70:	4649      	mov	r1, r9
 8003d72:	4638      	mov	r0, r7
 8003d74:	47c0      	blx	r8
 8003d76:	3001      	adds	r0, #1
 8003d78:	d0e6      	beq.n	8003d48 <_printf_common+0xa8>
 8003d7a:	3601      	adds	r6, #1
 8003d7c:	e7d9      	b.n	8003d32 <_printf_common+0x92>
	...

08003d80 <_printf_i>:
 8003d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d84:	7e0f      	ldrb	r7, [r1, #24]
 8003d86:	4691      	mov	r9, r2
 8003d88:	2f78      	cmp	r7, #120	; 0x78
 8003d8a:	4680      	mov	r8, r0
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	469a      	mov	sl, r3
 8003d90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d96:	d807      	bhi.n	8003da8 <_printf_i+0x28>
 8003d98:	2f62      	cmp	r7, #98	; 0x62
 8003d9a:	d80a      	bhi.n	8003db2 <_printf_i+0x32>
 8003d9c:	2f00      	cmp	r7, #0
 8003d9e:	f000 80d9 	beq.w	8003f54 <_printf_i+0x1d4>
 8003da2:	2f58      	cmp	r7, #88	; 0x58
 8003da4:	f000 80a4 	beq.w	8003ef0 <_printf_i+0x170>
 8003da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db0:	e03a      	b.n	8003e28 <_printf_i+0xa8>
 8003db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003db6:	2b15      	cmp	r3, #21
 8003db8:	d8f6      	bhi.n	8003da8 <_printf_i+0x28>
 8003dba:	a101      	add	r1, pc, #4	; (adr r1, 8003dc0 <_printf_i+0x40>)
 8003dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e2d 	.word	0x08003e2d
 8003dc8:	08003da9 	.word	0x08003da9
 8003dcc:	08003da9 	.word	0x08003da9
 8003dd0:	08003da9 	.word	0x08003da9
 8003dd4:	08003da9 	.word	0x08003da9
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003da9 	.word	0x08003da9
 8003de0:	08003da9 	.word	0x08003da9
 8003de4:	08003da9 	.word	0x08003da9
 8003de8:	08003da9 	.word	0x08003da9
 8003dec:	08003f3b 	.word	0x08003f3b
 8003df0:	08003e5d 	.word	0x08003e5d
 8003df4:	08003f1d 	.word	0x08003f1d
 8003df8:	08003da9 	.word	0x08003da9
 8003dfc:	08003da9 	.word	0x08003da9
 8003e00:	08003f5d 	.word	0x08003f5d
 8003e04:	08003da9 	.word	0x08003da9
 8003e08:	08003e5d 	.word	0x08003e5d
 8003e0c:	08003da9 	.word	0x08003da9
 8003e10:	08003da9 	.word	0x08003da9
 8003e14:	08003f25 	.word	0x08003f25
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	1d1a      	adds	r2, r3, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	602a      	str	r2, [r5, #0]
 8003e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0a4      	b.n	8003f76 <_printf_i+0x1f6>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	6829      	ldr	r1, [r5, #0]
 8003e30:	0606      	lsls	r6, r0, #24
 8003e32:	f101 0304 	add.w	r3, r1, #4
 8003e36:	d50a      	bpl.n	8003e4e <_printf_i+0xce>
 8003e38:	680e      	ldr	r6, [r1, #0]
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	2e00      	cmp	r6, #0
 8003e3e:	da03      	bge.n	8003e48 <_printf_i+0xc8>
 8003e40:	232d      	movs	r3, #45	; 0x2d
 8003e42:	4276      	negs	r6, r6
 8003e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e48:	230a      	movs	r3, #10
 8003e4a:	485e      	ldr	r0, [pc, #376]	; (8003fc4 <_printf_i+0x244>)
 8003e4c:	e019      	b.n	8003e82 <_printf_i+0x102>
 8003e4e:	680e      	ldr	r6, [r1, #0]
 8003e50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	bf18      	it	ne
 8003e58:	b236      	sxthne	r6, r6
 8003e5a:	e7ef      	b.n	8003e3c <_printf_i+0xbc>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	1d19      	adds	r1, r3, #4
 8003e62:	6029      	str	r1, [r5, #0]
 8003e64:	0601      	lsls	r1, r0, #24
 8003e66:	d501      	bpl.n	8003e6c <_printf_i+0xec>
 8003e68:	681e      	ldr	r6, [r3, #0]
 8003e6a:	e002      	b.n	8003e72 <_printf_i+0xf2>
 8003e6c:	0646      	lsls	r6, r0, #25
 8003e6e:	d5fb      	bpl.n	8003e68 <_printf_i+0xe8>
 8003e70:	881e      	ldrh	r6, [r3, #0]
 8003e72:	2f6f      	cmp	r7, #111	; 0x6f
 8003e74:	bf0c      	ite	eq
 8003e76:	2308      	moveq	r3, #8
 8003e78:	230a      	movne	r3, #10
 8003e7a:	4852      	ldr	r0, [pc, #328]	; (8003fc4 <_printf_i+0x244>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e82:	6865      	ldr	r5, [r4, #4]
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	bfa8      	it	ge
 8003e88:	6821      	ldrge	r1, [r4, #0]
 8003e8a:	60a5      	str	r5, [r4, #8]
 8003e8c:	bfa4      	itt	ge
 8003e8e:	f021 0104 	bicge.w	r1, r1, #4
 8003e92:	6021      	strge	r1, [r4, #0]
 8003e94:	b90e      	cbnz	r6, 8003e9a <_printf_i+0x11a>
 8003e96:	2d00      	cmp	r5, #0
 8003e98:	d04d      	beq.n	8003f36 <_printf_i+0x1b6>
 8003e9a:	4615      	mov	r5, r2
 8003e9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea0:	fb03 6711 	mls	r7, r3, r1, r6
 8003ea4:	5dc7      	ldrb	r7, [r0, r7]
 8003ea6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eaa:	4637      	mov	r7, r6
 8003eac:	42bb      	cmp	r3, r7
 8003eae:	460e      	mov	r6, r1
 8003eb0:	d9f4      	bls.n	8003e9c <_printf_i+0x11c>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d10b      	bne.n	8003ece <_printf_i+0x14e>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	07de      	lsls	r6, r3, #31
 8003eba:	d508      	bpl.n	8003ece <_printf_i+0x14e>
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	6861      	ldr	r1, [r4, #4]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	bfde      	ittt	le
 8003ec4:	2330      	movle	r3, #48	; 0x30
 8003ec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ece:	1b52      	subs	r2, r2, r5
 8003ed0:	6122      	str	r2, [r4, #16]
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f8cd a000 	str.w	sl, [sp]
 8003edc:	aa03      	add	r2, sp, #12
 8003ede:	f7ff fedf 	bl	8003ca0 <_printf_common>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d14c      	bne.n	8003f80 <_printf_i+0x200>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	b004      	add	sp, #16
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	4834      	ldr	r0, [pc, #208]	; (8003fc4 <_printf_i+0x244>)
 8003ef2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ef6:	6829      	ldr	r1, [r5, #0]
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	f851 6b04 	ldr.w	r6, [r1], #4
 8003efe:	6029      	str	r1, [r5, #0]
 8003f00:	061d      	lsls	r5, r3, #24
 8003f02:	d514      	bpl.n	8003f2e <_printf_i+0x1ae>
 8003f04:	07df      	lsls	r7, r3, #31
 8003f06:	bf44      	itt	mi
 8003f08:	f043 0320 	orrmi.w	r3, r3, #32
 8003f0c:	6023      	strmi	r3, [r4, #0]
 8003f0e:	b91e      	cbnz	r6, 8003f18 <_printf_i+0x198>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f023 0320 	bic.w	r3, r3, #32
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	2310      	movs	r3, #16
 8003f1a:	e7af      	b.n	8003e7c <_printf_i+0xfc>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	f043 0320 	orr.w	r3, r3, #32
 8003f22:	6023      	str	r3, [r4, #0]
 8003f24:	2378      	movs	r3, #120	; 0x78
 8003f26:	4828      	ldr	r0, [pc, #160]	; (8003fc8 <_printf_i+0x248>)
 8003f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f2c:	e7e3      	b.n	8003ef6 <_printf_i+0x176>
 8003f2e:	0659      	lsls	r1, r3, #25
 8003f30:	bf48      	it	mi
 8003f32:	b2b6      	uxthmi	r6, r6
 8003f34:	e7e6      	b.n	8003f04 <_printf_i+0x184>
 8003f36:	4615      	mov	r5, r2
 8003f38:	e7bb      	b.n	8003eb2 <_printf_i+0x132>
 8003f3a:	682b      	ldr	r3, [r5, #0]
 8003f3c:	6826      	ldr	r6, [r4, #0]
 8003f3e:	1d18      	adds	r0, r3, #4
 8003f40:	6961      	ldr	r1, [r4, #20]
 8003f42:	6028      	str	r0, [r5, #0]
 8003f44:	0635      	lsls	r5, r6, #24
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	d501      	bpl.n	8003f4e <_printf_i+0x1ce>
 8003f4a:	6019      	str	r1, [r3, #0]
 8003f4c:	e002      	b.n	8003f54 <_printf_i+0x1d4>
 8003f4e:	0670      	lsls	r0, r6, #25
 8003f50:	d5fb      	bpl.n	8003f4a <_printf_i+0x1ca>
 8003f52:	8019      	strh	r1, [r3, #0]
 8003f54:	2300      	movs	r3, #0
 8003f56:	4615      	mov	r5, r2
 8003f58:	6123      	str	r3, [r4, #16]
 8003f5a:	e7ba      	b.n	8003ed2 <_printf_i+0x152>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	1d1a      	adds	r2, r3, #4
 8003f62:	602a      	str	r2, [r5, #0]
 8003f64:	681d      	ldr	r5, [r3, #0]
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f82f 	bl	8003fcc <memchr>
 8003f6e:	b108      	cbz	r0, 8003f74 <_printf_i+0x1f4>
 8003f70:	1b40      	subs	r0, r0, r5
 8003f72:	6060      	str	r0, [r4, #4]
 8003f74:	6863      	ldr	r3, [r4, #4]
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7e:	e7a8      	b.n	8003ed2 <_printf_i+0x152>
 8003f80:	462a      	mov	r2, r5
 8003f82:	4649      	mov	r1, r9
 8003f84:	4640      	mov	r0, r8
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	47d0      	blx	sl
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d0ab      	beq.n	8003ee6 <_printf_i+0x166>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	079b      	lsls	r3, r3, #30
 8003f92:	d413      	bmi.n	8003fbc <_printf_i+0x23c>
 8003f94:	68e0      	ldr	r0, [r4, #12]
 8003f96:	9b03      	ldr	r3, [sp, #12]
 8003f98:	4298      	cmp	r0, r3
 8003f9a:	bfb8      	it	lt
 8003f9c:	4618      	movlt	r0, r3
 8003f9e:	e7a4      	b.n	8003eea <_printf_i+0x16a>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4632      	mov	r2, r6
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	47d0      	blx	sl
 8003faa:	3001      	adds	r0, #1
 8003fac:	d09b      	beq.n	8003ee6 <_printf_i+0x166>
 8003fae:	3501      	adds	r5, #1
 8003fb0:	68e3      	ldr	r3, [r4, #12]
 8003fb2:	9903      	ldr	r1, [sp, #12]
 8003fb4:	1a5b      	subs	r3, r3, r1
 8003fb6:	42ab      	cmp	r3, r5
 8003fb8:	dcf2      	bgt.n	8003fa0 <_printf_i+0x220>
 8003fba:	e7eb      	b.n	8003f94 <_printf_i+0x214>
 8003fbc:	2500      	movs	r5, #0
 8003fbe:	f104 0619 	add.w	r6, r4, #25
 8003fc2:	e7f5      	b.n	8003fb0 <_printf_i+0x230>
 8003fc4:	08004429 	.word	0x08004429
 8003fc8:	0800443a 	.word	0x0800443a

08003fcc <memchr>:
 8003fcc:	4603      	mov	r3, r0
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	b2c9      	uxtb	r1, r1
 8003fd2:	4402      	add	r2, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	d101      	bne.n	8003fde <memchr+0x12>
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e003      	b.n	8003fe6 <memchr+0x1a>
 8003fde:	7804      	ldrb	r4, [r0, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	428c      	cmp	r4, r1
 8003fe4:	d1f6      	bne.n	8003fd4 <memchr+0x8>
 8003fe6:	bd10      	pop	{r4, pc}

08003fe8 <memcpy>:
 8003fe8:	440a      	add	r2, r1
 8003fea:	4291      	cmp	r1, r2
 8003fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ff0:	d100      	bne.n	8003ff4 <memcpy+0xc>
 8003ff2:	4770      	bx	lr
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004000:	d1f9      	bne.n	8003ff6 <memcpy+0xe>
 8004002:	bd10      	pop	{r4, pc}

08004004 <memmove>:
 8004004:	4288      	cmp	r0, r1
 8004006:	b510      	push	{r4, lr}
 8004008:	eb01 0402 	add.w	r4, r1, r2
 800400c:	d902      	bls.n	8004014 <memmove+0x10>
 800400e:	4284      	cmp	r4, r0
 8004010:	4623      	mov	r3, r4
 8004012:	d807      	bhi.n	8004024 <memmove+0x20>
 8004014:	1e43      	subs	r3, r0, #1
 8004016:	42a1      	cmp	r1, r4
 8004018:	d008      	beq.n	800402c <memmove+0x28>
 800401a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800401e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004022:	e7f8      	b.n	8004016 <memmove+0x12>
 8004024:	4601      	mov	r1, r0
 8004026:	4402      	add	r2, r0
 8004028:	428a      	cmp	r2, r1
 800402a:	d100      	bne.n	800402e <memmove+0x2a>
 800402c:	bd10      	pop	{r4, pc}
 800402e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004036:	e7f7      	b.n	8004028 <memmove+0x24>

08004038 <_free_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4605      	mov	r5, r0
 800403c:	2900      	cmp	r1, #0
 800403e:	d040      	beq.n	80040c2 <_free_r+0x8a>
 8004040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004044:	1f0c      	subs	r4, r1, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfb8      	it	lt
 800404a:	18e4      	addlt	r4, r4, r3
 800404c:	f000 f910 	bl	8004270 <__malloc_lock>
 8004050:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <_free_r+0x8c>)
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	b933      	cbnz	r3, 8004064 <_free_r+0x2c>
 8004056:	6063      	str	r3, [r4, #4]
 8004058:	6014      	str	r4, [r2, #0]
 800405a:	4628      	mov	r0, r5
 800405c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004060:	f000 b90c 	b.w	800427c <__malloc_unlock>
 8004064:	42a3      	cmp	r3, r4
 8004066:	d908      	bls.n	800407a <_free_r+0x42>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	1821      	adds	r1, r4, r0
 800406c:	428b      	cmp	r3, r1
 800406e:	bf01      	itttt	eq
 8004070:	6819      	ldreq	r1, [r3, #0]
 8004072:	685b      	ldreq	r3, [r3, #4]
 8004074:	1809      	addeq	r1, r1, r0
 8004076:	6021      	streq	r1, [r4, #0]
 8004078:	e7ed      	b.n	8004056 <_free_r+0x1e>
 800407a:	461a      	mov	r2, r3
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b10b      	cbz	r3, 8004084 <_free_r+0x4c>
 8004080:	42a3      	cmp	r3, r4
 8004082:	d9fa      	bls.n	800407a <_free_r+0x42>
 8004084:	6811      	ldr	r1, [r2, #0]
 8004086:	1850      	adds	r0, r2, r1
 8004088:	42a0      	cmp	r0, r4
 800408a:	d10b      	bne.n	80040a4 <_free_r+0x6c>
 800408c:	6820      	ldr	r0, [r4, #0]
 800408e:	4401      	add	r1, r0
 8004090:	1850      	adds	r0, r2, r1
 8004092:	4283      	cmp	r3, r0
 8004094:	6011      	str	r1, [r2, #0]
 8004096:	d1e0      	bne.n	800405a <_free_r+0x22>
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4401      	add	r1, r0
 800409e:	6011      	str	r1, [r2, #0]
 80040a0:	6053      	str	r3, [r2, #4]
 80040a2:	e7da      	b.n	800405a <_free_r+0x22>
 80040a4:	d902      	bls.n	80040ac <_free_r+0x74>
 80040a6:	230c      	movs	r3, #12
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	e7d6      	b.n	800405a <_free_r+0x22>
 80040ac:	6820      	ldr	r0, [r4, #0]
 80040ae:	1821      	adds	r1, r4, r0
 80040b0:	428b      	cmp	r3, r1
 80040b2:	bf01      	itttt	eq
 80040b4:	6819      	ldreq	r1, [r3, #0]
 80040b6:	685b      	ldreq	r3, [r3, #4]
 80040b8:	1809      	addeq	r1, r1, r0
 80040ba:	6021      	streq	r1, [r4, #0]
 80040bc:	6063      	str	r3, [r4, #4]
 80040be:	6054      	str	r4, [r2, #4]
 80040c0:	e7cb      	b.n	800405a <_free_r+0x22>
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	2000120c 	.word	0x2000120c

080040c8 <sbrk_aligned>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4e0e      	ldr	r6, [pc, #56]	; (8004104 <sbrk_aligned+0x3c>)
 80040cc:	460c      	mov	r4, r1
 80040ce:	6831      	ldr	r1, [r6, #0]
 80040d0:	4605      	mov	r5, r0
 80040d2:	b911      	cbnz	r1, 80040da <sbrk_aligned+0x12>
 80040d4:	f000 f8bc 	bl	8004250 <_sbrk_r>
 80040d8:	6030      	str	r0, [r6, #0]
 80040da:	4621      	mov	r1, r4
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 f8b7 	bl	8004250 <_sbrk_r>
 80040e2:	1c43      	adds	r3, r0, #1
 80040e4:	d00a      	beq.n	80040fc <sbrk_aligned+0x34>
 80040e6:	1cc4      	adds	r4, r0, #3
 80040e8:	f024 0403 	bic.w	r4, r4, #3
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d007      	beq.n	8004100 <sbrk_aligned+0x38>
 80040f0:	1a21      	subs	r1, r4, r0
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f8ac 	bl	8004250 <_sbrk_r>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d101      	bne.n	8004100 <sbrk_aligned+0x38>
 80040fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004100:	4620      	mov	r0, r4
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	20001210 	.word	0x20001210

08004108 <_malloc_r>:
 8004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800410c:	1ccd      	adds	r5, r1, #3
 800410e:	f025 0503 	bic.w	r5, r5, #3
 8004112:	3508      	adds	r5, #8
 8004114:	2d0c      	cmp	r5, #12
 8004116:	bf38      	it	cc
 8004118:	250c      	movcc	r5, #12
 800411a:	2d00      	cmp	r5, #0
 800411c:	4607      	mov	r7, r0
 800411e:	db01      	blt.n	8004124 <_malloc_r+0x1c>
 8004120:	42a9      	cmp	r1, r5
 8004122:	d905      	bls.n	8004130 <_malloc_r+0x28>
 8004124:	230c      	movs	r3, #12
 8004126:	2600      	movs	r6, #0
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4630      	mov	r0, r6
 800412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004130:	4e2e      	ldr	r6, [pc, #184]	; (80041ec <_malloc_r+0xe4>)
 8004132:	f000 f89d 	bl	8004270 <__malloc_lock>
 8004136:	6833      	ldr	r3, [r6, #0]
 8004138:	461c      	mov	r4, r3
 800413a:	bb34      	cbnz	r4, 800418a <_malloc_r+0x82>
 800413c:	4629      	mov	r1, r5
 800413e:	4638      	mov	r0, r7
 8004140:	f7ff ffc2 	bl	80040c8 <sbrk_aligned>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	4604      	mov	r4, r0
 8004148:	d14d      	bne.n	80041e6 <_malloc_r+0xde>
 800414a:	6834      	ldr	r4, [r6, #0]
 800414c:	4626      	mov	r6, r4
 800414e:	2e00      	cmp	r6, #0
 8004150:	d140      	bne.n	80041d4 <_malloc_r+0xcc>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	4631      	mov	r1, r6
 8004156:	4638      	mov	r0, r7
 8004158:	eb04 0803 	add.w	r8, r4, r3
 800415c:	f000 f878 	bl	8004250 <_sbrk_r>
 8004160:	4580      	cmp	r8, r0
 8004162:	d13a      	bne.n	80041da <_malloc_r+0xd2>
 8004164:	6821      	ldr	r1, [r4, #0]
 8004166:	3503      	adds	r5, #3
 8004168:	1a6d      	subs	r5, r5, r1
 800416a:	f025 0503 	bic.w	r5, r5, #3
 800416e:	3508      	adds	r5, #8
 8004170:	2d0c      	cmp	r5, #12
 8004172:	bf38      	it	cc
 8004174:	250c      	movcc	r5, #12
 8004176:	4638      	mov	r0, r7
 8004178:	4629      	mov	r1, r5
 800417a:	f7ff ffa5 	bl	80040c8 <sbrk_aligned>
 800417e:	3001      	adds	r0, #1
 8004180:	d02b      	beq.n	80041da <_malloc_r+0xd2>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	442b      	add	r3, r5
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	e00e      	b.n	80041a8 <_malloc_r+0xa0>
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	1b52      	subs	r2, r2, r5
 800418e:	d41e      	bmi.n	80041ce <_malloc_r+0xc6>
 8004190:	2a0b      	cmp	r2, #11
 8004192:	d916      	bls.n	80041c2 <_malloc_r+0xba>
 8004194:	1961      	adds	r1, r4, r5
 8004196:	42a3      	cmp	r3, r4
 8004198:	6025      	str	r5, [r4, #0]
 800419a:	bf18      	it	ne
 800419c:	6059      	strne	r1, [r3, #4]
 800419e:	6863      	ldr	r3, [r4, #4]
 80041a0:	bf08      	it	eq
 80041a2:	6031      	streq	r1, [r6, #0]
 80041a4:	5162      	str	r2, [r4, r5]
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	4638      	mov	r0, r7
 80041aa:	f104 060b 	add.w	r6, r4, #11
 80041ae:	f000 f865 	bl	800427c <__malloc_unlock>
 80041b2:	f026 0607 	bic.w	r6, r6, #7
 80041b6:	1d23      	adds	r3, r4, #4
 80041b8:	1af2      	subs	r2, r6, r3
 80041ba:	d0b6      	beq.n	800412a <_malloc_r+0x22>
 80041bc:	1b9b      	subs	r3, r3, r6
 80041be:	50a3      	str	r3, [r4, r2]
 80041c0:	e7b3      	b.n	800412a <_malloc_r+0x22>
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	bf0c      	ite	eq
 80041c8:	6032      	streq	r2, [r6, #0]
 80041ca:	605a      	strne	r2, [r3, #4]
 80041cc:	e7ec      	b.n	80041a8 <_malloc_r+0xa0>
 80041ce:	4623      	mov	r3, r4
 80041d0:	6864      	ldr	r4, [r4, #4]
 80041d2:	e7b2      	b.n	800413a <_malloc_r+0x32>
 80041d4:	4634      	mov	r4, r6
 80041d6:	6876      	ldr	r6, [r6, #4]
 80041d8:	e7b9      	b.n	800414e <_malloc_r+0x46>
 80041da:	230c      	movs	r3, #12
 80041dc:	4638      	mov	r0, r7
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	f000 f84c 	bl	800427c <__malloc_unlock>
 80041e4:	e7a1      	b.n	800412a <_malloc_r+0x22>
 80041e6:	6025      	str	r5, [r4, #0]
 80041e8:	e7de      	b.n	80041a8 <_malloc_r+0xa0>
 80041ea:	bf00      	nop
 80041ec:	2000120c 	.word	0x2000120c

080041f0 <_realloc_r>:
 80041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f4:	4680      	mov	r8, r0
 80041f6:	4614      	mov	r4, r2
 80041f8:	460e      	mov	r6, r1
 80041fa:	b921      	cbnz	r1, 8004206 <_realloc_r+0x16>
 80041fc:	4611      	mov	r1, r2
 80041fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004202:	f7ff bf81 	b.w	8004108 <_malloc_r>
 8004206:	b92a      	cbnz	r2, 8004214 <_realloc_r+0x24>
 8004208:	f7ff ff16 	bl	8004038 <_free_r>
 800420c:	4625      	mov	r5, r4
 800420e:	4628      	mov	r0, r5
 8004210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004214:	f000 f838 	bl	8004288 <_malloc_usable_size_r>
 8004218:	4284      	cmp	r4, r0
 800421a:	4607      	mov	r7, r0
 800421c:	d802      	bhi.n	8004224 <_realloc_r+0x34>
 800421e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004222:	d812      	bhi.n	800424a <_realloc_r+0x5a>
 8004224:	4621      	mov	r1, r4
 8004226:	4640      	mov	r0, r8
 8004228:	f7ff ff6e 	bl	8004108 <_malloc_r>
 800422c:	4605      	mov	r5, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	d0ed      	beq.n	800420e <_realloc_r+0x1e>
 8004232:	42bc      	cmp	r4, r7
 8004234:	4622      	mov	r2, r4
 8004236:	4631      	mov	r1, r6
 8004238:	bf28      	it	cs
 800423a:	463a      	movcs	r2, r7
 800423c:	f7ff fed4 	bl	8003fe8 <memcpy>
 8004240:	4631      	mov	r1, r6
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff fef8 	bl	8004038 <_free_r>
 8004248:	e7e1      	b.n	800420e <_realloc_r+0x1e>
 800424a:	4635      	mov	r5, r6
 800424c:	e7df      	b.n	800420e <_realloc_r+0x1e>
	...

08004250 <_sbrk_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	2300      	movs	r3, #0
 8004254:	4d05      	ldr	r5, [pc, #20]	; (800426c <_sbrk_r+0x1c>)
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fc fcb4 	bl	8000bc8 <_sbrk>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_sbrk_r+0x1a>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	b103      	cbz	r3, 800426a <_sbrk_r+0x1a>
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20001214 	.word	0x20001214

08004270 <__malloc_lock>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__malloc_lock+0x8>)
 8004272:	f000 b811 	b.w	8004298 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	20001218 	.word	0x20001218

0800427c <__malloc_unlock>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <__malloc_unlock+0x8>)
 800427e:	f000 b80c 	b.w	800429a <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	20001218 	.word	0x20001218

08004288 <_malloc_usable_size_r>:
 8004288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800428c:	1f18      	subs	r0, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	bfbc      	itt	lt
 8004292:	580b      	ldrlt	r3, [r1, r0]
 8004294:	18c0      	addlt	r0, r0, r3
 8004296:	4770      	bx	lr

08004298 <__retarget_lock_acquire_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_release_recursive>:
 800429a:	4770      	bx	lr

0800429c <_init>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr

080042a8 <_fini>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr
