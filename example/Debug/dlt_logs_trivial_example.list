
dlt_logs_trivial_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004450  08004450  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004450  08004450  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004450  08004450  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  20000084  080044dc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  080044dc  0002121c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7bf  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ce  00000000  00000000  0002b86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018661  00000000  00000000  0002f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001038c  00000000  00000000  00047979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b253  00000000  00000000  00057d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000e2fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080042a0 	.word	0x080042a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080042a0 	.word	0x080042a0

0800014c <DLT_RB_Read>:
 ********************************************************************************************
 ********************************************************************************************
 * */

static RB_Status DLT_RB_Read(DltRingBuffer_t *Buf, uint8_t *MessageSize, uint8_t **MessagePointer)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	881a      	ldrh	r2, [r3, #0]
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	885b      	ldrh	r3, [r3, #2]
 8000160:	429a      	cmp	r2, r3
 8000162:	d101      	bne.n	8000168 <DLT_RB_Read+0x1c>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8000164:	2301      	movs	r3, #1
 8000166:	e023      	b.n	80001b0 <DLT_RB_Read+0x64>
	}

	// Write current value from buffer to pointer from argument
	*MessageSize = Buf->Buffer[Buf->Tail];
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	885b      	ldrh	r3, [r3, #2]
 800016c:	461a      	mov	r2, r3
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	4413      	add	r3, r2
 8000172:	791a      	ldrb	r2, [r3, #4]
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	701a      	strb	r2, [r3, #0]
	*MessagePointer = &DltMessagesTab[Buf->Tail][0];
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	885b      	ldrh	r3, [r3, #2]
 800017c:	461a      	mov	r2, r3
 800017e:	4613      	mov	r3, r2
 8000180:	021b      	lsls	r3, r3, #8
 8000182:	1a9b      	subs	r3, r3, r2
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <DLT_RB_Read+0x70>)
 8000186:	441a      	add	r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	601a      	str	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % DLT_RING_BUFFER_SIZE;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	885b      	ldrh	r3, [r3, #2]
 8000190:	1c5a      	adds	r2, r3, #1
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <DLT_RB_Read+0x74>)
 8000194:	fb83 1302 	smull	r1, r3, r3, r2
 8000198:	4413      	add	r3, r2
 800019a:	10d9      	asrs	r1, r3, #3
 800019c:	17d3      	asrs	r3, r2, #31
 800019e:	1ac9      	subs	r1, r1, r3
 80001a0:	460b      	mov	r3, r1
 80001a2:	011b      	lsls	r3, r3, #4
 80001a4:	1a5b      	subs	r3, r3, r1
 80001a6:	1ad1      	subs	r1, r2, r3
 80001a8:	b28a      	uxth	r2, r1
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 80001ae:	2300      	movs	r3, #0
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001fc 	.word	0x200001fc
 80001c0:	88888889 	.word	0x88888889

080001c4 <DLT_RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
static RB_Status DLT_RB_Write(DltRingBuffer_t *Buf,uint8_t *DltLogData, uint8_t MessageSize)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	4613      	mov	r3, r2
 80001d0:	71fb      	strb	r3, [r7, #7]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % DLT_RING_BUFFER_SIZE;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	881b      	ldrh	r3, [r3, #0]
 80001d6:	1c5a      	adds	r2, r3, #1
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <DLT_RB_Write+0x94>)
 80001da:	fb83 1302 	smull	r1, r3, r3, r2
 80001de:	4413      	add	r3, r2
 80001e0:	10d9      	asrs	r1, r3, #3
 80001e2:	17d3      	asrs	r3, r2, #31
 80001e4:	1ac9      	subs	r1, r1, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	1a5b      	subs	r3, r3, r1
 80001ec:	1ad1      	subs	r1, r2, r3
 80001ee:	460b      	mov	r3, r1
 80001f0:	74fb      	strb	r3, [r7, #19]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 80001f2:	7cfb      	ldrb	r3, [r7, #19]
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	885b      	ldrh	r3, [r3, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <DLT_RB_Write+0x3e>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 80001fe:	2301      	movs	r3, #1
 8000200:	e025      	b.n	800024e <DLT_RB_Write+0x8a>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = MessageSize;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	881b      	ldrh	r3, [r3, #0]
 8000206:	461a      	mov	r2, r3
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4413      	add	r3, r2
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	711a      	strb	r2, [r3, #4]

	/*Copy the values to new buffer*/
	for(int i=0; i<MessageSize; i++)
 8000210:	2300      	movs	r3, #0
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	e012      	b.n	800023c <DLT_RB_Write+0x78>
	{
		DltMessagesTab[Buf->Head][i] = DltLogData[i];
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	4413      	add	r3, r2
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	8812      	ldrh	r2, [r2, #0]
 8000220:	4611      	mov	r1, r2
 8000222:	7818      	ldrb	r0, [r3, #0]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <DLT_RB_Write+0x98>)
 8000226:	460b      	mov	r3, r1
 8000228:	021b      	lsls	r3, r3, #8
 800022a:	1a5b      	subs	r3, r3, r1
 800022c:	441a      	add	r2, r3
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	4413      	add	r3, r2
 8000232:	4602      	mov	r2, r0
 8000234:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MessageSize; i++)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	3301      	adds	r3, #1
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	697a      	ldr	r2, [r7, #20]
 8000240:	429a      	cmp	r2, r3
 8000242:	dbe8      	blt.n	8000216 <DLT_RB_Write+0x52>
	}

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8000244:	7cfb      	ldrb	r3, [r7, #19]
 8000246:	b29a      	uxth	r2, r3
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	801a      	strh	r2, [r3, #0]

	// Everything is ok - return OK status
	return RB_OK;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	371c      	adds	r7, #28
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	88888889 	.word	0x88888889
 800025c:	200001fc 	.word	0x200001fc

08000260 <PrepareHoleHeader>:
 *
 * refer to: https://www.autosar.org/fileadmin/user_upload/standards/foundation/1-0/AUTOSAR_PRS_DiagnosticLogAndTraceProtocol.pdf
 *
 * */
static void PrepareHoleHeader(uint8_t Level, uint32_t AppId, uint32_t ContextId, uint16_t size)
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
 800026a:	461a      	mov	r2, r3
 800026c:	4603      	mov	r3, r0
 800026e:	73fb      	strb	r3, [r7, #15]
 8000270:	4613      	mov	r3, r2
 8000272:	81bb      	strh	r3, [r7, #12]
	if(size > (254 -32) )
 8000274:	89bb      	ldrh	r3, [r7, #12]
 8000276:	2bde      	cmp	r3, #222	; 0xde
 8000278:	d900      	bls.n	800027c <PrepareHoleHeader+0x1c>
	{
		/*Error to handle or please develop this function */
		while(1)
 800027a:	e7fe      	b.n	800027a <PrepareHoleHeader+0x1a>

	}


	/*START HEADER*/
	DltDebugTmpBuf[0] =  0x44; /*'D'*/
 800027c:	4b43      	ldr	r3, [pc, #268]	; (800038c <PrepareHoleHeader+0x12c>)
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	701a      	strb	r2, [r3, #0]
	DltDebugTmpBuf[1] =  0x4c; /*'L'*/
 8000282:	4b42      	ldr	r3, [pc, #264]	; (800038c <PrepareHoleHeader+0x12c>)
 8000284:	224c      	movs	r2, #76	; 0x4c
 8000286:	705a      	strb	r2, [r3, #1]
	DltDebugTmpBuf[2] =  0x53; /*'S'*/
 8000288:	4b40      	ldr	r3, [pc, #256]	; (800038c <PrepareHoleHeader+0x12c>)
 800028a:	2253      	movs	r2, #83	; 0x53
 800028c:	709a      	strb	r2, [r3, #2]
	DltDebugTmpBuf[3] =  0x01; /*'0x01'*/
 800028e:	4b3f      	ldr	r3, [pc, #252]	; (800038c <PrepareHoleHeader+0x12c>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]


	DltDebugTmpBuf[4] =  0x35; /*'Dlt base header config
 8000294:	4b3d      	ldr	r3, [pc, #244]	; (800038c <PrepareHoleHeader+0x12c>)
 8000296:	2235      	movs	r2, #53	; 0x35
 8000298:	711a      	strb	r2, [r3, #4]
	* With Seesion ID - false
	* With time stamp - true
	* version number -random
	'*/

	DltDebugTmpBuf[5] =  ActDltMessageCounter++; /*'Message counter value '*/
 800029a:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <PrepareHoleHeader+0x130>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	b2d1      	uxtb	r1, r2
 80002a2:	4a3b      	ldr	r2, [pc, #236]	; (8000390 <PrepareHoleHeader+0x130>)
 80002a4:	7011      	strb	r1, [r2, #0]
 80002a6:	4a39      	ldr	r2, [pc, #228]	; (800038c <PrepareHoleHeader+0x12c>)
 80002a8:	7153      	strb	r3, [r2, #5]

	/*TODO: - it must be fixed!!!! - Length*/
	DltDebugTmpBuf[6] =  0x00; /*Message length general*/
 80002aa:	4b38      	ldr	r3, [pc, #224]	; (800038c <PrepareHoleHeader+0x12c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	719a      	strb	r2, [r3, #6]
//	DltDebugTmpBuf[7] =  0x37; /*'Message length general '*/
	DltDebugTmpBuf[7]=28+size; /*General size */
 80002b0:	89bb      	ldrh	r3, [r7, #12]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	331c      	adds	r3, #28
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b34      	ldr	r3, [pc, #208]	; (800038c <PrepareHoleHeader+0x12c>)
 80002ba:	71da      	strb	r2, [r3, #7]


	uint32_t TempEcuId = DLT_LOG_ECUID_VALUE;
 80002bc:	2353      	movs	r3, #83	; 0x53
 80002be:	061a      	lsls	r2, r3, #24
 80002c0:	2354      	movs	r3, #84	; 0x54
 80002c2:	041b      	lsls	r3, r3, #16
 80002c4:	431a      	orrs	r2, r3
 80002c6:	2346      	movs	r3, #70	; 0x46
 80002c8:	021b      	lsls	r3, r3, #8
 80002ca:	4313      	orrs	r3, r2
 80002cc:	2231      	movs	r2, #49	; 0x31
 80002ce:	4313      	orrs	r3, r2
 80002d0:	617b      	str	r3, [r7, #20]
	/*ECU ID*/
	DltDebugTmpBuf[8]= ((uint8_t*)&TempEcuId)[3];
 80002d2:	7dfa      	ldrb	r2, [r7, #23]
 80002d4:	4b2d      	ldr	r3, [pc, #180]	; (800038c <PrepareHoleHeader+0x12c>)
 80002d6:	721a      	strb	r2, [r3, #8]
	DltDebugTmpBuf[9]= ((uint8_t*)&TempEcuId)[2];
 80002d8:	7dba      	ldrb	r2, [r7, #22]
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <PrepareHoleHeader+0x12c>)
 80002dc:	725a      	strb	r2, [r3, #9]
	DltDebugTmpBuf[10]= ((uint8_t*)&TempEcuId)[1];
 80002de:	7d7a      	ldrb	r2, [r7, #21]
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <PrepareHoleHeader+0x12c>)
 80002e2:	729a      	strb	r2, [r3, #10]
	DltDebugTmpBuf[11]= ((uint8_t*)&TempEcuId)[0];
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b28      	ldr	r3, [pc, #160]	; (800038c <PrepareHoleHeader+0x12c>)
 80002ec:	72da      	strb	r2, [r3, #11]

	/*Time stamp*/
	DltDebugTmpBuf[12]= ((uint8_t*)&TimestampValue)[3];
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <PrepareHoleHeader+0x134>)
 80002f0:	78da      	ldrb	r2, [r3, #3]
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <PrepareHoleHeader+0x12c>)
 80002f4:	731a      	strb	r2, [r3, #12]
	DltDebugTmpBuf[13]= ((uint8_t*)&TimestampValue)[2];
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <PrepareHoleHeader+0x134>)
 80002f8:	789a      	ldrb	r2, [r3, #2]
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <PrepareHoleHeader+0x12c>)
 80002fc:	735a      	strb	r2, [r3, #13]
	DltDebugTmpBuf[14]= ((uint8_t*)&TimestampValue)[1];
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <PrepareHoleHeader+0x134>)
 8000300:	785a      	ldrb	r2, [r3, #1]
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <PrepareHoleHeader+0x12c>)
 8000304:	739a      	strb	r2, [r3, #14]
	DltDebugTmpBuf[15]= ((uint8_t*)&TimestampValue)[0];
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <PrepareHoleHeader+0x134>)
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	4b20      	ldr	r3, [pc, #128]	; (800038c <PrepareHoleHeader+0x12c>)
 800030c:	73da      	strb	r2, [r3, #15]

	/*Extended header --verbose | type serial*/
//	DltDebugTmpBuf[16]= 0x41; /**/
	DltDebugTmpBuf[16]= (Level << 4) | 1;
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	011b      	lsls	r3, r3, #4
 8000312:	b25b      	sxtb	r3, r3
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	b25b      	sxtb	r3, r3
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <PrepareHoleHeader+0x12c>)
 800031e:	741a      	strb	r2, [r3, #16]

	/*Number of arguments*/
	DltDebugTmpBuf[17]= 0x01; /**/
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <PrepareHoleHeader+0x12c>)
 8000322:	2201      	movs	r2, #1
 8000324:	745a      	strb	r2, [r3, #17]

	/*App id */
	DltDebugTmpBuf[18]= ((uint8_t*)&AppId)[3];
 8000326:	7afa      	ldrb	r2, [r7, #11]
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <PrepareHoleHeader+0x12c>)
 800032a:	749a      	strb	r2, [r3, #18]
	DltDebugTmpBuf[19]= ((uint8_t*)&AppId)[2];
 800032c:	7aba      	ldrb	r2, [r7, #10]
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <PrepareHoleHeader+0x12c>)
 8000330:	74da      	strb	r2, [r3, #19]
	DltDebugTmpBuf[20]= ((uint8_t*)&AppId)[1];
 8000332:	7a7a      	ldrb	r2, [r7, #9]
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <PrepareHoleHeader+0x12c>)
 8000336:	751a      	strb	r2, [r3, #20]
	DltDebugTmpBuf[21]= ((uint8_t*)&AppId)[0];
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <PrepareHoleHeader+0x12c>)
 8000340:	755a      	strb	r2, [r3, #21]

	/*Contex ID  (4 bajty*/
	DltDebugTmpBuf[22]= ((uint8_t*)&ContextId)[3];
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <PrepareHoleHeader+0x12c>)
 8000346:	759a      	strb	r2, [r3, #22]
	DltDebugTmpBuf[23]= ((uint8_t*)&ContextId)[2];
 8000348:	79ba      	ldrb	r2, [r7, #6]
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <PrepareHoleHeader+0x12c>)
 800034c:	75da      	strb	r2, [r3, #23]
	DltDebugTmpBuf[24]= ((uint8_t*)&ContextId)[1];
 800034e:	797a      	ldrb	r2, [r7, #5]
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <PrepareHoleHeader+0x12c>)
 8000352:	761a      	strb	r2, [r3, #24]
	DltDebugTmpBuf[25]= ((uint8_t*)&ContextId)[0];
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <PrepareHoleHeader+0x12c>)
 800035a:	765a      	strb	r2, [r3, #25]

	/*Type info*/
	DltDebugTmpBuf[26]= 0x01; /**/
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <PrepareHoleHeader+0x12c>)
 800035e:	2201      	movs	r2, #1
 8000360:	769a      	strb	r2, [r3, #26]
	DltDebugTmpBuf[27]= 0x82; /**/
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <PrepareHoleHeader+0x12c>)
 8000364:	2282      	movs	r2, #130	; 0x82
 8000366:	76da      	strb	r2, [r3, #27]
	DltDebugTmpBuf[28]= 0x00; /**/
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <PrepareHoleHeader+0x12c>)
 800036a:	2200      	movs	r2, #0
 800036c:	771a      	strb	r2, [r3, #28]
	DltDebugTmpBuf[29]= 0x00; /**/
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <PrepareHoleHeader+0x12c>)
 8000370:	2200      	movs	r2, #0
 8000372:	775a      	strb	r2, [r3, #29]

	/*Argument 1*/
	DltDebugTmpBuf[30]= size; /*the size of the load in simplified form, but not exactly but generally yes*/
 8000374:	89bb      	ldrh	r3, [r7, #12]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <PrepareHoleHeader+0x12c>)
 800037a:	779a      	strb	r2, [r3, #30]
	DltDebugTmpBuf[31]= 0x00; /**/
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <PrepareHoleHeader+0x12c>)
 800037e:	2200      	movs	r2, #0
 8000380:	77da      	strb	r2, [r3, #31]
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	200000e8 	.word	0x200000e8
 8000390:	200001e7 	.word	0x200001e7
 8000394:	20000010 	.word	0x20000010

08000398 <DLTuc_RegisterTransmitSerialDataCallback>:
 *  This simple stack/library must have initialized by "DLTuc_RegisterTransmitSerialDataCallback"
 *  As a parameter must by pass function which will transmit serial data
 *
 * */
void DLTuc_RegisterTransmitSerialDataCallback(void LLSerialTrDataFunctionCb(uint8_t *DltLogData, uint8_t Size))
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	ExtSerialTrDataFunctionCb = LLSerialTrDataFunctionCb;
 80003a0:	4a19      	ldr	r2, [pc, #100]	; (8000408 <DLTuc_RegisterTransmitSerialDataCallback+0x70>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6013      	str	r3, [r2, #0]

	/*Preapre LOG DROPPED Info Log*/
	PrepareHoleHeader(DL_ERROR,0xDD,0xDD,sizeof(DltLogDroppedInfo) );
 80003a6:	230f      	movs	r3, #15
 80003a8:	22dd      	movs	r2, #221	; 0xdd
 80003aa:	21dd      	movs	r1, #221	; 0xdd
 80003ac:	2002      	movs	r0, #2
 80003ae:	f7ff ff57 	bl	8000260 <PrepareHoleHeader>

	/*Payload!!!*/
	/*Copy payload text temporary*/
	for(int i=DLT_ACT_HOLE_HEADER_SIZE; i<(sizeof(DltLogDroppedInfo)+DLT_ACT_HOLE_HEADER_SIZE); i++)
 80003b2:	2320      	movs	r3, #32
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e00b      	b.n	80003d0 <DLTuc_RegisterTransmitSerialDataCallback+0x38>
	{
		DltDebugTmpBuf[i]= DltLogDroppedInfo[i-DLT_ACT_HOLE_HEADER_SIZE];
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3b20      	subs	r3, #32
 80003bc:	4a13      	ldr	r2, [pc, #76]	; (800040c <DLTuc_RegisterTransmitSerialDataCallback+0x74>)
 80003be:	5cd1      	ldrb	r1, [r2, r3]
 80003c0:	4a13      	ldr	r2, [pc, #76]	; (8000410 <DLTuc_RegisterTransmitSerialDataCallback+0x78>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4413      	add	r3, r2
 80003c6:	460a      	mov	r2, r1
 80003c8:	701a      	strb	r2, [r3, #0]
	for(int i=DLT_ACT_HOLE_HEADER_SIZE; i<(sizeof(DltLogDroppedInfo)+DLT_ACT_HOLE_HEADER_SIZE); i++)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3301      	adds	r3, #1
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2b2e      	cmp	r3, #46	; 0x2e
 80003d4:	d9f0      	bls.n	80003b8 <DLTuc_RegisterTransmitSerialDataCallback+0x20>
	}

	for(int i=0; i<sizeof(DltLogDroppedInfoBuffer); i++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	e00b      	b.n	80003f4 <DLTuc_RegisterTransmitSerialDataCallback+0x5c>
	{
		DltLogDroppedInfoBuffer[i] = DltDebugTmpBuf[i];
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <DLTuc_RegisterTransmitSerialDataCallback+0x78>)
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	4413      	add	r3, r2
 80003e2:	7819      	ldrb	r1, [r3, #0]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <DLTuc_RegisterTransmitSerialDataCallback+0x7c>)
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4413      	add	r3, r2
 80003ea:	460a      	mov	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<sizeof(DltLogDroppedInfoBuffer); i++)
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	2b3b      	cmp	r3, #59	; 0x3b
 80003f8:	d9f0      	bls.n	80003dc <DLTuc_RegisterTransmitSerialDataCallback+0x44>
	}

	DLtLogDroppedSize = DLT_ACT_HOLE_HEADER_SIZE + sizeof(DltLogDroppedInfo);
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <DLTuc_RegisterTransmitSerialDataCallback+0x80>)
 80003fc:	222f      	movs	r2, #47	; 0x2f
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000a0 	.word	0x200000a0
 800040c:	20000000 	.word	0x20000000
 8000410:	200000e8 	.word	0x200000e8
 8000414:	200000a8 	.word	0x200000a8
 8000418:	200000e4 	.word	0x200000e4

0800041c <DLTuc_MessageTransmitDone>:
 *  Call this function when the transsmision is end
 * For example in "DMA transmission end callback" to inform the lib that the message is transmitted
 *
 * */
void DLTuc_MessageTransmitDone(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
	uint8_t TmpMessageSize=0;
 8000422:	2300      	movs	r3, #0
 8000424:	71fb      	strb	r3, [r7, #7]
	uint8_t *TmpMessagePointer = NULL;
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]

	if(LogDroppedFlag == true)
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <DLTuc_MessageTransmitDone+0x6c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00e      	beq.n	8000450 <DLTuc_MessageTransmitDone+0x34>
	{
		LogDroppedFlag = false;
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <DLTuc_MessageTransmitDone+0x6c>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]

		if(ExtSerialTrDataFunctionCb != NULL)
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <DLTuc_MessageTransmitDone+0x70>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d01f      	beq.n	8000480 <DLTuc_MessageTransmitDone+0x64>
		{
			ExtSerialTrDataFunctionCb(DltLogDroppedInfoBuffer, DLtLogDroppedSize);
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <DLTuc_MessageTransmitDone+0x70>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <DLTuc_MessageTransmitDone+0x74>)
 8000446:	7812      	ldrb	r2, [r2, #0]
 8000448:	4611      	mov	r1, r2
 800044a:	4812      	ldr	r0, [pc, #72]	; (8000494 <DLTuc_MessageTransmitDone+0x78>)
 800044c:	4798      	blx	r3
 800044e:	e018      	b.n	8000482 <DLTuc_MessageTransmitDone+0x66>
		}
		return;
	}

	if(DLT_RB_Read(&DltRingBuffer,&TmpMessageSize,&TmpMessagePointer) == RB_OK)
 8000450:	463a      	mov	r2, r7
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	4619      	mov	r1, r3
 8000456:	4810      	ldr	r0, [pc, #64]	; (8000498 <DLTuc_MessageTransmitDone+0x7c>)
 8000458:	f7ff fe78 	bl	800014c <DLT_RB_Read>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d10a      	bne.n	8000478 <DLTuc_MessageTransmitDone+0x5c>
	{
		if(ExtSerialTrDataFunctionCb != NULL)
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <DLTuc_MessageTransmitDone+0x70>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00b      	beq.n	8000482 <DLTuc_MessageTransmitDone+0x66>
		{
			ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <DLTuc_MessageTransmitDone+0x70>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	79f9      	ldrb	r1, [r7, #7]
 8000472:	4610      	mov	r0, r2
 8000474:	4798      	blx	r3
 8000476:	e004      	b.n	8000482 <DLTuc_MessageTransmitDone+0x66>
		}
	}
	else
	{
		TransmitReadyStateFlag = true;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <DLTuc_MessageTransmitDone+0x80>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e000      	b.n	8000482 <DLTuc_MessageTransmitDone+0x66>
		return;
 8000480:	bf00      	nop
	}
}
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000a4 	.word	0x200000a4
 800048c:	200000a0 	.word	0x200000a0
 8000490:	200000e4 	.word	0x200000e4
 8000494:	200000a8 	.word	0x200000a8
 8000498:	200001e8 	.word	0x200001e8
 800049c:	2000000f 	.word	0x2000000f

080004a0 <DLTuc_LogOutVarArgs>:
 *
 * Typical most usefull function to create DLT Log
 *
 * */
void DLTuc_LogOutVarArgs(DltLogLevel_t Level, uint32_t AppId, uint32_t ContextId, uint8_t *Payload, ...)
{
 80004a0:	b408      	push	{r3}
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b089      	sub	sp, #36	; 0x24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	73fb      	strb	r3, [r7, #15]
va_list ap;
uint16_t Size;

	va_start(ap, Payload);
 80004b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b4:	61bb      	str	r3, [r7, #24]
	Size = vsprintf((char *)DltDebugTmpBuf + DLT_ACT_HOLE_HEADER_SIZE, (char *)Payload,ap);
 80004b6:	4b24      	ldr	r3, [pc, #144]	; (8000548 <DLTuc_LogOutVarArgs+0xa8>)
 80004b8:	69ba      	ldr	r2, [r7, #24]
 80004ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80004bc:	4618      	mov	r0, r3
 80004be:	f003 fa8b 	bl	80039d8 <vsiprintf>
 80004c2:	4603      	mov	r3, r0
 80004c4:	83fb      	strh	r3, [r7, #30]
	va_end(ap);

	PrepareHoleHeader(Level,AppId,ContextId,Size);
 80004c6:	8bfb      	ldrh	r3, [r7, #30]
 80004c8:	7bf8      	ldrb	r0, [r7, #15]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	f7ff fec7 	bl	8000260 <PrepareHoleHeader>
	Size = Size +DLT_ACT_HOLE_HEADER_SIZE;
 80004d2:	8bfb      	ldrh	r3, [r7, #30]
 80004d4:	3320      	adds	r3, #32
 80004d6:	83fb      	strh	r3, [r7, #30]


	if(DLT_RB_Write(&DltRingBuffer,DltDebugTmpBuf, Size) == RB_OK)
 80004d8:	8bfb      	ldrh	r3, [r7, #30]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	491b      	ldr	r1, [pc, #108]	; (800054c <DLTuc_LogOutVarArgs+0xac>)
 80004e0:	481b      	ldr	r0, [pc, #108]	; (8000550 <DLTuc_LogOutVarArgs+0xb0>)
 80004e2:	f7ff fe6f 	bl	80001c4 <DLT_RB_Write>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <DLTuc_LogOutVarArgs+0x52>
		/*Nothing to do*/
	}
	else
	{
		/*Static flag for Transmit done call back*/
		LogDroppedFlag = true;
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <DLTuc_LogOutVarArgs+0xb4>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t TmpMessageSize=0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	75fb      	strb	r3, [r7, #23]
	uint8_t *TmpMessagePointer = NULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]


	if(TransmitReadyStateFlag == true)
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <DLTuc_LogOutVarArgs+0xb8>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b01      	cmp	r3, #1
 8000502:	d119      	bne.n	8000538 <DLTuc_LogOutVarArgs+0x98>
	{
		if(DLT_RB_Read(&DltRingBuffer,&TmpMessageSize,&TmpMessagePointer) == RB_OK)
 8000504:	f107 0210 	add.w	r2, r7, #16
 8000508:	f107 0317 	add.w	r3, r7, #23
 800050c:	4619      	mov	r1, r3
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <DLTuc_LogOutVarArgs+0xb0>)
 8000510:	f7ff fe1c 	bl	800014c <DLT_RB_Read>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <DLTuc_LogOutVarArgs+0x98>
			{
				TransmitReadyStateFlag = false;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <DLTuc_LogOutVarArgs+0xb8>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
				if(ExtSerialTrDataFunctionCb != NULL)
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <DLTuc_LogOutVarArgs+0xbc>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <DLTuc_LogOutVarArgs+0x96>
				{
					ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <DLTuc_LogOutVarArgs+0xbc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	7df9      	ldrb	r1, [r7, #23]
 8000530:	4610      	mov	r0, r2
 8000532:	4798      	blx	r3
				{
					while(1); /*Please Register the callback...*/
				}
			}
	}
}
 8000534:	e000      	b.n	8000538 <DLTuc_LogOutVarArgs+0x98>
					while(1); /*Please Register the callback...*/
 8000536:	e7fe      	b.n	8000536 <DLTuc_LogOutVarArgs+0x96>
}
 8000538:	bf00      	nop
 800053a:	3724      	adds	r7, #36	; 0x24
 800053c:	46bd      	mov	sp, r7
 800053e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000542:	b001      	add	sp, #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000108 	.word	0x20000108
 800054c:	200000e8 	.word	0x200000e8
 8000550:	200001e8 	.word	0x200001e8
 8000554:	200000a4 	.word	0x200000a4
 8000558:	2000000f 	.word	0x2000000f
 800055c:	200000a0 	.word	0x200000a0

08000560 <DLTuc_UpdateTimeStampMs>:
 *@brief DLTuc_UpdateTimeStampMs
 *
 *
 * */
void DLTuc_UpdateTimeStampMs(uint32_t Time)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	TimestampValue = (Time*10);
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	461a      	mov	r2, r3
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <DLTuc_UpdateTimeStampMs+0x24>)
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000010 	.word	0x20000010

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x48>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x48>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x48>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2010      	movs	r0, #16
 80005ac:	f000 fe53 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005b0:	2010      	movs	r0, #16
 80005b2:	f000 fe6c 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2011      	movs	r0, #17
 80005bc:	f000 fe4b 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005c0:	2011      	movs	r0, #17
 80005c2:	f000 fe64 	bl	800128e <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <MX_GPIO_Init+0x104>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a3a      	ldr	r2, [pc, #232]	; (80006d8 <MX_GPIO_Init+0x104>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <MX_GPIO_Init+0x104>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000600:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <MX_GPIO_Init+0x104>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <MX_GPIO_Init+0x104>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_GPIO_Init+0x104>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0320 	and.w	r3, r3, #32
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x104>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a2e      	ldr	r2, [pc, #184]	; (80006d8 <MX_GPIO_Init+0x104>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0x104>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_GPIO_Init+0x104>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <MX_GPIO_Init+0x104>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_GPIO_Init+0x104>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2120      	movs	r1, #32
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <MX_GPIO_Init+0x108>)
 800064e:	f001 fa5b 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0x10c>)
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	481f      	ldr	r0, [pc, #124]	; (80006e4 <MX_GPIO_Init+0x110>)
 8000668:	f001 f8ca 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800066c:	2303      	movs	r3, #3
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x114>)
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4819      	ldr	r0, [pc, #100]	; (80006e4 <MX_GPIO_Init+0x110>)
 8000680:	f001 f8be 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000684:	2320      	movs	r3, #32
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4810      	ldr	r0, [pc, #64]	; (80006dc <MX_GPIO_Init+0x108>)
 800069c:	f001 f8b0 	bl	8001800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2006      	movs	r0, #6
 80006a6:	f000 fdd6 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 fdef 	bl	800128e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2007      	movs	r0, #7
 80006b6:	f000 fdce 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 fde7 	bl	800128e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2028      	movs	r0, #40	; 0x28
 80006c6:	f000 fdc6 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ca:	2028      	movs	r0, #40	; 0x28
 80006cc:	f000 fddf 	bl	800128e <HAL_NVIC_EnableIRQ>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	10110000 	.word	0x10110000
 80006e4:	40011000 	.word	0x40011000
 80006e8:	10210000 	.word	0x10210000

080006ec <HAL_IncTick>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_IncTick(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <HAL_IncTick+0x24>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_IncTick+0x28>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <HAL_IncTick+0x28>)
 80006fe:	6013      	str	r3, [r2, #0]
  DLTuc_UpdateTimeStampMs(uwTick);
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <HAL_IncTick+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2b 	bl	8000560 <DLTuc_UpdateTimeStampMs>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000001c 	.word	0x2000001c
 8000714:	20001208 	.word	0x20001208

08000718 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	DLTuc_MessageTransmitDone();
 8000720:	f7ff fe7c 	bl	800041c <DLTuc_MessageTransmitDone>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <LLSerialTrDataFunctionC>:

void LLSerialTrDataFunctionC(uint8_t *DltLogData, uint8_t Size)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_DMA(&huart2, DltLogData, Size);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	b29b      	uxth	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <LLSerialTrDataFunctionC+0x24>)
 8000742:	f002 fc51 	bl	8002fe8 <HAL_UART_Transmit_DMA>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000113c 	.word	0x2000113c

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fc31 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f961 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f7ff ff37 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f7ff ff0f 	bl	8000588 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800076a:	f000 fb3f 	bl	8000dec <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800076e:	f000 fa69 	bl	8000c44 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /*Register the transmit data callback for DLT lib*/
  DLTuc_RegisterTransmitSerialDataCallback(LLSerialTrDataFunctionC);
 8000772:	489e      	ldr	r0, [pc, #632]	; (80009ec <main+0x298>)
 8000774:	f7ff fe10 	bl	8000398 <DLTuc_RegisterTransmitSerialDataCallback>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000778:	2100      	movs	r1, #0
 800077a:	489d      	ldr	r0, [pc, #628]	; (80009f0 <main+0x29c>)
 800077c:	f001 fec0 	bl	8002500 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000780:	2108      	movs	r1, #8
 8000782:	489b      	ldr	r0, [pc, #620]	; (80009f0 <main+0x29c>)
 8000784:	f001 febc 	bl	8002500 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000788:	4b99      	ldr	r3, [pc, #612]	; (80009f0 <main+0x29c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,InitPwmValue);
 8000790:	4b97      	ldr	r3, [pc, #604]	; (80009f0 <main+0x29c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	63da      	str	r2, [r3, #60]	; 0x3c


  /*LOG DROP TEST*/
for(int i=0; i<20; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	e089      	b.n	80008b4 <main+0x160>
{
	  DEBUGL(DL_INFO, "Log Drop testing0 :)  %d" , 5);
 80007a0:	2331      	movs	r3, #49	; 0x31
 80007a2:	061a      	lsls	r2, r3, #24
 80007a4:	2332      	movs	r3, #50	; 0x32
 80007a6:	041b      	lsls	r3, r3, #16
 80007a8:	431a      	orrs	r2, r3
 80007aa:	2333      	movs	r3, #51	; 0x33
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	4313      	orrs	r3, r2
 80007b0:	2234      	movs	r2, #52	; 0x34
 80007b2:	ea43 0102 	orr.w	r1, r3, r2
 80007b6:	2354      	movs	r3, #84	; 0x54
 80007b8:	061a      	lsls	r2, r3, #24
 80007ba:	2345      	movs	r3, #69	; 0x45
 80007bc:	041b      	lsls	r3, r3, #16
 80007be:	431a      	orrs	r2, r3
 80007c0:	2353      	movs	r3, #83	; 0x53
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	4313      	orrs	r3, r2
 80007c6:	2254      	movs	r2, #84	; 0x54
 80007c8:	431a      	orrs	r2, r3
 80007ca:	2305      	movs	r3, #5
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	4b89      	ldr	r3, [pc, #548]	; (80009f4 <main+0x2a0>)
 80007d0:	2004      	movs	r0, #4
 80007d2:	f7ff fe65 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing1 :)  %d" , 5);
 80007d6:	2331      	movs	r3, #49	; 0x31
 80007d8:	061a      	lsls	r2, r3, #24
 80007da:	2332      	movs	r3, #50	; 0x32
 80007dc:	041b      	lsls	r3, r3, #16
 80007de:	431a      	orrs	r2, r3
 80007e0:	2333      	movs	r3, #51	; 0x33
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	4313      	orrs	r3, r2
 80007e6:	2234      	movs	r2, #52	; 0x34
 80007e8:	ea43 0102 	orr.w	r1, r3, r2
 80007ec:	2354      	movs	r3, #84	; 0x54
 80007ee:	061a      	lsls	r2, r3, #24
 80007f0:	2345      	movs	r3, #69	; 0x45
 80007f2:	041b      	lsls	r3, r3, #16
 80007f4:	431a      	orrs	r2, r3
 80007f6:	2353      	movs	r3, #83	; 0x53
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	4313      	orrs	r3, r2
 80007fc:	2254      	movs	r2, #84	; 0x54
 80007fe:	431a      	orrs	r2, r3
 8000800:	2305      	movs	r3, #5
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <main+0x2a4>)
 8000806:	2004      	movs	r0, #4
 8000808:	f7ff fe4a 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing2:)  %d" , 5);
 800080c:	2331      	movs	r3, #49	; 0x31
 800080e:	061a      	lsls	r2, r3, #24
 8000810:	2332      	movs	r3, #50	; 0x32
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	431a      	orrs	r2, r3
 8000816:	2333      	movs	r3, #51	; 0x33
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	4313      	orrs	r3, r2
 800081c:	2234      	movs	r2, #52	; 0x34
 800081e:	ea43 0102 	orr.w	r1, r3, r2
 8000822:	2354      	movs	r3, #84	; 0x54
 8000824:	061a      	lsls	r2, r3, #24
 8000826:	2345      	movs	r3, #69	; 0x45
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	431a      	orrs	r2, r3
 800082c:	2353      	movs	r3, #83	; 0x53
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	4313      	orrs	r3, r2
 8000832:	2254      	movs	r2, #84	; 0x54
 8000834:	431a      	orrs	r2, r3
 8000836:	2305      	movs	r3, #5
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4b70      	ldr	r3, [pc, #448]	; (80009fc <main+0x2a8>)
 800083c:	2004      	movs	r0, #4
 800083e:	f7ff fe2f 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing3 :)  %d" , 5);
 8000842:	2331      	movs	r3, #49	; 0x31
 8000844:	061a      	lsls	r2, r3, #24
 8000846:	2332      	movs	r3, #50	; 0x32
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	431a      	orrs	r2, r3
 800084c:	2333      	movs	r3, #51	; 0x33
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4313      	orrs	r3, r2
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	ea43 0102 	orr.w	r1, r3, r2
 8000858:	2354      	movs	r3, #84	; 0x54
 800085a:	061a      	lsls	r2, r3, #24
 800085c:	2345      	movs	r3, #69	; 0x45
 800085e:	041b      	lsls	r3, r3, #16
 8000860:	431a      	orrs	r2, r3
 8000862:	2353      	movs	r3, #83	; 0x53
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	4313      	orrs	r3, r2
 8000868:	2254      	movs	r2, #84	; 0x54
 800086a:	431a      	orrs	r2, r3
 800086c:	2305      	movs	r3, #5
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <main+0x2ac>)
 8000872:	2004      	movs	r0, #4
 8000874:	f7ff fe14 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "Log Drop testing4 :)  %d" , 5);
 8000878:	2331      	movs	r3, #49	; 0x31
 800087a:	061a      	lsls	r2, r3, #24
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	041b      	lsls	r3, r3, #16
 8000880:	431a      	orrs	r2, r3
 8000882:	2333      	movs	r3, #51	; 0x33
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	4313      	orrs	r3, r2
 8000888:	2234      	movs	r2, #52	; 0x34
 800088a:	ea43 0102 	orr.w	r1, r3, r2
 800088e:	2354      	movs	r3, #84	; 0x54
 8000890:	061a      	lsls	r2, r3, #24
 8000892:	2345      	movs	r3, #69	; 0x45
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	431a      	orrs	r2, r3
 8000898:	2353      	movs	r3, #83	; 0x53
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	4313      	orrs	r3, r2
 800089e:	2254      	movs	r2, #84	; 0x54
 80008a0:	431a      	orrs	r2, r3
 80008a2:	2305      	movs	r3, #5
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <main+0x2b0>)
 80008a8:	2004      	movs	r0, #4
 80008aa:	f7ff fdf9 	bl	80004a0 <DLTuc_LogOutVarArgs>
for(int i=0; i<20; i++)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b13      	cmp	r3, #19
 80008b8:	f77f af72 	ble.w	80007a0 <main+0x4c>
}

  HAL_Delay(50);
 80008bc:	2032      	movs	r0, #50	; 0x32
 80008be:	f000 fbcf 	bl	8001060 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DEBUGL(DL_INFO, "Hello DLT Again %d Arg1 %d Arg2 :%d" , 2565, 56,23);
 80008c2:	2331      	movs	r3, #49	; 0x31
 80008c4:	061a      	lsls	r2, r3, #24
 80008c6:	2332      	movs	r3, #50	; 0x32
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	431a      	orrs	r2, r3
 80008cc:	2333      	movs	r3, #51	; 0x33
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	4313      	orrs	r3, r2
 80008d2:	2234      	movs	r2, #52	; 0x34
 80008d4:	ea43 0102 	orr.w	r1, r3, r2
 80008d8:	2354      	movs	r3, #84	; 0x54
 80008da:	061a      	lsls	r2, r3, #24
 80008dc:	2345      	movs	r3, #69	; 0x45
 80008de:	041b      	lsls	r3, r3, #16
 80008e0:	431a      	orrs	r2, r3
 80008e2:	2353      	movs	r3, #83	; 0x53
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	4313      	orrs	r3, r2
 80008e8:	2254      	movs	r2, #84	; 0x54
 80008ea:	431a      	orrs	r2, r3
 80008ec:	2317      	movs	r3, #23
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	2338      	movs	r3, #56	; 0x38
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	f640 2305 	movw	r3, #2565	; 0xa05
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <main+0x2b4>)
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fdcf 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGFF(DL_INFO, "GENERALLY DLT Again1");
 8000902:	2331      	movs	r3, #49	; 0x31
 8000904:	061a      	lsls	r2, r3, #24
 8000906:	2332      	movs	r3, #50	; 0x32
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	431a      	orrs	r2, r3
 800090c:	2333      	movs	r3, #51	; 0x33
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	4313      	orrs	r3, r2
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	ea43 0102 	orr.w	r1, r3, r2
 8000918:	2354      	movs	r3, #84	; 0x54
 800091a:	061a      	lsls	r2, r3, #24
 800091c:	2345      	movs	r3, #69	; 0x45
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	431a      	orrs	r2, r3
 8000922:	2353      	movs	r3, #83	; 0x53
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	4313      	orrs	r3, r2
 8000928:	2254      	movs	r2, #84	; 0x54
 800092a:	431a      	orrs	r2, r3
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <main+0x2b8>)
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <main+0x2bc>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <main+0x2c0>)
 8000936:	2004      	movs	r0, #4
 8000938:	f7ff fdb2 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "AnotherTest DLT Again",0);
 800093c:	2331      	movs	r3, #49	; 0x31
 800093e:	061a      	lsls	r2, r3, #24
 8000940:	2332      	movs	r3, #50	; 0x32
 8000942:	041b      	lsls	r3, r3, #16
 8000944:	431a      	orrs	r2, r3
 8000946:	2333      	movs	r3, #51	; 0x33
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	4313      	orrs	r3, r2
 800094c:	2234      	movs	r2, #52	; 0x34
 800094e:	ea43 0102 	orr.w	r1, r3, r2
 8000952:	2354      	movs	r3, #84	; 0x54
 8000954:	061a      	lsls	r2, r3, #24
 8000956:	2345      	movs	r3, #69	; 0x45
 8000958:	041b      	lsls	r3, r3, #16
 800095a:	431a      	orrs	r2, r3
 800095c:	2353      	movs	r3, #83	; 0x53
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	4313      	orrs	r3, r2
 8000962:	2254      	movs	r2, #84	; 0x54
 8000964:	431a      	orrs	r2, r3
 8000966:	2300      	movs	r3, #0
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <main+0x2c4>)
 800096c:	2004      	movs	r0, #4
 800096e:	f7ff fd97 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  DEBUGL(DL_INFO, "AnotherTest2 DLT Again",0);
 8000972:	2331      	movs	r3, #49	; 0x31
 8000974:	061a      	lsls	r2, r3, #24
 8000976:	2332      	movs	r3, #50	; 0x32
 8000978:	041b      	lsls	r3, r3, #16
 800097a:	431a      	orrs	r2, r3
 800097c:	2333      	movs	r3, #51	; 0x33
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	4313      	orrs	r3, r2
 8000982:	2234      	movs	r2, #52	; 0x34
 8000984:	ea43 0102 	orr.w	r1, r3, r2
 8000988:	2354      	movs	r3, #84	; 0x54
 800098a:	061a      	lsls	r2, r3, #24
 800098c:	2345      	movs	r3, #69	; 0x45
 800098e:	041b      	lsls	r3, r3, #16
 8000990:	431a      	orrs	r2, r3
 8000992:	2353      	movs	r3, #83	; 0x53
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	4313      	orrs	r3, r2
 8000998:	2254      	movs	r2, #84	; 0x54
 800099a:	431a      	orrs	r2, r3
 800099c:	2300      	movs	r3, #0
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <main+0x2c8>)
 80009a2:	2004      	movs	r0, #4
 80009a4:	f7ff fd7c 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  HAL_Delay(1000);
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f000 fb58 	bl	8001060 <HAL_Delay>
	  DEBUGL(DL_INFO, "Orange is sweet fruit");
 80009b0:	2331      	movs	r3, #49	; 0x31
 80009b2:	061a      	lsls	r2, r3, #24
 80009b4:	2332      	movs	r3, #50	; 0x32
 80009b6:	041b      	lsls	r3, r3, #16
 80009b8:	431a      	orrs	r2, r3
 80009ba:	2333      	movs	r3, #51	; 0x33
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	4313      	orrs	r3, r2
 80009c0:	2234      	movs	r2, #52	; 0x34
 80009c2:	ea43 0102 	orr.w	r1, r3, r2
 80009c6:	2354      	movs	r3, #84	; 0x54
 80009c8:	061a      	lsls	r2, r3, #24
 80009ca:	2345      	movs	r3, #69	; 0x45
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	431a      	orrs	r2, r3
 80009d0:	2353      	movs	r3, #83	; 0x53
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	4313      	orrs	r3, r2
 80009d6:	2254      	movs	r2, #84	; 0x54
 80009d8:	431a      	orrs	r2, r3
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <main+0x2cc>)
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff fd5f 	bl	80004a0 <DLTuc_LogOutVarArgs>
	  HAL_Delay(1000);
 80009e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e6:	f000 fb3b 	bl	8001060 <HAL_Delay>
	  DEBUGL(DL_INFO, "Hello DLT Again %d Arg1 %d Arg2 :%d" , 2565, 56,23);
 80009ea:	e76a      	b.n	80008c2 <main+0x16e>
 80009ec:	0800072d 	.word	0x0800072d
 80009f0:	200010f4 	.word	0x200010f4
 80009f4:	080042b8 	.word	0x080042b8
 80009f8:	080042d4 	.word	0x080042d4
 80009fc:	080042f0 	.word	0x080042f0
 8000a00:	08004308 	.word	0x08004308
 8000a04:	08004324 	.word	0x08004324
 8000a08:	08004340 	.word	0x08004340
 8000a0c:	08004390 	.word	0x08004390
 8000a10:	080043fc 	.word	0x080043fc
 8000a14:	08004364 	.word	0x08004364
 8000a18:	080043a4 	.word	0x080043a4
 8000a1c:	080043bc 	.word	0x080043bc
 8000a20:	080043d4 	.word	0x080043d4

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b090      	sub	sp, #64	; 0x40
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	2228      	movs	r2, #40	; 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 ffb2 	bl	800399c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4e:	2310      	movs	r3, #16
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f889 	bl	8001b7c <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a70:	f000 f819 	bl	8000aa6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 faf6 	bl	8002080 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a9a:	f000 f804 	bl	8000aa6 <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3740      	adds	r7, #64	; 0x40
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aaa:	b672      	cpsid	i
}
 8000aac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aae:	e7fe      	b.n	8000aae <Error_Handler+0x8>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_MspInit+0x5c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_MspInit+0x60>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_MspInit+0x60>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f7ff fdc7 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 ffe6 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 ffdf 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Channel6_IRQHandler+0x10>)
 8000b86:	f000 fd07 	bl	8001598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200011c4 	.word	0x200011c4

08000b94 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <DMA1_Channel7_IRQHandler+0x10>)
 8000b9a:	f000 fcfd 	bl	8001598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20001180 	.word	0x20001180

08000ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART2_IRQHandler+0x10>)
 8000bae:	f002 fa87 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000113c 	.word	0x2000113c

08000bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc4:	f000 ffb8 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f002 fea4 	bl	8003948 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20005000 	.word	0x20005000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200010f0 	.word	0x200010f0
 8000c34:	20001220 	.word	0x20001220

08000c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c76:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <MX_TIM4_Init+0x100>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c7c:	223f      	movs	r2, #63	; 0x3f
 8000c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9a:	4829      	ldr	r0, [pc, #164]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c9c:	f001 fb88 	bl	80023b0 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ca6:	f7ff fefe 	bl	8000aa6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4822      	ldr	r0, [pc, #136]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000cb8:	f001 fd82 	bl	80027c0 <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cc2:	f7ff fef0 	bl	8000aa6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc6:	481e      	ldr	r0, [pc, #120]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000cc8:	f001 fbc1 	bl	800244e <HAL_TIM_PWM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000cd2:	f7ff fee8 	bl	8000aa6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000ce6:	f002 f8d3 	bl	8002e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000cf0:	f7ff fed9 	bl	8000aa6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf4:	2360      	movs	r3, #96	; 0x60
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000d0c:	f001 fc9a 	bl	8002644 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d16:	f7ff fec6 	bl	8000aa6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000d22:	f001 fc8f 	bl	8002644 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d2c:	f7ff febb 	bl	8000aa6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000d32:	f000 f827 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	; 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200010f4 	.word	0x200010f4
 8000d44:	40000800 	.word	0x40000800

08000d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x34>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10b      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_TIM_Base_MspInit+0x38>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_TIM_Base_MspInit+0x38>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_TIM_Base_MspInit+0x38>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40000800 	.word	0x40000800
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_MspPostInit+0x5c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d118      	bne.n	8000dd6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_TIM_MspPostInit+0x60>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_TIM_MspPostInit+0x60>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_TIM_MspPostInit+0x60>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000dbc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_TIM_MspPostInit+0x64>)
 8000dd2:	f000 fd15 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40000800 	.word	0x40000800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010c00 	.word	0x40010c00

08000dec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART2_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f002 f892 	bl	8002f4c <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f7ff fe3a 	bl	8000aa6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000113c 	.word	0x2000113c
 8000e3c:	40004400 	.word	0x40004400

08000e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a3f      	ldr	r2, [pc, #252]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d177      	bne.n	8000f50 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e60:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6a:	61d3      	str	r3, [r2, #28]
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e90:	230c      	movs	r3, #12
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482f      	ldr	r0, [pc, #188]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000ea4:	f000 fcac 	bl	8001800 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ed8:	4822      	ldr	r0, [pc, #136]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000eda:	f000 f9f3 	bl	80012c4 <HAL_DMA_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8000ee4:	f7ff fddf 	bl	8000aa6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_UART_MspInit+0x130>)
 8000ef8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f26:	f000 f9cd 	bl	80012c4 <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000f30:	f7ff fdb9 	bl	8000aa6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2026      	movs	r0, #38	; 0x26
 8000f46:	f000 f986 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f4a:	2026      	movs	r0, #38	; 0x26
 8000f4c:	f000 f99f 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	20001180 	.word	0x20001180
 8000f68:	40020080 	.word	0x40020080
 8000f6c:	200011c4 	.word	0x200011c4
 8000f70:	4002006c 	.word	0x4002006c

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f9a:	f7ff fe4d 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f002 fcd9 	bl	8003954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff fbd7 	bl	8000754 <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fb0:	08004458 	.word	0x08004458
  ldr r2, =_sbss
 8000fb4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000fb8:	2000121c 	.word	0x2000121c

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f935 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fd68 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f94d 	bl	80012aa <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f915 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000014 	.word	0x20000014
 8001044:	2000001c 	.word	0x2000001c
 8001048:	20000018 	.word	0x20000018

0800104c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20001208 	.word	0x20001208

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff fff0 	bl	800104c <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffe0 	bl	800104c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000001c 	.word	0x2000001c

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4906      	ldr	r1, [pc, #24]	; (8001140 <__NVIC_EnableIRQ+0x34>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff90 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff2d 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff42 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff90 	bl	8001198 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff35 	bl	800110c <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e043      	b.n	8001362 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_DMA_Init+0xa8>)
 80012e2:	4413      	add	r3, r2
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_DMA_Init+0xac>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_DMA_Init+0xb0>)
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2202      	movs	r2, #2
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800130e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001312:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800131c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	bffdfff8 	.word	0xbffdfff8
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_DMA_Start_IT+0x20>
 8001394:	2302      	movs	r3, #2
 8001396:	e04a      	b.n	800142e <HAL_DMA_Start_IT+0xb6>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d13a      	bne.n	8001420 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2202      	movs	r2, #2
 80013ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f9e8 	bl	80017a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 020e 	orr.w	r2, r2, #14
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e00f      	b.n	800140e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0204 	bic.w	r2, r2, #4
 80013fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 020a 	orr.w	r2, r2, #10
 800140c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e005      	b.n	800142c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001428:	2302      	movs	r3, #2
 800142a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800142c:	7dfb      	ldrb	r3, [r7, #23]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001448:	2b02      	cmp	r3, #2
 800144a:	d008      	beq.n	800145e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e020      	b.n	80014a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d005      	beq.n	80014ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2204      	movs	r2, #4
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e051      	b.n	8001572 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 020e 	bic.w	r2, r2, #14
 80014dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_DMA_Abort_IT+0xd0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d029      	beq.n	800154c <HAL_DMA_Abort_IT+0xa0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_DMA_Abort_IT+0xd4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d022      	beq.n	8001548 <HAL_DMA_Abort_IT+0x9c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_DMA_Abort_IT+0xd8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d01a      	beq.n	8001542 <HAL_DMA_Abort_IT+0x96>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_DMA_Abort_IT+0xdc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d012      	beq.n	800153c <HAL_DMA_Abort_IT+0x90>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <HAL_DMA_Abort_IT+0xe0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00a      	beq.n	8001536 <HAL_DMA_Abort_IT+0x8a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_DMA_Abort_IT+0xe4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <HAL_DMA_Abort_IT+0x84>
 800152a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800152e:	e00e      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001534:	e00b      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153a:	e008      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	e005      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	e002      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001548:	2310      	movs	r3, #16
 800154a:	e000      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 800154c:	2301      	movs	r3, #1
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_DMA_Abort_IT+0xe8>)
 8001550:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	4798      	blx	r3
    } 
  }
  return status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020008 	.word	0x40020008
 8001580:	4002001c 	.word	0x4002001c
 8001584:	40020030 	.word	0x40020030
 8001588:	40020044 	.word	0x40020044
 800158c:	40020058 	.word	0x40020058
 8001590:	4002006c 	.word	0x4002006c
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	2204      	movs	r2, #4
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d04f      	beq.n	8001660 <HAL_DMA_IRQHandler+0xc8>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d04a      	beq.n	8001660 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0204 	bic.w	r2, r2, #4
 80015e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a66      	ldr	r2, [pc, #408]	; (8001788 <HAL_DMA_IRQHandler+0x1f0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d029      	beq.n	8001646 <HAL_DMA_IRQHandler+0xae>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_DMA_IRQHandler+0x1f4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d022      	beq.n	8001642 <HAL_DMA_IRQHandler+0xaa>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a63      	ldr	r2, [pc, #396]	; (8001790 <HAL_DMA_IRQHandler+0x1f8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01a      	beq.n	800163c <HAL_DMA_IRQHandler+0xa4>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a62      	ldr	r2, [pc, #392]	; (8001794 <HAL_DMA_IRQHandler+0x1fc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d012      	beq.n	8001636 <HAL_DMA_IRQHandler+0x9e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a60      	ldr	r2, [pc, #384]	; (8001798 <HAL_DMA_IRQHandler+0x200>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00a      	beq.n	8001630 <HAL_DMA_IRQHandler+0x98>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5f      	ldr	r2, [pc, #380]	; (800179c <HAL_DMA_IRQHandler+0x204>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d102      	bne.n	800162a <HAL_DMA_IRQHandler+0x92>
 8001624:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001628:	e00e      	b.n	8001648 <HAL_DMA_IRQHandler+0xb0>
 800162a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800162e:	e00b      	b.n	8001648 <HAL_DMA_IRQHandler+0xb0>
 8001630:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001634:	e008      	b.n	8001648 <HAL_DMA_IRQHandler+0xb0>
 8001636:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800163a:	e005      	b.n	8001648 <HAL_DMA_IRQHandler+0xb0>
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	e002      	b.n	8001648 <HAL_DMA_IRQHandler+0xb0>
 8001642:	2340      	movs	r3, #64	; 0x40
 8001644:	e000      	b.n	8001648 <HAL_DMA_IRQHandler+0xb0>
 8001646:	2304      	movs	r3, #4
 8001648:	4a55      	ldr	r2, [pc, #340]	; (80017a0 <HAL_DMA_IRQHandler+0x208>)
 800164a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 8094 	beq.w	800177e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800165e:	e08e      	b.n	800177e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2202      	movs	r2, #2
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d056      	beq.n	800171e <HAL_DMA_IRQHandler+0x186>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d051      	beq.n	800171e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10b      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 020a 	bic.w	r2, r2, #10
 8001696:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_DMA_IRQHandler+0x1f0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d029      	beq.n	80016fe <HAL_DMA_IRQHandler+0x166>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a37      	ldr	r2, [pc, #220]	; (800178c <HAL_DMA_IRQHandler+0x1f4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_IRQHandler+0x162>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a35      	ldr	r2, [pc, #212]	; (8001790 <HAL_DMA_IRQHandler+0x1f8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01a      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x15c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a34      	ldr	r2, [pc, #208]	; (8001794 <HAL_DMA_IRQHandler+0x1fc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d012      	beq.n	80016ee <HAL_DMA_IRQHandler+0x156>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a32      	ldr	r2, [pc, #200]	; (8001798 <HAL_DMA_IRQHandler+0x200>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00a      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x150>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a31      	ldr	r2, [pc, #196]	; (800179c <HAL_DMA_IRQHandler+0x204>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d102      	bne.n	80016e2 <HAL_DMA_IRQHandler+0x14a>
 80016dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016e0:	e00e      	b.n	8001700 <HAL_DMA_IRQHandler+0x168>
 80016e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e6:	e00b      	b.n	8001700 <HAL_DMA_IRQHandler+0x168>
 80016e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ec:	e008      	b.n	8001700 <HAL_DMA_IRQHandler+0x168>
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f2:	e005      	b.n	8001700 <HAL_DMA_IRQHandler+0x168>
 80016f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f8:	e002      	b.n	8001700 <HAL_DMA_IRQHandler+0x168>
 80016fa:	2320      	movs	r3, #32
 80016fc:	e000      	b.n	8001700 <HAL_DMA_IRQHandler+0x168>
 80016fe:	2302      	movs	r3, #2
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_DMA_IRQHandler+0x208>)
 8001702:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d034      	beq.n	800177e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800171c:	e02f      	b.n	800177e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2208      	movs	r2, #8
 8001724:	409a      	lsls	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d028      	beq.n	8001780 <HAL_DMA_IRQHandler+0x1e8>
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d023      	beq.n	8001780 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020e 	bic.w	r2, r2, #14
 8001746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
    }
  }
  return;
 800177e:	bf00      	nop
 8001780:	bf00      	nop
}
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020008 	.word	0x40020008
 800178c:	4002001c 	.word	0x4002001c
 8001790:	40020030 	.word	0x40020030
 8001794:	40020044 	.word	0x40020044
 8001798:	40020058 	.word	0x40020058
 800179c:	4002006c 	.word	0x4002006c
 80017a0:	40020000 	.word	0x40020000

080017a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2101      	movs	r1, #1
 80017bc:	fa01 f202 	lsl.w	r2, r1, r2
 80017c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d108      	bne.n	80017e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017e2:	e007      	b.n	80017f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e169      	b.n	8001ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8158 	bne.w	8001ae2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a9a      	ldr	r2, [pc, #616]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d05e      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800183c:	4a98      	ldr	r2, [pc, #608]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d875      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001842:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d058      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001848:	4a96      	ldr	r2, [pc, #600]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d86f      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800184e:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d052      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001854:	4a94      	ldr	r2, [pc, #592]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d869      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800185a:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d04c      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001860:	4a92      	ldr	r2, [pc, #584]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d863      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001866:	4a92      	ldr	r2, [pc, #584]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d046      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800186c:	4a90      	ldr	r2, [pc, #576]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d85d      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d82a      	bhi.n	80018cc <HAL_GPIO_Init+0xcc>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d859      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_GPIO_Init+0x80>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018d5 	.word	0x080018d5
 8001888:	080018e7 	.word	0x080018e7
 800188c:	08001929 	.word	0x08001929
 8001890:	0800192f 	.word	0x0800192f
 8001894:	0800192f 	.word	0x0800192f
 8001898:	0800192f 	.word	0x0800192f
 800189c:	0800192f 	.word	0x0800192f
 80018a0:	0800192f 	.word	0x0800192f
 80018a4:	0800192f 	.word	0x0800192f
 80018a8:	0800192f 	.word	0x0800192f
 80018ac:	0800192f 	.word	0x0800192f
 80018b0:	0800192f 	.word	0x0800192f
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	0800192f 	.word	0x0800192f
 80018bc:	0800192f 	.word	0x0800192f
 80018c0:	0800192f 	.word	0x0800192f
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	4a79      	ldr	r2, [pc, #484]	; (8001ab4 <HAL_GPIO_Init+0x2b4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e029      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e024      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01f      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e01a      	b.n	8001930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e013      	b.n	8001930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e009      	b.n	8001930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e003      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x130>
          break;
 800192e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d801      	bhi.n	800193a <HAL_GPIO_Init+0x13a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	e001      	b.n	800193e <HAL_GPIO_Init+0x13e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d802      	bhi.n	800194c <HAL_GPIO_Init+0x14c>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x152>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3b08      	subs	r3, #8
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	210f      	movs	r1, #15
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80b1 	beq.w	8001ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001998:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2bc>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a40      	ldr	r2, [pc, #256]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d013      	beq.n	80019ec <HAL_GPIO_Init+0x1ec>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00d      	beq.n	80019e8 <HAL_GPIO_Init+0x1e8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3e      	ldr	r2, [pc, #248]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0x1e4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_GPIO_Init+0x1e0>
 80019dc:	2303      	movs	r3, #3
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e0:	2304      	movs	r3, #4
 80019e2:	e004      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019ec:	2300      	movs	r3, #0
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	f002 0203 	and.w	r2, r2, #3
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4093      	lsls	r3, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fe:	492f      	ldr	r1, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x2bc>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	492c      	ldr	r1, [pc, #176]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4928      	ldr	r1, [pc, #160]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	4922      	ldr	r1, [pc, #136]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	491e      	ldr	r1, [pc, #120]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d021      	beq.n	8001ad4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
 8001a9c:	e021      	b.n	8001ae2 <HAL_GPIO_Init+0x2e2>
 8001a9e:	bf00      	nop
 8001aa0:	10320000 	.word	0x10320000
 8001aa4:	10310000 	.word	0x10310000
 8001aa8:	10220000 	.word	0x10220000
 8001aac:	10210000 	.word	0x10210000
 8001ab0:	10120000 	.word	0x10120000
 8001ab4:	10110000 	.word	0x10110000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40010800 	.word	0x40010800
 8001ac4:	40010c00 	.word	0x40010c00
 8001ac8:	40011000 	.word	0x40011000
 8001acc:	40011400 	.word	0x40011400
 8001ad0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4909      	ldr	r1, [pc, #36]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f ae8e 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	372c      	adds	r7, #44	; 0x2c
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f806 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e272      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
 8001bb4:	4b8c      	ldr	r3, [pc, #560]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d06c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d168      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e24c      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x76>
 8001be4:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a7f      	ldr	r2, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7a      	ldr	r2, [pc, #488]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xbc>
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a67      	ldr	r2, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f9f8 	bl	800104c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f9f4 	bl	800104c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e200      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe4>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff f9e4 	bl	800104c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff f9e0 	bl	800104c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1ec      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x10c>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1c0      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4939      	ldr	r1, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f999 	bl	800104c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f995 	bl	800104c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1a1      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4927      	ldr	r1, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f978 	bl	800104c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff f974 	bl	800104c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e180      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03a      	beq.n	8001e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d019      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff f958 	bl	800104c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff f954 	bl	800104c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e160      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 fad8 	bl	8002374 <RCC_Delay>
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f93e 	bl	800104c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f93a 	bl	800104c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d908      	bls.n	8001df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e146      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	42420000 	.word	0x42420000
 8001df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e9      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a6 	beq.w	8001f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a87      	ldr	r2, [pc, #540]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x4c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x4c8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7e      	ldr	r2, [pc, #504]	; (8002044 <HAL_RCC_OscConfig+0x4c8>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f8fb 	bl	800104c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7ff f8f7 	bl	800104c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e103      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b75      	ldr	r3, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x4c8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x312>
 8001e80:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e02d      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001e96:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a69      	ldr	r2, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a66      	ldr	r2, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	e01c      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x356>
 8001eb8:	4b61      	ldr	r3, [pc, #388]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a60      	ldr	r2, [pc, #384]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	4b5e      	ldr	r3, [pc, #376]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a5d      	ldr	r2, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a5a      	ldr	r2, [pc, #360]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f8ab 	bl	800104c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7ff f8a7 	bl	800104c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0b1      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ee      	beq.n	8001efa <HAL_RCC_OscConfig+0x37e>
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f895 	bl	800104c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff f891 	bl	800104c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e09b      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8087 	beq.w	8002072 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d061      	beq.n	8002034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d146      	bne.n	8002006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f865 	bl	800104c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff f861 	bl	800104c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e06d      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d108      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4921      	ldr	r1, [pc, #132]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a19      	ldr	r1, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	491b      	ldr	r1, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff f835 	bl	800104c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f831 	bl	800104c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e03d      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x46a>
 8002004:	e035      	b.n	8002072 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff f81e 	bl	800104c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff f81a 	bl	800104c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e026      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x498>
 8002032:	e01e      	b.n	8002072 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e019      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
 8002048:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_OscConfig+0x500>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0d0      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4965      	ldr	r1, [pc, #404]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b8      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020dc:	4b59      	ldr	r3, [pc, #356]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f4:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a52      	ldr	r2, [pc, #328]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	494d      	ldr	r1, [pc, #308]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d040      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e07f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e073      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06b      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b39      	ldr	r3, [pc, #228]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4936      	ldr	r1, [pc, #216]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7fe ff6c 	bl	800104c <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7fe ff68 	bl	800104c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e053      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d210      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e032      	b.n	8002236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4916      	ldr	r1, [pc, #88]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220e:	f000 f821 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002212:	4602      	mov	r2, r0
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	490a      	ldr	r1, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1cc>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1d0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fedc 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000
 8002244:	40021000 	.word	0x40021000
 8002248:	08004404 	.word	0x08004404
 800224c:	20000014 	.word	0x20000014
 8002250:	20000018 	.word	0x20000018

08002254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	b490      	push	{r4, r7}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_RCC_GetSysClockFreq+0xac>)
 800225c:	1d3c      	adds	r4, r7, #4
 800225e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002264:	f240 2301 	movw	r3, #513	; 0x201
 8002268:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b04      	cmp	r3, #4
 800228c:	d002      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x40>
 800228e:	2b08      	cmp	r3, #8
 8002290:	d003      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x46>
 8002292:	e02b      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002296:	623b      	str	r3, [r7, #32]
      break;
 8002298:	e02b      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	0c9b      	lsrs	r3, r3, #18
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3328      	adds	r3, #40	; 0x28
 80022a4:	443b      	add	r3, r7
 80022a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d012      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0c5b      	lsrs	r3, r3, #17
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	3328      	adds	r3, #40	; 0x28
 80022c2:	443b      	add	r3, r7
 80022c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e004      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	623b      	str	r3, [r7, #32]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ee:	623b      	str	r3, [r7, #32]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc90      	pop	{r4, r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	080043ec 	.word	0x080043ec
 8002304:	40021000 	.word	0x40021000
 8002308:	007a1200 	.word	0x007a1200
 800230c:	003d0900 	.word	0x003d0900

08002310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_RCC_GetHCLKFreq+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000014 	.word	0x20000014

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002328:	f7ff fff2 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4903      	ldr	r1, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	08004414 	.word	0x08004414

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002350:	f7ff ffde 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0adb      	lsrs	r3, r3, #11
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08004414 	.word	0x08004414

08002374 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <RCC_Delay+0x34>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <RCC_Delay+0x38>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0a5b      	lsrs	r3, r3, #9
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002390:	bf00      	nop
  }
  while (Delay --);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	60fa      	str	r2, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <RCC_Delay+0x1c>
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	20000014 	.word	0x20000014
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e041      	b.n	8002446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fcb6 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 faaa 	bl	8002948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e041      	b.n	80024e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f839 	bl	80024ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f000 fa5b 	bl	8002948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_TIM_PWM_Start+0x24>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e022      	b.n	800256a <HAL_TIM_PWM_Start+0x6a>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b04      	cmp	r3, #4
 8002528:	d109      	bne.n	800253e <HAL_TIM_PWM_Start+0x3e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	bf14      	ite	ne
 8002536:	2301      	movne	r3, #1
 8002538:	2300      	moveq	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	e015      	b.n	800256a <HAL_TIM_PWM_Start+0x6a>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d109      	bne.n	8002558 <HAL_TIM_PWM_Start+0x58>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e008      	b.n	800256a <HAL_TIM_PWM_Start+0x6a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e05e      	b.n	8002630 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0x82>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002580:	e013      	b.n	80025aa <HAL_TIM_PWM_Start+0xaa>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d104      	bne.n	8002592 <HAL_TIM_PWM_Start+0x92>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002590:	e00b      	b.n	80025aa <HAL_TIM_PWM_Start+0xaa>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0xa2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a0:	e003      	b.n	80025aa <HAL_TIM_PWM_Start+0xaa>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fc48 	bl	8002e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_TIM_PWM_Start+0x138>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_TIM_PWM_Start+0x138>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00e      	beq.n	80025fa <HAL_TIM_PWM_Start+0xfa>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d009      	beq.n	80025fa <HAL_TIM_PWM_Start+0xfa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_PWM_Start+0x13c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_TIM_PWM_Start+0xfa>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <HAL_TIM_PWM_Start+0x140>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d111      	bne.n	800261e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b06      	cmp	r3, #6
 800260a:	d010      	beq.n	800262e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	e007      	b.n	800262e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800

08002644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800265a:	2302      	movs	r3, #2
 800265c:	e0ac      	b.n	80027b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	f200 809f 	bhi.w	80027ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	080026a9 	.word	0x080026a9
 8002678:	080027ad 	.word	0x080027ad
 800267c:	080027ad 	.word	0x080027ad
 8002680:	080027ad 	.word	0x080027ad
 8002684:	080026e9 	.word	0x080026e9
 8002688:	080027ad 	.word	0x080027ad
 800268c:	080027ad 	.word	0x080027ad
 8002690:	080027ad 	.word	0x080027ad
 8002694:	0800272b 	.word	0x0800272b
 8002698:	080027ad 	.word	0x080027ad
 800269c:	080027ad 	.word	0x080027ad
 80026a0:	080027ad 	.word	0x080027ad
 80026a4:	0800276b 	.word	0x0800276b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f9ac 	bl	8002a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0204 	bic.w	r2, r2, #4
 80026d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6999      	ldr	r1, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	619a      	str	r2, [r3, #24]
      break;
 80026e6:	e062      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f9f2 	bl	8002ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6999      	ldr	r1, [r3, #24]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	021a      	lsls	r2, r3, #8
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	619a      	str	r2, [r3, #24]
      break;
 8002728:	e041      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fa3b 	bl	8002bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0208 	orr.w	r2, r2, #8
 8002744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0204 	bic.w	r2, r2, #4
 8002754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69d9      	ldr	r1, [r3, #28]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	61da      	str	r2, [r3, #28]
      break;
 8002768:	e021      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fa85 	bl	8002c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69d9      	ldr	r1, [r3, #28]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	61da      	str	r2, [r3, #28]
      break;
 80027aa:	e000      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80027ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_ConfigClockSource+0x18>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0b3      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x180>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	d03e      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xd0>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002816:	f200 8087 	bhi.w	8002928 <HAL_TIM_ConfigClockSource+0x168>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	f000 8085 	beq.w	800292c <HAL_TIM_ConfigClockSource+0x16c>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d87f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d01a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xa2>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d87b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b60      	cmp	r3, #96	; 0x60
 8002832:	d050      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x116>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d877      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002838:	2b50      	cmp	r3, #80	; 0x50
 800283a:	d03c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xf6>
 800283c:	2b50      	cmp	r3, #80	; 0x50
 800283e:	d873      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d058      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x136>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d86f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002848:	2b30      	cmp	r3, #48	; 0x30
 800284a:	d064      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x156>
 800284c:	2b30      	cmp	r3, #48	; 0x30
 800284e:	d86b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d060      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x156>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d867      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x156>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d05a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002860:	e062      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f000 faca 	bl	8002e0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002884:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	609a      	str	r2, [r3, #8]
      break;
 800288e:	e04e      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f000 fab3 	bl	8002e0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b2:	609a      	str	r2, [r3, #8]
      break;
 80028b4:	e03b      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 fa2a 	bl	8002d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2150      	movs	r1, #80	; 0x50
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa81 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e02b      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 fa48 	bl	8002d78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2160      	movs	r1, #96	; 0x60
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa71 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e01b      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	461a      	mov	r2, r3
 8002904:	f000 fa0a 	bl	8002d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa61 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 8002914:	e00b      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 fa58 	bl	8002dd6 <TIM_ITRx_SetConfig>
        break;
 8002926:	e002      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800292c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <TIM_Base_SetConfig+0xb8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00b      	beq.n	8002978 <TIM_Base_SetConfig+0x30>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002966:	d007      	beq.n	8002978 <TIM_Base_SetConfig+0x30>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <TIM_Base_SetConfig+0xbc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d003      	beq.n	8002978 <TIM_Base_SetConfig+0x30>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <TIM_Base_SetConfig+0xc0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d108      	bne.n	800298a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <TIM_Base_SetConfig+0xb8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00b      	beq.n	80029aa <TIM_Base_SetConfig+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0x62>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <TIM_Base_SetConfig+0xbc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0x62>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <TIM_Base_SetConfig+0xc0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <TIM_Base_SetConfig+0xb8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d103      	bne.n	80029f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	615a      	str	r2, [r3, #20]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800

08002a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f023 0201 	bic.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f023 0302 	bic.w	r3, r3, #2
 8002a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <TIM_OC1_SetConfig+0xc8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10c      	bne.n	8002a82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0308 	bic.w	r3, r3, #8
 8002a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <TIM_OC1_SetConfig+0xc8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d111      	bne.n	8002aae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00

08002ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0210 	bic.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0320 	bic.w	r3, r3, #32
 8002b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <TIM_OC2_SetConfig+0xd0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10d      	bne.n	8002b54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <TIM_OC2_SetConfig+0xd0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d113      	bne.n	8002b84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40012c00 	.word	0x40012c00

08002bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <TIM_OC3_SetConfig+0xd0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10d      	bne.n	8002c26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <TIM_OC3_SetConfig+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00

08002c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	031b      	lsls	r3, r3, #12
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <TIM_OC4_SetConfig+0x98>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d109      	bne.n	8002cf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00

08002d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 030a 	bic.w	r3, r3, #10
 8002d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 0210 	bic.w	r2, r3, #16
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002da2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	031b      	lsls	r3, r3, #12
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	621a      	str	r2, [r3, #32]
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f043 0307 	orr.w	r3, r3, #7
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	021a      	lsls	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e046      	b.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d009      	beq.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10c      	bne.n	8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800

08002f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e03f      	b.n	8002fde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd ff64 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fc4b 	bl	800382c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d153      	bne.n	80030aa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_UART_Transmit_DMA+0x26>
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e04c      	b.n	80030ac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_UART_Transmit_DMA+0x38>
 800301c:	2302      	movs	r3, #2
 800301e:	e045      	b.n	80030ac <HAL_UART_Transmit_DMA+0xc4>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2221      	movs	r2, #33	; 0x21
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_UART_Transmit_DMA+0xcc>)
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_UART_Transmit_DMA+0xd0>)
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_UART_Transmit_DMA+0xd4>)
 800305e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	2200      	movs	r2, #0
 8003066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003068:	f107 0308 	add.w	r3, r7, #8
 800306c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	461a      	mov	r2, r3
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	f7fe f97a 	bl	8001378 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800308c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	08003461 	.word	0x08003461
 80030b8:	080034b3 	.word	0x080034b3
 80030bc:	080034cf 	.word	0x080034cf

080030c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_UART_IRQHandler+0x52>
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fae5 	bl	80036da <UART_Receive_IT>
      return;
 8003110:	e17b      	b.n	800340a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80b1 	beq.w	800327c <HAL_UART_IRQHandler+0x1bc>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_UART_IRQHandler+0x70>
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80a6 	beq.w	800327c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_UART_IRQHandler+0x90>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_UART_IRQHandler+0xb0>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0202 	orr.w	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_UART_IRQHandler+0xd0>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00f      	beq.n	80031ba <HAL_UART_IRQHandler+0xfa>
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_UART_IRQHandler+0xee>
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0208 	orr.w	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 811e 	beq.w	8003400 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_UART_IRQHandler+0x11e>
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fa7e 	bl	80036da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <HAL_UART_IRQHandler+0x146>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d031      	beq.n	800326a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9c0 	bl	800358c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d023      	beq.n	8003262 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003228:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	2b00      	cmp	r3, #0
 8003230:	d013      	beq.n	800325a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	4a76      	ldr	r2, [pc, #472]	; (8003410 <HAL_UART_IRQHandler+0x350>)
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe f934 	bl	80014ac <HAL_DMA_Abort_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e00e      	b.n	8003278 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8ec 	bl	8003438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	e00a      	b.n	8003278 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8e8 	bl	8003438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e006      	b.n	8003278 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8e4 	bl	8003438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003276:	e0c3      	b.n	8003400 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	bf00      	nop
    return;
 800327a:	e0c1      	b.n	8003400 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 80a1 	bne.w	80033c8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 809b 	beq.w	80033c8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8095 	beq.w	80033c8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d04e      	beq.n	8003360 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032cc:	8a3b      	ldrh	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8098 	beq.w	8003404 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d8:	8a3a      	ldrh	r2, [r7, #16]
 80032da:	429a      	cmp	r2, r3
 80032dc:	f080 8092 	bcs.w	8003404 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8a3a      	ldrh	r2, [r7, #16]
 80032e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d02b      	beq.n	8003348 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0210 	bic.w	r2, r2, #16
 800333c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe f877 	bl	8001436 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003350:	b29b      	uxth	r3, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	b29b      	uxth	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f876 	bl	800344a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800335e:	e051      	b.n	8003404 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003368:	b29b      	uxth	r3, r3
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d047      	beq.n	8003408 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003378:	8a7b      	ldrh	r3, [r7, #18]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800338c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0210 	bic.w	r2, r2, #16
 80033ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033bc:	8a7b      	ldrh	r3, [r7, #18]
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f842 	bl	800344a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033c6:	e01f      	b.n	8003408 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_UART_IRQHandler+0x324>
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f915 	bl	800360c <UART_Transmit_IT>
    return;
 80033e2:	e012      	b.n	800340a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <HAL_UART_IRQHandler+0x34a>
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f956 	bl	80036aa <UART_EndTransmit_IT>
    return;
 80033fe:	e004      	b.n	800340a <HAL_UART_IRQHandler+0x34a>
    return;
 8003400:	bf00      	nop
 8003402:	e002      	b.n	800340a <HAL_UART_IRQHandler+0x34a>
      return;
 8003404:	bf00      	nop
 8003406:	e000      	b.n	800340a <HAL_UART_IRQHandler+0x34a>
      return;
 8003408:	bf00      	nop
  }
}
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	080035e5 	.word	0x080035e5

08003414 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d113      	bne.n	80034a4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034a2:	e002      	b.n	80034aa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7fd f937 	bl	8000718 <HAL_UART_TxCpltCallback>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff ffa7 	bl	8003414 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b21      	cmp	r3, #33	; 0x21
 8003500:	d108      	bne.n	8003514 <UART_DMAError+0x46>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	f000 f827 	bl	8003562 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b22      	cmp	r3, #34	; 0x22
 8003534:	d108      	bne.n	8003548 <UART_DMAError+0x7a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003542:	68b8      	ldr	r0, [r7, #8]
 8003544:	f000 f822 	bl	800358c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f7ff ff6f 	bl	8003438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003578:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d107      	bne.n	80035cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0210 	bic.w	r2, r2, #16
 80035ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff ff1a 	bl	8003438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b21      	cmp	r3, #33	; 0x21
 800361e:	d13e      	bne.n	800369e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003628:	d114      	bne.n	8003654 <UART_Transmit_IT+0x48>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d110      	bne.n	8003654 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003646:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	1c9a      	adds	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	e008      	b.n	8003666 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	1c59      	adds	r1, r3, #1
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6211      	str	r1, [r2, #32]
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4619      	mov	r1, r3
 8003674:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003688:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003698:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd f824 	bl	8000718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b22      	cmp	r3, #34	; 0x22
 80036ec:	f040 8099 	bne.w	8003822 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d117      	bne.n	800372a <UART_Receive_IT+0x50>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003718:	b29a      	uxth	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
 8003728:	e026      	b.n	8003778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	d007      	beq.n	800374e <UART_Receive_IT+0x74>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <UART_Receive_IT+0x82>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e008      	b.n	800376e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003768:	b2da      	uxtb	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4619      	mov	r1, r3
 8003786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003788:	2b00      	cmp	r3, #0
 800378a:	d148      	bne.n	800381e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0220 	bic.w	r2, r2, #32
 800379a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d123      	bne.n	8003814 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0210 	bic.w	r2, r2, #16
 80037e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d10a      	bne.n	8003806 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff fe1c 	bl	800344a <HAL_UARTEx_RxEventCallback>
 8003812:	e002      	b.n	800381a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fe06 	bl	8003426 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e002      	b.n	8003824 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003866:	f023 030c 	bic.w	r3, r3, #12
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	430b      	orrs	r3, r1
 8003872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <UART_SetConfig+0x114>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003894:	f7fe fd5a 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	e002      	b.n	80038a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fd42 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 80038a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009a      	lsls	r2, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	4a22      	ldr	r2, [pc, #136]	; (8003944 <UART_SetConfig+0x118>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	0119      	lsls	r1, r3, #4
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <UART_SetConfig+0x118>)
 80038da:	fba3 0302 	umull	r0, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2064      	movs	r0, #100	; 0x64
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a15      	ldr	r2, [pc, #84]	; (8003944 <UART_SetConfig+0x118>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f8:	4419      	add	r1, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <UART_SetConfig+0x118>)
 8003912:	fba3 0302 	umull	r0, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2064      	movs	r0, #100	; 0x64
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	3332      	adds	r3, #50	; 0x32
 8003924:	4a07      	ldr	r2, [pc, #28]	; (8003944 <UART_SetConfig+0x118>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	440a      	add	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40013800 	.word	0x40013800
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <__errno>:
 8003948:	4b01      	ldr	r3, [pc, #4]	; (8003950 <__errno+0x8>)
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000020 	.word	0x20000020

08003954 <__libc_init_array>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	2600      	movs	r6, #0
 8003958:	4d0c      	ldr	r5, [pc, #48]	; (800398c <__libc_init_array+0x38>)
 800395a:	4c0d      	ldr	r4, [pc, #52]	; (8003990 <__libc_init_array+0x3c>)
 800395c:	1b64      	subs	r4, r4, r5
 800395e:	10a4      	asrs	r4, r4, #2
 8003960:	42a6      	cmp	r6, r4
 8003962:	d109      	bne.n	8003978 <__libc_init_array+0x24>
 8003964:	f000 fc9c 	bl	80042a0 <_init>
 8003968:	2600      	movs	r6, #0
 800396a:	4d0a      	ldr	r5, [pc, #40]	; (8003994 <__libc_init_array+0x40>)
 800396c:	4c0a      	ldr	r4, [pc, #40]	; (8003998 <__libc_init_array+0x44>)
 800396e:	1b64      	subs	r4, r4, r5
 8003970:	10a4      	asrs	r4, r4, #2
 8003972:	42a6      	cmp	r6, r4
 8003974:	d105      	bne.n	8003982 <__libc_init_array+0x2e>
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	f855 3b04 	ldr.w	r3, [r5], #4
 800397c:	4798      	blx	r3
 800397e:	3601      	adds	r6, #1
 8003980:	e7ee      	b.n	8003960 <__libc_init_array+0xc>
 8003982:	f855 3b04 	ldr.w	r3, [r5], #4
 8003986:	4798      	blx	r3
 8003988:	3601      	adds	r6, #1
 800398a:	e7f2      	b.n	8003972 <__libc_init_array+0x1e>
 800398c:	08004450 	.word	0x08004450
 8003990:	08004450 	.word	0x08004450
 8003994:	08004450 	.word	0x08004450
 8003998:	08004454 	.word	0x08004454

0800399c <memset>:
 800399c:	4603      	mov	r3, r0
 800399e:	4402      	add	r2, r0
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d100      	bne.n	80039a6 <memset+0xa>
 80039a4:	4770      	bx	lr
 80039a6:	f803 1b01 	strb.w	r1, [r3], #1
 80039aa:	e7f9      	b.n	80039a0 <memset+0x4>

080039ac <_vsiprintf_r>:
 80039ac:	b500      	push	{lr}
 80039ae:	b09b      	sub	sp, #108	; 0x6c
 80039b0:	9100      	str	r1, [sp, #0]
 80039b2:	9104      	str	r1, [sp, #16]
 80039b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b8:	9105      	str	r1, [sp, #20]
 80039ba:	9102      	str	r1, [sp, #8]
 80039bc:	4905      	ldr	r1, [pc, #20]	; (80039d4 <_vsiprintf_r+0x28>)
 80039be:	9103      	str	r1, [sp, #12]
 80039c0:	4669      	mov	r1, sp
 80039c2:	f000 f86f 	bl	8003aa4 <_svfiprintf_r>
 80039c6:	2200      	movs	r2, #0
 80039c8:	9b00      	ldr	r3, [sp, #0]
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	b01b      	add	sp, #108	; 0x6c
 80039ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80039d2:	bf00      	nop
 80039d4:	ffff0208 	.word	0xffff0208

080039d8 <vsiprintf>:
 80039d8:	4613      	mov	r3, r2
 80039da:	460a      	mov	r2, r1
 80039dc:	4601      	mov	r1, r0
 80039de:	4802      	ldr	r0, [pc, #8]	; (80039e8 <vsiprintf+0x10>)
 80039e0:	6800      	ldr	r0, [r0, #0]
 80039e2:	f7ff bfe3 	b.w	80039ac <_vsiprintf_r>
 80039e6:	bf00      	nop
 80039e8:	20000020 	.word	0x20000020

080039ec <__ssputs_r>:
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	688e      	ldr	r6, [r1, #8]
 80039f2:	4682      	mov	sl, r0
 80039f4:	429e      	cmp	r6, r3
 80039f6:	460c      	mov	r4, r1
 80039f8:	4690      	mov	r8, r2
 80039fa:	461f      	mov	r7, r3
 80039fc:	d838      	bhi.n	8003a70 <__ssputs_r+0x84>
 80039fe:	898a      	ldrh	r2, [r1, #12]
 8003a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a04:	d032      	beq.n	8003a6c <__ssputs_r+0x80>
 8003a06:	6825      	ldr	r5, [r4, #0]
 8003a08:	6909      	ldr	r1, [r1, #16]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	eba5 0901 	sub.w	r9, r5, r1
 8003a10:	6965      	ldr	r5, [r4, #20]
 8003a12:	444b      	add	r3, r9
 8003a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a1c:	106d      	asrs	r5, r5, #1
 8003a1e:	429d      	cmp	r5, r3
 8003a20:	bf38      	it	cc
 8003a22:	461d      	movcc	r5, r3
 8003a24:	0553      	lsls	r3, r2, #21
 8003a26:	d531      	bpl.n	8003a8c <__ssputs_r+0xa0>
 8003a28:	4629      	mov	r1, r5
 8003a2a:	f000 fb6f 	bl	800410c <_malloc_r>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	b950      	cbnz	r0, 8003a48 <__ssputs_r+0x5c>
 8003a32:	230c      	movs	r3, #12
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f8ca 3000 	str.w	r3, [sl]
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a48:	464a      	mov	r2, r9
 8003a4a:	6921      	ldr	r1, [r4, #16]
 8003a4c:	f000 face 	bl	8003fec <memcpy>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	6126      	str	r6, [r4, #16]
 8003a5e:	444e      	add	r6, r9
 8003a60:	6026      	str	r6, [r4, #0]
 8003a62:	463e      	mov	r6, r7
 8003a64:	6165      	str	r5, [r4, #20]
 8003a66:	eba5 0509 	sub.w	r5, r5, r9
 8003a6a:	60a5      	str	r5, [r4, #8]
 8003a6c:	42be      	cmp	r6, r7
 8003a6e:	d900      	bls.n	8003a72 <__ssputs_r+0x86>
 8003a70:	463e      	mov	r6, r7
 8003a72:	4632      	mov	r2, r6
 8003a74:	4641      	mov	r1, r8
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	f000 fac6 	bl	8004008 <memmove>
 8003a7c:	68a3      	ldr	r3, [r4, #8]
 8003a7e:	2000      	movs	r0, #0
 8003a80:	1b9b      	subs	r3, r3, r6
 8003a82:	60a3      	str	r3, [r4, #8]
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	4433      	add	r3, r6
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	e7db      	b.n	8003a44 <__ssputs_r+0x58>
 8003a8c:	462a      	mov	r2, r5
 8003a8e:	f000 fbb1 	bl	80041f4 <_realloc_r>
 8003a92:	4606      	mov	r6, r0
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d1e1      	bne.n	8003a5c <__ssputs_r+0x70>
 8003a98:	4650      	mov	r0, sl
 8003a9a:	6921      	ldr	r1, [r4, #16]
 8003a9c:	f000 face 	bl	800403c <_free_r>
 8003aa0:	e7c7      	b.n	8003a32 <__ssputs_r+0x46>
	...

08003aa4 <_svfiprintf_r>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	898b      	ldrh	r3, [r1, #12]
 8003aac:	4607      	mov	r7, r0
 8003aae:	061b      	lsls	r3, r3, #24
 8003ab0:	460d      	mov	r5, r1
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	b09d      	sub	sp, #116	; 0x74
 8003ab6:	d50e      	bpl.n	8003ad6 <_svfiprintf_r+0x32>
 8003ab8:	690b      	ldr	r3, [r1, #16]
 8003aba:	b963      	cbnz	r3, 8003ad6 <_svfiprintf_r+0x32>
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	f000 fb25 	bl	800410c <_malloc_r>
 8003ac2:	6028      	str	r0, [r5, #0]
 8003ac4:	6128      	str	r0, [r5, #16]
 8003ac6:	b920      	cbnz	r0, 8003ad2 <_svfiprintf_r+0x2e>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e0d1      	b.n	8003c76 <_svfiprintf_r+0x1d2>
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	616b      	str	r3, [r5, #20]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ada:	2320      	movs	r3, #32
 8003adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ae0:	2330      	movs	r3, #48	; 0x30
 8003ae2:	f04f 0901 	mov.w	r9, #1
 8003ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c90 <_svfiprintf_r+0x1ec>
 8003aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af2:	4623      	mov	r3, r4
 8003af4:	469a      	mov	sl, r3
 8003af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afa:	b10a      	cbz	r2, 8003b00 <_svfiprintf_r+0x5c>
 8003afc:	2a25      	cmp	r2, #37	; 0x25
 8003afe:	d1f9      	bne.n	8003af4 <_svfiprintf_r+0x50>
 8003b00:	ebba 0b04 	subs.w	fp, sl, r4
 8003b04:	d00b      	beq.n	8003b1e <_svfiprintf_r+0x7a>
 8003b06:	465b      	mov	r3, fp
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f7ff ff6d 	bl	80039ec <__ssputs_r>
 8003b12:	3001      	adds	r0, #1
 8003b14:	f000 80aa 	beq.w	8003c6c <_svfiprintf_r+0x1c8>
 8003b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b1a:	445a      	add	r2, fp
 8003b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a2 	beq.w	8003c6c <_svfiprintf_r+0x1c8>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b32:	f10a 0a01 	add.w	sl, sl, #1
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	9307      	str	r3, [sp, #28]
 8003b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b40:	4654      	mov	r4, sl
 8003b42:	2205      	movs	r2, #5
 8003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b48:	4851      	ldr	r0, [pc, #324]	; (8003c90 <_svfiprintf_r+0x1ec>)
 8003b4a:	f000 fa41 	bl	8003fd0 <memchr>
 8003b4e:	9a04      	ldr	r2, [sp, #16]
 8003b50:	b9d8      	cbnz	r0, 8003b8a <_svfiprintf_r+0xe6>
 8003b52:	06d0      	lsls	r0, r2, #27
 8003b54:	bf44      	itt	mi
 8003b56:	2320      	movmi	r3, #32
 8003b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5c:	0711      	lsls	r1, r2, #28
 8003b5e:	bf44      	itt	mi
 8003b60:	232b      	movmi	r3, #43	; 0x2b
 8003b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b66:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6c:	d015      	beq.n	8003b9a <_svfiprintf_r+0xf6>
 8003b6e:	4654      	mov	r4, sl
 8003b70:	2000      	movs	r0, #0
 8003b72:	f04f 0c0a 	mov.w	ip, #10
 8003b76:	9a07      	ldr	r2, [sp, #28]
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b7e:	3b30      	subs	r3, #48	; 0x30
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d94e      	bls.n	8003c22 <_svfiprintf_r+0x17e>
 8003b84:	b1b0      	cbz	r0, 8003bb4 <_svfiprintf_r+0x110>
 8003b86:	9207      	str	r2, [sp, #28]
 8003b88:	e014      	b.n	8003bb4 <_svfiprintf_r+0x110>
 8003b8a:	eba0 0308 	sub.w	r3, r0, r8
 8003b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b92:	4313      	orrs	r3, r2
 8003b94:	46a2      	mov	sl, r4
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	e7d2      	b.n	8003b40 <_svfiprintf_r+0x9c>
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	1d19      	adds	r1, r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	9103      	str	r1, [sp, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfbb      	ittet	lt
 8003ba6:	425b      	neglt	r3, r3
 8003ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bac:	9307      	strge	r3, [sp, #28]
 8003bae:	9307      	strlt	r3, [sp, #28]
 8003bb0:	bfb8      	it	lt
 8003bb2:	9204      	strlt	r2, [sp, #16]
 8003bb4:	7823      	ldrb	r3, [r4, #0]
 8003bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb8:	d10c      	bne.n	8003bd4 <_svfiprintf_r+0x130>
 8003bba:	7863      	ldrb	r3, [r4, #1]
 8003bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bbe:	d135      	bne.n	8003c2c <_svfiprintf_r+0x188>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	3402      	adds	r4, #2
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	9203      	str	r2, [sp, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfb8      	it	lt
 8003bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bd2:	9305      	str	r3, [sp, #20]
 8003bd4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c94 <_svfiprintf_r+0x1f0>
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4650      	mov	r0, sl
 8003bdc:	7821      	ldrb	r1, [r4, #0]
 8003bde:	f000 f9f7 	bl	8003fd0 <memchr>
 8003be2:	b140      	cbz	r0, 8003bf6 <_svfiprintf_r+0x152>
 8003be4:	2340      	movs	r3, #64	; 0x40
 8003be6:	eba0 000a 	sub.w	r0, r0, sl
 8003bea:	fa03 f000 	lsl.w	r0, r3, r0
 8003bee:	9b04      	ldr	r3, [sp, #16]
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	4303      	orrs	r3, r0
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	4826      	ldr	r0, [pc, #152]	; (8003c98 <_svfiprintf_r+0x1f4>)
 8003bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c02:	f000 f9e5 	bl	8003fd0 <memchr>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d038      	beq.n	8003c7c <_svfiprintf_r+0x1d8>
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <_svfiprintf_r+0x1f8>)
 8003c0c:	bb1b      	cbnz	r3, 8003c56 <_svfiprintf_r+0x1b2>
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	3307      	adds	r3, #7
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	3308      	adds	r3, #8
 8003c18:	9303      	str	r3, [sp, #12]
 8003c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c1c:	4433      	add	r3, r6
 8003c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c20:	e767      	b.n	8003af2 <_svfiprintf_r+0x4e>
 8003c22:	460c      	mov	r4, r1
 8003c24:	2001      	movs	r0, #1
 8003c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c2a:	e7a5      	b.n	8003b78 <_svfiprintf_r+0xd4>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f04f 0c0a 	mov.w	ip, #10
 8003c32:	4619      	mov	r1, r3
 8003c34:	3401      	adds	r4, #1
 8003c36:	9305      	str	r3, [sp, #20]
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3e:	3a30      	subs	r2, #48	; 0x30
 8003c40:	2a09      	cmp	r2, #9
 8003c42:	d903      	bls.n	8003c4c <_svfiprintf_r+0x1a8>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0c5      	beq.n	8003bd4 <_svfiprintf_r+0x130>
 8003c48:	9105      	str	r1, [sp, #20]
 8003c4a:	e7c3      	b.n	8003bd4 <_svfiprintf_r+0x130>
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	2301      	movs	r3, #1
 8003c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c54:	e7f0      	b.n	8003c38 <_svfiprintf_r+0x194>
 8003c56:	ab03      	add	r3, sp, #12
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	462a      	mov	r2, r5
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <_svfiprintf_r+0x1fc>)
 8003c60:	a904      	add	r1, sp, #16
 8003c62:	f3af 8000 	nop.w
 8003c66:	1c42      	adds	r2, r0, #1
 8003c68:	4606      	mov	r6, r0
 8003c6a:	d1d6      	bne.n	8003c1a <_svfiprintf_r+0x176>
 8003c6c:	89ab      	ldrh	r3, [r5, #12]
 8003c6e:	065b      	lsls	r3, r3, #25
 8003c70:	f53f af2c 	bmi.w	8003acc <_svfiprintf_r+0x28>
 8003c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c76:	b01d      	add	sp, #116	; 0x74
 8003c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7c:	ab03      	add	r3, sp, #12
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	462a      	mov	r2, r5
 8003c82:	4638      	mov	r0, r7
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <_svfiprintf_r+0x1fc>)
 8003c86:	a904      	add	r1, sp, #16
 8003c88:	f000 f87c 	bl	8003d84 <_printf_i>
 8003c8c:	e7eb      	b.n	8003c66 <_svfiprintf_r+0x1c2>
 8003c8e:	bf00      	nop
 8003c90:	0800441c 	.word	0x0800441c
 8003c94:	08004422 	.word	0x08004422
 8003c98:	08004426 	.word	0x08004426
 8003c9c:	00000000 	.word	0x00000000
 8003ca0:	080039ed 	.word	0x080039ed

08003ca4 <_printf_common>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	4616      	mov	r6, r2
 8003caa:	4699      	mov	r9, r3
 8003cac:	688a      	ldr	r2, [r1, #8]
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bfb8      	it	lt
 8003cb6:	4613      	movlt	r3, r2
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc4:	b10a      	cbz	r2, 8003cca <_printf_common+0x26>
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	0699      	lsls	r1, r3, #26
 8003cce:	bf42      	ittt	mi
 8003cd0:	6833      	ldrmi	r3, [r6, #0]
 8003cd2:	3302      	addmi	r3, #2
 8003cd4:	6033      	strmi	r3, [r6, #0]
 8003cd6:	6825      	ldr	r5, [r4, #0]
 8003cd8:	f015 0506 	ands.w	r5, r5, #6
 8003cdc:	d106      	bne.n	8003cec <_printf_common+0x48>
 8003cde:	f104 0a19 	add.w	sl, r4, #25
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	6832      	ldr	r2, [r6, #0]
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	dc28      	bgt.n	8003d3e <_printf_common+0x9a>
 8003cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cf0:	1e13      	subs	r3, r2, #0
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	bf18      	it	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	0692      	lsls	r2, r2, #26
 8003cfa:	d42d      	bmi.n	8003d58 <_printf_common+0xb4>
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d04:	47c0      	blx	r8
 8003d06:	3001      	adds	r0, #1
 8003d08:	d020      	beq.n	8003d4c <_printf_common+0xa8>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	68e5      	ldr	r5, [r4, #12]
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf18      	it	ne
 8003d16:	2500      	movne	r5, #0
 8003d18:	6832      	ldr	r2, [r6, #0]
 8003d1a:	f04f 0600 	mov.w	r6, #0
 8003d1e:	68a3      	ldr	r3, [r4, #8]
 8003d20:	bf08      	it	eq
 8003d22:	1aad      	subeq	r5, r5, r2
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	bf08      	it	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	bfc4      	itt	gt
 8003d30:	1a9b      	subgt	r3, r3, r2
 8003d32:	18ed      	addgt	r5, r5, r3
 8003d34:	341a      	adds	r4, #26
 8003d36:	42b5      	cmp	r5, r6
 8003d38:	d11a      	bne.n	8003d70 <_printf_common+0xcc>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e008      	b.n	8003d50 <_printf_common+0xac>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	4652      	mov	r2, sl
 8003d42:	4649      	mov	r1, r9
 8003d44:	4638      	mov	r0, r7
 8003d46:	47c0      	blx	r8
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d103      	bne.n	8003d54 <_printf_common+0xb0>
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d54:	3501      	adds	r5, #1
 8003d56:	e7c4      	b.n	8003ce2 <_printf_common+0x3e>
 8003d58:	2030      	movs	r0, #48	; 0x30
 8003d5a:	18e1      	adds	r1, r4, r3
 8003d5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d66:	4422      	add	r2, r4
 8003d68:	3302      	adds	r3, #2
 8003d6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d6e:	e7c5      	b.n	8003cfc <_printf_common+0x58>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4622      	mov	r2, r4
 8003d74:	4649      	mov	r1, r9
 8003d76:	4638      	mov	r0, r7
 8003d78:	47c0      	blx	r8
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d0e6      	beq.n	8003d4c <_printf_common+0xa8>
 8003d7e:	3601      	adds	r6, #1
 8003d80:	e7d9      	b.n	8003d36 <_printf_common+0x92>
	...

08003d84 <_printf_i>:
 8003d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	7e0f      	ldrb	r7, [r1, #24]
 8003d8a:	4691      	mov	r9, r2
 8003d8c:	2f78      	cmp	r7, #120	; 0x78
 8003d8e:	4680      	mov	r8, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	469a      	mov	sl, r3
 8003d94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d9a:	d807      	bhi.n	8003dac <_printf_i+0x28>
 8003d9c:	2f62      	cmp	r7, #98	; 0x62
 8003d9e:	d80a      	bhi.n	8003db6 <_printf_i+0x32>
 8003da0:	2f00      	cmp	r7, #0
 8003da2:	f000 80d9 	beq.w	8003f58 <_printf_i+0x1d4>
 8003da6:	2f58      	cmp	r7, #88	; 0x58
 8003da8:	f000 80a4 	beq.w	8003ef4 <_printf_i+0x170>
 8003dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db4:	e03a      	b.n	8003e2c <_printf_i+0xa8>
 8003db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dba:	2b15      	cmp	r3, #21
 8003dbc:	d8f6      	bhi.n	8003dac <_printf_i+0x28>
 8003dbe:	a101      	add	r1, pc, #4	; (adr r1, 8003dc4 <_printf_i+0x40>)
 8003dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc4:	08003e1d 	.word	0x08003e1d
 8003dc8:	08003e31 	.word	0x08003e31
 8003dcc:	08003dad 	.word	0x08003dad
 8003dd0:	08003dad 	.word	0x08003dad
 8003dd4:	08003dad 	.word	0x08003dad
 8003dd8:	08003dad 	.word	0x08003dad
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003dad 	.word	0x08003dad
 8003de4:	08003dad 	.word	0x08003dad
 8003de8:	08003dad 	.word	0x08003dad
 8003dec:	08003dad 	.word	0x08003dad
 8003df0:	08003f3f 	.word	0x08003f3f
 8003df4:	08003e61 	.word	0x08003e61
 8003df8:	08003f21 	.word	0x08003f21
 8003dfc:	08003dad 	.word	0x08003dad
 8003e00:	08003dad 	.word	0x08003dad
 8003e04:	08003f61 	.word	0x08003f61
 8003e08:	08003dad 	.word	0x08003dad
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003dad 	.word	0x08003dad
 8003e14:	08003dad 	.word	0x08003dad
 8003e18:	08003f29 	.word	0x08003f29
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	1d1a      	adds	r2, r3, #4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	602a      	str	r2, [r5, #0]
 8003e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0a4      	b.n	8003f7a <_printf_i+0x1f6>
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	6829      	ldr	r1, [r5, #0]
 8003e34:	0606      	lsls	r6, r0, #24
 8003e36:	f101 0304 	add.w	r3, r1, #4
 8003e3a:	d50a      	bpl.n	8003e52 <_printf_i+0xce>
 8003e3c:	680e      	ldr	r6, [r1, #0]
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	2e00      	cmp	r6, #0
 8003e42:	da03      	bge.n	8003e4c <_printf_i+0xc8>
 8003e44:	232d      	movs	r3, #45	; 0x2d
 8003e46:	4276      	negs	r6, r6
 8003e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e4c:	230a      	movs	r3, #10
 8003e4e:	485e      	ldr	r0, [pc, #376]	; (8003fc8 <_printf_i+0x244>)
 8003e50:	e019      	b.n	8003e86 <_printf_i+0x102>
 8003e52:	680e      	ldr	r6, [r1, #0]
 8003e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	bf18      	it	ne
 8003e5c:	b236      	sxthne	r6, r6
 8003e5e:	e7ef      	b.n	8003e40 <_printf_i+0xbc>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	6029      	str	r1, [r5, #0]
 8003e68:	0601      	lsls	r1, r0, #24
 8003e6a:	d501      	bpl.n	8003e70 <_printf_i+0xec>
 8003e6c:	681e      	ldr	r6, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <_printf_i+0xf2>
 8003e70:	0646      	lsls	r6, r0, #25
 8003e72:	d5fb      	bpl.n	8003e6c <_printf_i+0xe8>
 8003e74:	881e      	ldrh	r6, [r3, #0]
 8003e76:	2f6f      	cmp	r7, #111	; 0x6f
 8003e78:	bf0c      	ite	eq
 8003e7a:	2308      	moveq	r3, #8
 8003e7c:	230a      	movne	r3, #10
 8003e7e:	4852      	ldr	r0, [pc, #328]	; (8003fc8 <_printf_i+0x244>)
 8003e80:	2100      	movs	r1, #0
 8003e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e86:	6865      	ldr	r5, [r4, #4]
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	bfa8      	it	ge
 8003e8c:	6821      	ldrge	r1, [r4, #0]
 8003e8e:	60a5      	str	r5, [r4, #8]
 8003e90:	bfa4      	itt	ge
 8003e92:	f021 0104 	bicge.w	r1, r1, #4
 8003e96:	6021      	strge	r1, [r4, #0]
 8003e98:	b90e      	cbnz	r6, 8003e9e <_printf_i+0x11a>
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	d04d      	beq.n	8003f3a <_printf_i+0x1b6>
 8003e9e:	4615      	mov	r5, r2
 8003ea0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ea8:	5dc7      	ldrb	r7, [r0, r7]
 8003eaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eae:	4637      	mov	r7, r6
 8003eb0:	42bb      	cmp	r3, r7
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	d9f4      	bls.n	8003ea0 <_printf_i+0x11c>
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d10b      	bne.n	8003ed2 <_printf_i+0x14e>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	07de      	lsls	r6, r3, #31
 8003ebe:	d508      	bpl.n	8003ed2 <_printf_i+0x14e>
 8003ec0:	6923      	ldr	r3, [r4, #16]
 8003ec2:	6861      	ldr	r1, [r4, #4]
 8003ec4:	4299      	cmp	r1, r3
 8003ec6:	bfde      	ittt	le
 8003ec8:	2330      	movle	r3, #48	; 0x30
 8003eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ece:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ed2:	1b52      	subs	r2, r2, r5
 8003ed4:	6122      	str	r2, [r4, #16]
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4640      	mov	r0, r8
 8003edc:	f8cd a000 	str.w	sl, [sp]
 8003ee0:	aa03      	add	r2, sp, #12
 8003ee2:	f7ff fedf 	bl	8003ca4 <_printf_common>
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d14c      	bne.n	8003f84 <_printf_i+0x200>
 8003eea:	f04f 30ff 	mov.w	r0, #4294967295
 8003eee:	b004      	add	sp, #16
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	4834      	ldr	r0, [pc, #208]	; (8003fc8 <_printf_i+0x244>)
 8003ef6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003efa:	6829      	ldr	r1, [r5, #0]
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f02:	6029      	str	r1, [r5, #0]
 8003f04:	061d      	lsls	r5, r3, #24
 8003f06:	d514      	bpl.n	8003f32 <_printf_i+0x1ae>
 8003f08:	07df      	lsls	r7, r3, #31
 8003f0a:	bf44      	itt	mi
 8003f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f10:	6023      	strmi	r3, [r4, #0]
 8003f12:	b91e      	cbnz	r6, 8003f1c <_printf_i+0x198>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f023 0320 	bic.w	r3, r3, #32
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	e7af      	b.n	8003e80 <_printf_i+0xfc>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f043 0320 	orr.w	r3, r3, #32
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	2378      	movs	r3, #120	; 0x78
 8003f2a:	4828      	ldr	r0, [pc, #160]	; (8003fcc <_printf_i+0x248>)
 8003f2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f30:	e7e3      	b.n	8003efa <_printf_i+0x176>
 8003f32:	0659      	lsls	r1, r3, #25
 8003f34:	bf48      	it	mi
 8003f36:	b2b6      	uxthmi	r6, r6
 8003f38:	e7e6      	b.n	8003f08 <_printf_i+0x184>
 8003f3a:	4615      	mov	r5, r2
 8003f3c:	e7bb      	b.n	8003eb6 <_printf_i+0x132>
 8003f3e:	682b      	ldr	r3, [r5, #0]
 8003f40:	6826      	ldr	r6, [r4, #0]
 8003f42:	1d18      	adds	r0, r3, #4
 8003f44:	6961      	ldr	r1, [r4, #20]
 8003f46:	6028      	str	r0, [r5, #0]
 8003f48:	0635      	lsls	r5, r6, #24
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	d501      	bpl.n	8003f52 <_printf_i+0x1ce>
 8003f4e:	6019      	str	r1, [r3, #0]
 8003f50:	e002      	b.n	8003f58 <_printf_i+0x1d4>
 8003f52:	0670      	lsls	r0, r6, #25
 8003f54:	d5fb      	bpl.n	8003f4e <_printf_i+0x1ca>
 8003f56:	8019      	strh	r1, [r3, #0]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4615      	mov	r5, r2
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	e7ba      	b.n	8003ed6 <_printf_i+0x152>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	2100      	movs	r1, #0
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	602a      	str	r2, [r5, #0]
 8003f68:	681d      	ldr	r5, [r3, #0]
 8003f6a:	6862      	ldr	r2, [r4, #4]
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f82f 	bl	8003fd0 <memchr>
 8003f72:	b108      	cbz	r0, 8003f78 <_printf_i+0x1f4>
 8003f74:	1b40      	subs	r0, r0, r5
 8003f76:	6060      	str	r0, [r4, #4]
 8003f78:	6863      	ldr	r3, [r4, #4]
 8003f7a:	6123      	str	r3, [r4, #16]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f82:	e7a8      	b.n	8003ed6 <_printf_i+0x152>
 8003f84:	462a      	mov	r2, r5
 8003f86:	4649      	mov	r1, r9
 8003f88:	4640      	mov	r0, r8
 8003f8a:	6923      	ldr	r3, [r4, #16]
 8003f8c:	47d0      	blx	sl
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d0ab      	beq.n	8003eea <_printf_i+0x166>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	079b      	lsls	r3, r3, #30
 8003f96:	d413      	bmi.n	8003fc0 <_printf_i+0x23c>
 8003f98:	68e0      	ldr	r0, [r4, #12]
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	4298      	cmp	r0, r3
 8003f9e:	bfb8      	it	lt
 8003fa0:	4618      	movlt	r0, r3
 8003fa2:	e7a4      	b.n	8003eee <_printf_i+0x16a>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	4649      	mov	r1, r9
 8003faa:	4640      	mov	r0, r8
 8003fac:	47d0      	blx	sl
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d09b      	beq.n	8003eea <_printf_i+0x166>
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	68e3      	ldr	r3, [r4, #12]
 8003fb6:	9903      	ldr	r1, [sp, #12]
 8003fb8:	1a5b      	subs	r3, r3, r1
 8003fba:	42ab      	cmp	r3, r5
 8003fbc:	dcf2      	bgt.n	8003fa4 <_printf_i+0x220>
 8003fbe:	e7eb      	b.n	8003f98 <_printf_i+0x214>
 8003fc0:	2500      	movs	r5, #0
 8003fc2:	f104 0619 	add.w	r6, r4, #25
 8003fc6:	e7f5      	b.n	8003fb4 <_printf_i+0x230>
 8003fc8:	0800442d 	.word	0x0800442d
 8003fcc:	0800443e 	.word	0x0800443e

08003fd0 <memchr>:
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	b2c9      	uxtb	r1, r1
 8003fd6:	4402      	add	r2, r0
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	d101      	bne.n	8003fe2 <memchr+0x12>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e003      	b.n	8003fea <memchr+0x1a>
 8003fe2:	7804      	ldrb	r4, [r0, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	428c      	cmp	r4, r1
 8003fe8:	d1f6      	bne.n	8003fd8 <memchr+0x8>
 8003fea:	bd10      	pop	{r4, pc}

08003fec <memcpy>:
 8003fec:	440a      	add	r2, r1
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ff4:	d100      	bne.n	8003ff8 <memcpy+0xc>
 8003ff6:	4770      	bx	lr
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffe:	4291      	cmp	r1, r2
 8004000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004004:	d1f9      	bne.n	8003ffa <memcpy+0xe>
 8004006:	bd10      	pop	{r4, pc}

08004008 <memmove>:
 8004008:	4288      	cmp	r0, r1
 800400a:	b510      	push	{r4, lr}
 800400c:	eb01 0402 	add.w	r4, r1, r2
 8004010:	d902      	bls.n	8004018 <memmove+0x10>
 8004012:	4284      	cmp	r4, r0
 8004014:	4623      	mov	r3, r4
 8004016:	d807      	bhi.n	8004028 <memmove+0x20>
 8004018:	1e43      	subs	r3, r0, #1
 800401a:	42a1      	cmp	r1, r4
 800401c:	d008      	beq.n	8004030 <memmove+0x28>
 800401e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004026:	e7f8      	b.n	800401a <memmove+0x12>
 8004028:	4601      	mov	r1, r0
 800402a:	4402      	add	r2, r0
 800402c:	428a      	cmp	r2, r1
 800402e:	d100      	bne.n	8004032 <memmove+0x2a>
 8004030:	bd10      	pop	{r4, pc}
 8004032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800403a:	e7f7      	b.n	800402c <memmove+0x24>

0800403c <_free_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4605      	mov	r5, r0
 8004040:	2900      	cmp	r1, #0
 8004042:	d040      	beq.n	80040c6 <_free_r+0x8a>
 8004044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004048:	1f0c      	subs	r4, r1, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	bfb8      	it	lt
 800404e:	18e4      	addlt	r4, r4, r3
 8004050:	f000 f910 	bl	8004274 <__malloc_lock>
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <_free_r+0x8c>)
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	b933      	cbnz	r3, 8004068 <_free_r+0x2c>
 800405a:	6063      	str	r3, [r4, #4]
 800405c:	6014      	str	r4, [r2, #0]
 800405e:	4628      	mov	r0, r5
 8004060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004064:	f000 b90c 	b.w	8004280 <__malloc_unlock>
 8004068:	42a3      	cmp	r3, r4
 800406a:	d908      	bls.n	800407e <_free_r+0x42>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	1821      	adds	r1, r4, r0
 8004070:	428b      	cmp	r3, r1
 8004072:	bf01      	itttt	eq
 8004074:	6819      	ldreq	r1, [r3, #0]
 8004076:	685b      	ldreq	r3, [r3, #4]
 8004078:	1809      	addeq	r1, r1, r0
 800407a:	6021      	streq	r1, [r4, #0]
 800407c:	e7ed      	b.n	800405a <_free_r+0x1e>
 800407e:	461a      	mov	r2, r3
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	b10b      	cbz	r3, 8004088 <_free_r+0x4c>
 8004084:	42a3      	cmp	r3, r4
 8004086:	d9fa      	bls.n	800407e <_free_r+0x42>
 8004088:	6811      	ldr	r1, [r2, #0]
 800408a:	1850      	adds	r0, r2, r1
 800408c:	42a0      	cmp	r0, r4
 800408e:	d10b      	bne.n	80040a8 <_free_r+0x6c>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	4401      	add	r1, r0
 8004094:	1850      	adds	r0, r2, r1
 8004096:	4283      	cmp	r3, r0
 8004098:	6011      	str	r1, [r2, #0]
 800409a:	d1e0      	bne.n	800405e <_free_r+0x22>
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4401      	add	r1, r0
 80040a2:	6011      	str	r1, [r2, #0]
 80040a4:	6053      	str	r3, [r2, #4]
 80040a6:	e7da      	b.n	800405e <_free_r+0x22>
 80040a8:	d902      	bls.n	80040b0 <_free_r+0x74>
 80040aa:	230c      	movs	r3, #12
 80040ac:	602b      	str	r3, [r5, #0]
 80040ae:	e7d6      	b.n	800405e <_free_r+0x22>
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	1821      	adds	r1, r4, r0
 80040b4:	428b      	cmp	r3, r1
 80040b6:	bf01      	itttt	eq
 80040b8:	6819      	ldreq	r1, [r3, #0]
 80040ba:	685b      	ldreq	r3, [r3, #4]
 80040bc:	1809      	addeq	r1, r1, r0
 80040be:	6021      	streq	r1, [r4, #0]
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6054      	str	r4, [r2, #4]
 80040c4:	e7cb      	b.n	800405e <_free_r+0x22>
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	2000120c 	.word	0x2000120c

080040cc <sbrk_aligned>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4e0e      	ldr	r6, [pc, #56]	; (8004108 <sbrk_aligned+0x3c>)
 80040d0:	460c      	mov	r4, r1
 80040d2:	6831      	ldr	r1, [r6, #0]
 80040d4:	4605      	mov	r5, r0
 80040d6:	b911      	cbnz	r1, 80040de <sbrk_aligned+0x12>
 80040d8:	f000 f8bc 	bl	8004254 <_sbrk_r>
 80040dc:	6030      	str	r0, [r6, #0]
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f8b7 	bl	8004254 <_sbrk_r>
 80040e6:	1c43      	adds	r3, r0, #1
 80040e8:	d00a      	beq.n	8004100 <sbrk_aligned+0x34>
 80040ea:	1cc4      	adds	r4, r0, #3
 80040ec:	f024 0403 	bic.w	r4, r4, #3
 80040f0:	42a0      	cmp	r0, r4
 80040f2:	d007      	beq.n	8004104 <sbrk_aligned+0x38>
 80040f4:	1a21      	subs	r1, r4, r0
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 f8ac 	bl	8004254 <_sbrk_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d101      	bne.n	8004104 <sbrk_aligned+0x38>
 8004100:	f04f 34ff 	mov.w	r4, #4294967295
 8004104:	4620      	mov	r0, r4
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	20001210 	.word	0x20001210

0800410c <_malloc_r>:
 800410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004110:	1ccd      	adds	r5, r1, #3
 8004112:	f025 0503 	bic.w	r5, r5, #3
 8004116:	3508      	adds	r5, #8
 8004118:	2d0c      	cmp	r5, #12
 800411a:	bf38      	it	cc
 800411c:	250c      	movcc	r5, #12
 800411e:	2d00      	cmp	r5, #0
 8004120:	4607      	mov	r7, r0
 8004122:	db01      	blt.n	8004128 <_malloc_r+0x1c>
 8004124:	42a9      	cmp	r1, r5
 8004126:	d905      	bls.n	8004134 <_malloc_r+0x28>
 8004128:	230c      	movs	r3, #12
 800412a:	2600      	movs	r6, #0
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4630      	mov	r0, r6
 8004130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004134:	4e2e      	ldr	r6, [pc, #184]	; (80041f0 <_malloc_r+0xe4>)
 8004136:	f000 f89d 	bl	8004274 <__malloc_lock>
 800413a:	6833      	ldr	r3, [r6, #0]
 800413c:	461c      	mov	r4, r3
 800413e:	bb34      	cbnz	r4, 800418e <_malloc_r+0x82>
 8004140:	4629      	mov	r1, r5
 8004142:	4638      	mov	r0, r7
 8004144:	f7ff ffc2 	bl	80040cc <sbrk_aligned>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	4604      	mov	r4, r0
 800414c:	d14d      	bne.n	80041ea <_malloc_r+0xde>
 800414e:	6834      	ldr	r4, [r6, #0]
 8004150:	4626      	mov	r6, r4
 8004152:	2e00      	cmp	r6, #0
 8004154:	d140      	bne.n	80041d8 <_malloc_r+0xcc>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	4631      	mov	r1, r6
 800415a:	4638      	mov	r0, r7
 800415c:	eb04 0803 	add.w	r8, r4, r3
 8004160:	f000 f878 	bl	8004254 <_sbrk_r>
 8004164:	4580      	cmp	r8, r0
 8004166:	d13a      	bne.n	80041de <_malloc_r+0xd2>
 8004168:	6821      	ldr	r1, [r4, #0]
 800416a:	3503      	adds	r5, #3
 800416c:	1a6d      	subs	r5, r5, r1
 800416e:	f025 0503 	bic.w	r5, r5, #3
 8004172:	3508      	adds	r5, #8
 8004174:	2d0c      	cmp	r5, #12
 8004176:	bf38      	it	cc
 8004178:	250c      	movcc	r5, #12
 800417a:	4638      	mov	r0, r7
 800417c:	4629      	mov	r1, r5
 800417e:	f7ff ffa5 	bl	80040cc <sbrk_aligned>
 8004182:	3001      	adds	r0, #1
 8004184:	d02b      	beq.n	80041de <_malloc_r+0xd2>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	442b      	add	r3, r5
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	e00e      	b.n	80041ac <_malloc_r+0xa0>
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	1b52      	subs	r2, r2, r5
 8004192:	d41e      	bmi.n	80041d2 <_malloc_r+0xc6>
 8004194:	2a0b      	cmp	r2, #11
 8004196:	d916      	bls.n	80041c6 <_malloc_r+0xba>
 8004198:	1961      	adds	r1, r4, r5
 800419a:	42a3      	cmp	r3, r4
 800419c:	6025      	str	r5, [r4, #0]
 800419e:	bf18      	it	ne
 80041a0:	6059      	strne	r1, [r3, #4]
 80041a2:	6863      	ldr	r3, [r4, #4]
 80041a4:	bf08      	it	eq
 80041a6:	6031      	streq	r1, [r6, #0]
 80041a8:	5162      	str	r2, [r4, r5]
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	4638      	mov	r0, r7
 80041ae:	f104 060b 	add.w	r6, r4, #11
 80041b2:	f000 f865 	bl	8004280 <__malloc_unlock>
 80041b6:	f026 0607 	bic.w	r6, r6, #7
 80041ba:	1d23      	adds	r3, r4, #4
 80041bc:	1af2      	subs	r2, r6, r3
 80041be:	d0b6      	beq.n	800412e <_malloc_r+0x22>
 80041c0:	1b9b      	subs	r3, r3, r6
 80041c2:	50a3      	str	r3, [r4, r2]
 80041c4:	e7b3      	b.n	800412e <_malloc_r+0x22>
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	bf0c      	ite	eq
 80041cc:	6032      	streq	r2, [r6, #0]
 80041ce:	605a      	strne	r2, [r3, #4]
 80041d0:	e7ec      	b.n	80041ac <_malloc_r+0xa0>
 80041d2:	4623      	mov	r3, r4
 80041d4:	6864      	ldr	r4, [r4, #4]
 80041d6:	e7b2      	b.n	800413e <_malloc_r+0x32>
 80041d8:	4634      	mov	r4, r6
 80041da:	6876      	ldr	r6, [r6, #4]
 80041dc:	e7b9      	b.n	8004152 <_malloc_r+0x46>
 80041de:	230c      	movs	r3, #12
 80041e0:	4638      	mov	r0, r7
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	f000 f84c 	bl	8004280 <__malloc_unlock>
 80041e8:	e7a1      	b.n	800412e <_malloc_r+0x22>
 80041ea:	6025      	str	r5, [r4, #0]
 80041ec:	e7de      	b.n	80041ac <_malloc_r+0xa0>
 80041ee:	bf00      	nop
 80041f0:	2000120c 	.word	0x2000120c

080041f4 <_realloc_r>:
 80041f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f8:	4680      	mov	r8, r0
 80041fa:	4614      	mov	r4, r2
 80041fc:	460e      	mov	r6, r1
 80041fe:	b921      	cbnz	r1, 800420a <_realloc_r+0x16>
 8004200:	4611      	mov	r1, r2
 8004202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004206:	f7ff bf81 	b.w	800410c <_malloc_r>
 800420a:	b92a      	cbnz	r2, 8004218 <_realloc_r+0x24>
 800420c:	f7ff ff16 	bl	800403c <_free_r>
 8004210:	4625      	mov	r5, r4
 8004212:	4628      	mov	r0, r5
 8004214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004218:	f000 f838 	bl	800428c <_malloc_usable_size_r>
 800421c:	4284      	cmp	r4, r0
 800421e:	4607      	mov	r7, r0
 8004220:	d802      	bhi.n	8004228 <_realloc_r+0x34>
 8004222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004226:	d812      	bhi.n	800424e <_realloc_r+0x5a>
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f7ff ff6e 	bl	800410c <_malloc_r>
 8004230:	4605      	mov	r5, r0
 8004232:	2800      	cmp	r0, #0
 8004234:	d0ed      	beq.n	8004212 <_realloc_r+0x1e>
 8004236:	42bc      	cmp	r4, r7
 8004238:	4622      	mov	r2, r4
 800423a:	4631      	mov	r1, r6
 800423c:	bf28      	it	cs
 800423e:	463a      	movcs	r2, r7
 8004240:	f7ff fed4 	bl	8003fec <memcpy>
 8004244:	4631      	mov	r1, r6
 8004246:	4640      	mov	r0, r8
 8004248:	f7ff fef8 	bl	800403c <_free_r>
 800424c:	e7e1      	b.n	8004212 <_realloc_r+0x1e>
 800424e:	4635      	mov	r5, r6
 8004250:	e7df      	b.n	8004212 <_realloc_r+0x1e>
	...

08004254 <_sbrk_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	2300      	movs	r3, #0
 8004258:	4d05      	ldr	r5, [pc, #20]	; (8004270 <_sbrk_r+0x1c>)
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	f7fc fcb4 	bl	8000bcc <_sbrk>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_sbrk_r+0x1a>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_sbrk_r+0x1a>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20001214 	.word	0x20001214

08004274 <__malloc_lock>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__malloc_lock+0x8>)
 8004276:	f000 b811 	b.w	800429c <__retarget_lock_acquire_recursive>
 800427a:	bf00      	nop
 800427c:	20001218 	.word	0x20001218

08004280 <__malloc_unlock>:
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <__malloc_unlock+0x8>)
 8004282:	f000 b80c 	b.w	800429e <__retarget_lock_release_recursive>
 8004286:	bf00      	nop
 8004288:	20001218 	.word	0x20001218

0800428c <_malloc_usable_size_r>:
 800428c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004290:	1f18      	subs	r0, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfbc      	itt	lt
 8004296:	580b      	ldrlt	r3, [r1, r0]
 8004298:	18c0      	addlt	r0, r0, r3
 800429a:	4770      	bx	lr

0800429c <__retarget_lock_acquire_recursive>:
 800429c:	4770      	bx	lr

0800429e <__retarget_lock_release_recursive>:
 800429e:	4770      	bx	lr

080042a0 <_init>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr

080042ac <_fini>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr
